  /******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  * (c) EE2028 Teaching Team
  ******************************************************************************/


/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "../../Drivers/BSP/B-L475E-IOT01/stm32l475e_iot01_accelero.h"
#include "../../Drivers/BSP/B-L475E-IOT01/stm32l475e_iot01_tsensor.h"
#include "../../Drivers/BSP/B-L475E-IOT01/stm32l475e_iot01_magneto.h"
#include "../../Drivers/BSP/B-L475E-IOT01/stm32l475e_iot01_hsensor.h"
#include "../../Drivers/BSP/B-L475E-IOT01/stm32l475e_iot01.h"
#include "stdio.h"

extern void initialise_monitor_handles(void);	// for semi-hosting support (printf)

int counter = 1;

int main(void)
{
	initialise_monitor_handles(); // for semi-hosting support (printf)

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* Peripheral initializations using BSP functions */
	BSP_ACCELERO_Init();
	BSP_TSENSOR_Init();
	BSP_LED_Init(LED2);
	BSP_MAGNETO_Init(); // initializing magnetometer
	BSP_HSENSOR_Init(); // initializing humidity sensor

	while (1)
	{
		if(counter==2){

			float accel_data[3];
			int16_t accel_data_i16[3] = { 0 };
			BSP_MAGNETO_GetXYZ(accel_data_i16);// array to store the x, y and z readings.
			//BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
			// the function above returns 16 bit integers which are acceleration in mg (9.8/1000 m/s^2).
			// Converting to float to print the actual acceleration.
			accel_data[0] = (float)accel_data_i16[0] * (9.8/1000.0f);
			accel_data[1] = (float)accel_data_i16[1] * (9.8/1000.0f);
			accel_data[2] = (float)accel_data_i16[2] * (9.8/1000.0f);

			printf("Accel X : %f; Accel Y : %f; Accel Z : %f\n ", accel_data[0], accel_data[1], accel_data[2]);

		}

		if (counter==3){

			float temp_data;
					temp_data = BSP_TSENSOR_ReadTemp();			// read temperature sensor

					printf("Temperature : %f\n", temp_data);
			counter=0;
		}

		HAL_Delay(500);	// read once a ~second.
		counter++;


	}
	BSP_LED_Toggle(LED2);

	foat humidity = BSP_HSENSOR_ReadHumidity();

}
