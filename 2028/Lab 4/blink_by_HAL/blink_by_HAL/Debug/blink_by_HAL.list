
blink_by_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001b70  08001b70  00011b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ba8  08001ba8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001ba8  08001ba8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ba8  08001ba8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ba8  08001ba8  00011ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bac  08001bac  00011bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08001c18  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08001c18  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004fe3  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001005  00000000  00000000  000250be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004d0  00000000  00000000  000260c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000374  00000000  00000000  00026598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e0d  00000000  00000000  0002690c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005687  00000000  00000000  0004d719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef4f3  00000000  00000000  00052da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000018fc  00000000  00000000  00142294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00143b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001b58 	.word	0x08001b58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08001b58 	.word	0x08001b58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
extern void initialise_monitor_handles(void);	// for semi-hosting support (printf)

int start_time = 0;

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  HAL_Init();
 8000274:	f000 f9d5 	bl	8000622 <HAL_Init>
  MX_GPIO_Init();
 8000278:	f000 f81e 	bl	80002b8 <MX_GPIO_Init>
  initialise_monitor_handles(); // for semi-hosting support (printf)
 800027c:	f000 f8d2 	bl	8000424 <initialise_monitor_handles>

  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000284:	4809      	ldr	r0, [pc, #36]	; (80002ac <main+0x3c>)
 8000286:	f000 fd07 	bl	8000c98 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 800028a:	2032      	movs	r0, #50	; 0x32
 800028c:	f000 fa3a 	bl	8000704 <HAL_Delay>
	  start_time = HAL_GetTick();
 8000290:	f000 fa2c 	bl	80006ec <HAL_GetTick>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <main+0x40>)
 800029a:	601a      	str	r2, [r3, #0]
	  printf("%d\n", start_time);
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <main+0x40>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4619      	mov	r1, r3
 80002a2:	4804      	ldr	r0, [pc, #16]	; (80002b4 <main+0x44>)
 80002a4:	f000 fde6 	bl	8000e74 <iprintf>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80002a8:	e7ea      	b.n	8000280 <main+0x10>
 80002aa:	bf00      	nop
 80002ac:	48000400 	.word	0x48000400
 80002b0:	20000084 	.word	0x20000084
 80002b4:	08001b70 	.word	0x08001b70

080002b8 <MX_GPIO_Init>:
//	  }
  }
}

static void MX_GPIO_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_GPIO_Init+0x5c>)
 80002ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d0:	4a10      	ldr	r2, [pc, #64]	; (8000314 <MX_GPIO_Init+0x5c>)
 80002d2:	f043 0302 	orr.w	r3, r3, #2
 80002d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002d8:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_GPIO_Init+0x5c>)
 80002da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002dc:	f003 0302 	and.w	r3, r3, #2
 80002e0:	603b      	str	r3, [r7, #0]
 80002e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002ea:	480b      	ldr	r0, [pc, #44]	; (8000318 <MX_GPIO_Init+0x60>)
 80002ec:	f000 fcbc 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80002f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f6:	2301      	movs	r3, #1
 80002f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4619      	mov	r1, r3
 8000306:	4804      	ldr	r0, [pc, #16]	; (8000318 <MX_GPIO_Init+0x60>)
 8000308:	f000 fb04 	bl	8000914 <HAL_GPIO_Init>
}
 800030c:	bf00      	nop
 800030e:	3718      	adds	r7, #24
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40021000 	.word	0x40021000
 8000318:	48000400 	.word	0x48000400

0800031c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <HAL_MspInit+0x44>)
 8000324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000326:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <HAL_MspInit+0x44>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6613      	str	r3, [r2, #96]	; 0x60
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <HAL_MspInit+0x44>)
 8000330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <HAL_MspInit+0x44>)
 800033c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <HAL_MspInit+0x44>)
 8000340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000344:	6593      	str	r3, [r2, #88]	; 0x58
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <HAL_MspInit+0x44>)
 8000348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800034a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40021000 	.word	0x40021000

08000364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000376:	e7fe      	b.n	8000376 <HardFault_Handler+0x4>

08000378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800037c:	e7fe      	b.n	800037c <MemManage_Handler+0x4>

0800037e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000382:	e7fe      	b.n	8000382 <BusFault_Handler+0x4>

08000384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000388:	e7fe      	b.n	8000388 <UsageFault_Handler+0x4>

0800038a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b8:	f000 f986 	bl	80006c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}

080003c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80003c4:	2020      	movs	r0, #32
 80003c6:	f000 fc81 	bl	8000ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80003ca:	2040      	movs	r0, #64	; 0x40
 80003cc:	f000 fc7e 	bl	8000ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80003d0:	2080      	movs	r0, #128	; 0x80
 80003d2:	f000 fc7b 	bl	8000ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80003d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003da:	f000 fc77 	bl	8000ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
	...

080003e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80003e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ec:	480c      	ldr	r0, [pc, #48]	; (8000420 <EXTI15_10_IRQHandler+0x3c>)
 80003ee:	f000 fc53 	bl	8000c98 <HAL_GPIO_TogglePin>
	  //HAL_Delay(200);
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80003f2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80003f6:	f000 fc69 	bl	8000ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80003fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80003fe:	f000 fc65 	bl	8000ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000402:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000406:	f000 fc61 	bl	8000ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800040a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800040e:	f000 fc5d 	bl	8000ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000412:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000416:	f000 fc59 	bl	8000ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	48000400 	.word	0x48000400

08000424 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b086      	sub	sp, #24
 8000436:	af00      	add	r7, sp, #0
 8000438:	60f8      	str	r0, [r7, #12]
 800043a:	60b9      	str	r1, [r7, #8]
 800043c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	e00a      	b.n	800045a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000444:	f3af 8000 	nop.w
 8000448:	4601      	mov	r1, r0
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	1c5a      	adds	r2, r3, #1
 800044e:	60ba      	str	r2, [r7, #8]
 8000450:	b2ca      	uxtb	r2, r1
 8000452:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	3301      	adds	r3, #1
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	697a      	ldr	r2, [r7, #20]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	429a      	cmp	r2, r3
 8000460:	dbf0      	blt.n	8000444 <_read+0x12>
	}

return len;
 8000462:	687b      	ldr	r3, [r7, #4]
}
 8000464:	4618      	mov	r0, r3
 8000466:	3718      	adds	r7, #24
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	e009      	b.n	8000492 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	1c5a      	adds	r2, r3, #1
 8000482:	60ba      	str	r2, [r7, #8]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	3301      	adds	r3, #1
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	697a      	ldr	r2, [r7, #20]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	429a      	cmp	r2, r3
 8000498:	dbf1      	blt.n	800047e <_write+0x12>
	}
	return len;
 800049a:	687b      	ldr	r3, [r7, #4]
}
 800049c:	4618      	mov	r0, r3
 800049e:	3718      	adds	r7, #24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <_close>:

int _close(int file)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	return -1;
 80004ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004cc:	605a      	str	r2, [r3, #4]
	return 0;
 80004ce:	2300      	movs	r3, #0
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <_isatty>:

int _isatty(int file)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	return 1;
 80004e4:	2301      	movs	r3, #1
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b085      	sub	sp, #20
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	60f8      	str	r0, [r7, #12]
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
	return 0;
 80004fe:	2300      	movs	r3, #0
}
 8000500:	4618      	mov	r0, r3
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <_sbrk+0x50>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d102      	bne.n	8000522 <_sbrk+0x16>
		heap_end = &end;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <_sbrk+0x50>)
 800051e:	4a10      	ldr	r2, [pc, #64]	; (8000560 <_sbrk+0x54>)
 8000520:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <_sbrk+0x50>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <_sbrk+0x50>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4413      	add	r3, r2
 8000530:	466a      	mov	r2, sp
 8000532:	4293      	cmp	r3, r2
 8000534:	d907      	bls.n	8000546 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000536:	f000 fcb7 	bl	8000ea8 <__errno>
 800053a:	4603      	mov	r3, r0
 800053c:	220c      	movs	r2, #12
 800053e:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8000540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000544:	e006      	b.n	8000554 <_sbrk+0x48>
	}

	heap_end += incr;
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <_sbrk+0x50>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	4a03      	ldr	r2, [pc, #12]	; (800055c <_sbrk+0x50>)
 8000550:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8000552:	68fb      	ldr	r3, [r7, #12]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000088 	.word	0x20000088
 8000560:	200001e0 	.word	0x200001e0

08000564 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <SystemInit+0x64>)
 800056a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800056e:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <SystemInit+0x64>)
 8000570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <SystemInit+0x68>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a13      	ldr	r2, [pc, #76]	; (80005cc <SystemInit+0x68>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <SystemInit+0x68>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <SystemInit+0x68>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a0f      	ldr	r2, [pc, #60]	; (80005cc <SystemInit+0x68>)
 8000590:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000594:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000598:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <SystemInit+0x68>)
 800059c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <SystemInit+0x68>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a09      	ldr	r2, [pc, #36]	; (80005cc <SystemInit+0x68>)
 80005a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <SystemInit+0x68>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <SystemInit+0x64>)
 80005b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ba:	609a      	str	r2, [r3, #8]
#endif
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000ed00 	.word	0xe000ed00
 80005cc:	40021000 	.word	0x40021000

080005d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000608 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005d6:	e003      	b.n	80005e0 <LoopCopyDataInit>

080005d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005de:	3104      	adds	r1, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <LoopForever+0xa>)
	ldr	r3, =_edata
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005e8:	d3f6      	bcc.n	80005d8 <CopyDataInit>
	ldr	r2, =_sbss
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005ec:	e002      	b.n	80005f4 <LoopFillZerobss>

080005ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005f0:	f842 3b04 	str.w	r3, [r2], #4

080005f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <LoopForever+0x16>)
	cmp	r2, r3
 80005f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005f8:	d3f9      	bcc.n	80005ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005fa:	f7ff ffb3 	bl	8000564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005fe:	f000 fc59 	bl	8000eb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000602:	f7ff fe35 	bl	8000270 <main>

08000606 <LoopForever>:

LoopForever:
    b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000608:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800060c:	08001bb0 	.word	0x08001bb0
	ldr	r0, =_sdata
 8000610:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000614:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8000618:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 800061c:	200001dc 	.word	0x200001dc

08000620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_2_IRQHandler>

08000622 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 f93d 	bl	80008ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f80e 	bl	8000654 <HAL_InitTick>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d002      	beq.n	8000644 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	e001      	b.n	8000648 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000644:	f7ff fe6a 	bl	800031c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000648:	79fb      	ldrb	r3, [r7, #7]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000660:	4b16      	ldr	r3, [pc, #88]	; (80006bc <HAL_InitTick+0x68>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d022      	beq.n	80006ae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_InitTick+0x6c>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <HAL_InitTick+0x68>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000674:	fbb1 f3f3 	udiv	r3, r1, r3
 8000678:	fbb2 f3f3 	udiv	r3, r2, r3
 800067c:	4618      	mov	r0, r3
 800067e:	f000 f93c 	bl	80008fa <HAL_SYSTICK_Config>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d10f      	bne.n	80006a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b0f      	cmp	r3, #15
 800068c:	d809      	bhi.n	80006a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068e:	2200      	movs	r2, #0
 8000690:	6879      	ldr	r1, [r7, #4]
 8000692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000696:	f000 f914 	bl	80008c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <HAL_InitTick+0x70>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	e007      	b.n	80006b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	e004      	b.n	80006b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006a8:	2301      	movs	r3, #1
 80006aa:	73fb      	strb	r3, [r7, #15]
 80006ac:	e001      	b.n	80006b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000008 	.word	0x20000008
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000004 	.word	0x20000004

080006c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_IncTick+0x1c>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_IncTick+0x20>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4413      	add	r3, r2
 80006d6:	4a03      	ldr	r2, [pc, #12]	; (80006e4 <HAL_IncTick+0x1c>)
 80006d8:	6013      	str	r3, [r2, #0]
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	20000008 	.word	0x20000008

080006ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return uwTick;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <HAL_GetTick+0x14>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	2000008c 	.word	0x2000008c

08000704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800070c:	f7ff ffee 	bl	80006ec <HAL_GetTick>
 8000710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800071c:	d004      	beq.n	8000728 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_Delay+0x40>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	4413      	add	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000728:	bf00      	nop
 800072a:	f7ff ffdf 	bl	80006ec <HAL_GetTick>
 800072e:	4602      	mov	r2, r0
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	429a      	cmp	r2, r3
 8000738:	d8f7      	bhi.n	800072a <HAL_Delay+0x26>
  {
  }
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000008 	.word	0x20000008

08000748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000764:	4013      	ands	r3, r2
 8000766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077a:	4a04      	ldr	r2, [pc, #16]	; (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	60d3      	str	r3, [r2, #12]
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	f003 0307 	and.w	r3, r3, #7
}
 800079e:	4618      	mov	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	db0a      	blt.n	80007d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	490c      	ldr	r1, [pc, #48]	; (80007f8 <__NVIC_SetPriority+0x4c>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	0112      	lsls	r2, r2, #4
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d4:	e00a      	b.n	80007ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4908      	ldr	r1, [pc, #32]	; (80007fc <__NVIC_SetPriority+0x50>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	3b04      	subs	r3, #4
 80007e4:	0112      	lsls	r2, r2, #4
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	440b      	add	r3, r1
 80007ea:	761a      	strb	r2, [r3, #24]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f1c3 0307 	rsb	r3, r3, #7
 800081a:	2b04      	cmp	r3, #4
 800081c:	bf28      	it	cs
 800081e:	2304      	movcs	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3304      	adds	r3, #4
 8000826:	2b06      	cmp	r3, #6
 8000828:	d902      	bls.n	8000830 <NVIC_EncodePriority+0x30>
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3b03      	subs	r3, #3
 800082e:	e000      	b.n	8000832 <NVIC_EncodePriority+0x32>
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43da      	mvns	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	401a      	ands	r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000848:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43d9      	mvns	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	4313      	orrs	r3, r2
         );
}
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	; 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
	...

08000868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000878:	d301      	bcc.n	800087e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800087a:	2301      	movs	r3, #1
 800087c:	e00f      	b.n	800089e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <SysTick_Config+0x40>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000886:	210f      	movs	r1, #15
 8000888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800088c:	f7ff ff8e 	bl	80007ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <SysTick_Config+0x40>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <SysTick_Config+0x40>)
 8000898:	2207      	movs	r2, #7
 800089a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	e000e010 	.word	0xe000e010

080008ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ff47 	bl	8000748 <__NVIC_SetPriorityGrouping>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
 80008ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008d4:	f7ff ff5c 	bl	8000790 <__NVIC_GetPriorityGrouping>
 80008d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff ff8e 	bl	8000800 <NVIC_EncodePriority>
 80008e4:	4602      	mov	r2, r0
 80008e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff5d 	bl	80007ac <__NVIC_SetPriority>
}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ffb0 	bl	8000868 <SysTick_Config>
 8000908:	4603      	mov	r3, r0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000914:	b480      	push	{r7}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000922:	e17f      	b.n	8000c24 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	2101      	movs	r1, #1
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	fa01 f303 	lsl.w	r3, r1, r3
 8000930:	4013      	ands	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2b00      	cmp	r3, #0
 8000938:	f000 8171 	beq.w	8000c1e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d00b      	beq.n	800095c <HAL_GPIO_Init+0x48>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d007      	beq.n	800095c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000950:	2b11      	cmp	r3, #17
 8000952:	d003      	beq.n	800095c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2b12      	cmp	r3, #18
 800095a:	d130      	bne.n	80009be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	68da      	ldr	r2, [r3, #12]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000992:	2201      	movs	r2, #1
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4013      	ands	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	091b      	lsrs	r3, r3, #4
 80009a8:	f003 0201 	and.w	r2, r3, #1
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d118      	bne.n	80009fc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009d0:	2201      	movs	r2, #1
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4013      	ands	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	f003 0201 	and.w	r2, r3, #1
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	2203      	movs	r2, #3
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d003      	beq.n	8000a3c <HAL_GPIO_Init+0x128>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	2b12      	cmp	r3, #18
 8000a3a:	d123      	bne.n	8000a84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	08da      	lsrs	r2, r3, #3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3208      	adds	r2, #8
 8000a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	220f      	movs	r2, #15
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	691a      	ldr	r2, [r3, #16]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	08da      	lsrs	r2, r3, #3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3208      	adds	r2, #8
 8000a7e:	6939      	ldr	r1, [r7, #16]
 8000a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	2203      	movs	r2, #3
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0203 	and.w	r2, r3, #3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	f000 80ac 	beq.w	8000c1e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b5f      	ldr	r3, [pc, #380]	; (8000c44 <HAL_GPIO_Init+0x330>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aca:	4a5e      	ldr	r2, [pc, #376]	; (8000c44 <HAL_GPIO_Init+0x330>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad2:	4b5c      	ldr	r3, [pc, #368]	; (8000c44 <HAL_GPIO_Init+0x330>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ade:	4a5a      	ldr	r2, [pc, #360]	; (8000c48 <HAL_GPIO_Init+0x334>)
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	220f      	movs	r2, #15
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b08:	d025      	beq.n	8000b56 <HAL_GPIO_Init+0x242>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4f      	ldr	r2, [pc, #316]	; (8000c4c <HAL_GPIO_Init+0x338>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d01f      	beq.n	8000b52 <HAL_GPIO_Init+0x23e>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4e      	ldr	r2, [pc, #312]	; (8000c50 <HAL_GPIO_Init+0x33c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d019      	beq.n	8000b4e <HAL_GPIO_Init+0x23a>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4d      	ldr	r2, [pc, #308]	; (8000c54 <HAL_GPIO_Init+0x340>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0x236>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a4c      	ldr	r2, [pc, #304]	; (8000c58 <HAL_GPIO_Init+0x344>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d00d      	beq.n	8000b46 <HAL_GPIO_Init+0x232>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a4b      	ldr	r2, [pc, #300]	; (8000c5c <HAL_GPIO_Init+0x348>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d007      	beq.n	8000b42 <HAL_GPIO_Init+0x22e>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4a      	ldr	r2, [pc, #296]	; (8000c60 <HAL_GPIO_Init+0x34c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d101      	bne.n	8000b3e <HAL_GPIO_Init+0x22a>
 8000b3a:	2306      	movs	r3, #6
 8000b3c:	e00c      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b3e:	2307      	movs	r3, #7
 8000b40:	e00a      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b42:	2305      	movs	r3, #5
 8000b44:	e008      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b46:	2304      	movs	r3, #4
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e004      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <HAL_GPIO_Init+0x244>
 8000b56:	2300      	movs	r3, #0
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	f002 0203 	and.w	r2, r2, #3
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	4093      	lsls	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b68:	4937      	ldr	r1, [pc, #220]	; (8000c48 <HAL_GPIO_Init+0x334>)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	3302      	adds	r3, #2
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b76:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b9a:	4a32      	ldr	r2, [pc, #200]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ba0:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bc4:	4a27      	ldr	r2, [pc, #156]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bee:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c18:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f47f ae78 	bne.w	8000924 <HAL_GPIO_Init+0x10>
  }
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	371c      	adds	r7, #28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010000 	.word	0x40010000
 8000c4c:	48000400 	.word	0x48000400
 8000c50:	48000800 	.word	0x48000800
 8000c54:	48000c00 	.word	0x48000c00
 8000c58:	48001000 	.word	0x48001000
 8000c5c:	48001400 	.word	0x48001400
 8000c60:	48001800 	.word	0x48001800
 8000c64:	40010400 	.word	0x40010400

08000c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
 8000c74:	4613      	mov	r3, r2
 8000c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c78:	787b      	ldrb	r3, [r7, #1]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c7e:	887a      	ldrh	r2, [r7, #2]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c84:	e002      	b.n	8000c8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	695a      	ldr	r2, [r3, #20]
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	4013      	ands	r3, r2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d003      	beq.n	8000cb8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cb0:	887a      	ldrh	r2, [r7, #2]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb6:	e002      	b.n	8000cbe <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cb8:	887a      	ldrh	r2, [r7, #2]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	619a      	str	r2, [r3, #24]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd8:	695a      	ldr	r2, [r3, #20]
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f806 	bl	8000cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40010400 	.word	0x40010400

08000cfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <std>:
 8000d14:	2300      	movs	r3, #0
 8000d16:	b510      	push	{r4, lr}
 8000d18:	4604      	mov	r4, r0
 8000d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8000d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d22:	6083      	str	r3, [r0, #8]
 8000d24:	8181      	strh	r1, [r0, #12]
 8000d26:	6643      	str	r3, [r0, #100]	; 0x64
 8000d28:	81c2      	strh	r2, [r0, #14]
 8000d2a:	6183      	str	r3, [r0, #24]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	2208      	movs	r2, #8
 8000d30:	305c      	adds	r0, #92	; 0x5c
 8000d32:	f000 f8b1 	bl	8000e98 <memset>
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <std+0x38>)
 8000d38:	6263      	str	r3, [r4, #36]	; 0x24
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <std+0x3c>)
 8000d3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <std+0x40>)
 8000d40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <std+0x44>)
 8000d44:	6224      	str	r4, [r4, #32]
 8000d46:	6323      	str	r3, [r4, #48]	; 0x30
 8000d48:	bd10      	pop	{r4, pc}
 8000d4a:	bf00      	nop
 8000d4c:	0800175d 	.word	0x0800175d
 8000d50:	0800177f 	.word	0x0800177f
 8000d54:	080017b7 	.word	0x080017b7
 8000d58:	080017db 	.word	0x080017db

08000d5c <stdio_exit_handler>:
 8000d5c:	4a02      	ldr	r2, [pc, #8]	; (8000d68 <stdio_exit_handler+0xc>)
 8000d5e:	4903      	ldr	r1, [pc, #12]	; (8000d6c <stdio_exit_handler+0x10>)
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <stdio_exit_handler+0x14>)
 8000d62:	f000 b869 	b.w	8000e38 <_fwalk_sglue>
 8000d66:	bf00      	nop
 8000d68:	2000000c 	.word	0x2000000c
 8000d6c:	080016f5 	.word	0x080016f5
 8000d70:	20000018 	.word	0x20000018

08000d74 <cleanup_stdio>:
 8000d74:	6841      	ldr	r1, [r0, #4]
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <cleanup_stdio+0x34>)
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	b510      	push	{r4, lr}
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	d001      	beq.n	8000d84 <cleanup_stdio+0x10>
 8000d80:	f000 fcb8 	bl	80016f4 <_fflush_r>
 8000d84:	68a1      	ldr	r1, [r4, #8]
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <cleanup_stdio+0x38>)
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d002      	beq.n	8000d92 <cleanup_stdio+0x1e>
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f000 fcb1 	bl	80016f4 <_fflush_r>
 8000d92:	68e1      	ldr	r1, [r4, #12]
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <cleanup_stdio+0x3c>)
 8000d96:	4299      	cmp	r1, r3
 8000d98:	d004      	beq.n	8000da4 <cleanup_stdio+0x30>
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000da0:	f000 bca8 	b.w	80016f4 <_fflush_r>
 8000da4:	bd10      	pop	{r4, pc}
 8000da6:	bf00      	nop
 8000da8:	20000090 	.word	0x20000090
 8000dac:	200000f8 	.word	0x200000f8
 8000db0:	20000160 	.word	0x20000160

08000db4 <global_stdio_init.part.0>:
 8000db4:	b510      	push	{r4, lr}
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <global_stdio_init.part.0+0x30>)
 8000db8:	4c0b      	ldr	r4, [pc, #44]	; (8000de8 <global_stdio_init.part.0+0x34>)
 8000dba:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <global_stdio_init.part.0+0x38>)
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	f7ff ffa6 	bl	8000d14 <std>
 8000dc8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2109      	movs	r1, #9
 8000dd0:	f7ff ffa0 	bl	8000d14 <std>
 8000dd4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000dd8:	2202      	movs	r2, #2
 8000dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dde:	2112      	movs	r1, #18
 8000de0:	f7ff bf98 	b.w	8000d14 <std>
 8000de4:	200001c8 	.word	0x200001c8
 8000de8:	20000090 	.word	0x20000090
 8000dec:	08000d5d 	.word	0x08000d5d

08000df0 <__sfp_lock_acquire>:
 8000df0:	4801      	ldr	r0, [pc, #4]	; (8000df8 <__sfp_lock_acquire+0x8>)
 8000df2:	f000 b883 	b.w	8000efc <__retarget_lock_acquire_recursive>
 8000df6:	bf00      	nop
 8000df8:	200001cd 	.word	0x200001cd

08000dfc <__sfp_lock_release>:
 8000dfc:	4801      	ldr	r0, [pc, #4]	; (8000e04 <__sfp_lock_release+0x8>)
 8000dfe:	f000 b87e 	b.w	8000efe <__retarget_lock_release_recursive>
 8000e02:	bf00      	nop
 8000e04:	200001cd 	.word	0x200001cd

08000e08 <__sinit>:
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	f7ff fff0 	bl	8000df0 <__sfp_lock_acquire>
 8000e10:	6a23      	ldr	r3, [r4, #32]
 8000e12:	b11b      	cbz	r3, 8000e1c <__sinit+0x14>
 8000e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e18:	f7ff bff0 	b.w	8000dfc <__sfp_lock_release>
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__sinit+0x28>)
 8000e1e:	6223      	str	r3, [r4, #32]
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__sinit+0x2c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f5      	bne.n	8000e14 <__sinit+0xc>
 8000e28:	f7ff ffc4 	bl	8000db4 <global_stdio_init.part.0>
 8000e2c:	e7f2      	b.n	8000e14 <__sinit+0xc>
 8000e2e:	bf00      	nop
 8000e30:	08000d75 	.word	0x08000d75
 8000e34:	200001c8 	.word	0x200001c8

08000e38 <_fwalk_sglue>:
 8000e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e3c:	4607      	mov	r7, r0
 8000e3e:	4688      	mov	r8, r1
 8000e40:	4614      	mov	r4, r2
 8000e42:	2600      	movs	r6, #0
 8000e44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e48:	f1b9 0901 	subs.w	r9, r9, #1
 8000e4c:	d505      	bpl.n	8000e5a <_fwalk_sglue+0x22>
 8000e4e:	6824      	ldr	r4, [r4, #0]
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d1f7      	bne.n	8000e44 <_fwalk_sglue+0xc>
 8000e54:	4630      	mov	r0, r6
 8000e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e5a:	89ab      	ldrh	r3, [r5, #12]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d907      	bls.n	8000e70 <_fwalk_sglue+0x38>
 8000e60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e64:	3301      	adds	r3, #1
 8000e66:	d003      	beq.n	8000e70 <_fwalk_sglue+0x38>
 8000e68:	4629      	mov	r1, r5
 8000e6a:	4638      	mov	r0, r7
 8000e6c:	47c0      	blx	r8
 8000e6e:	4306      	orrs	r6, r0
 8000e70:	3568      	adds	r5, #104	; 0x68
 8000e72:	e7e9      	b.n	8000e48 <_fwalk_sglue+0x10>

08000e74 <iprintf>:
 8000e74:	b40f      	push	{r0, r1, r2, r3}
 8000e76:	b507      	push	{r0, r1, r2, lr}
 8000e78:	4906      	ldr	r1, [pc, #24]	; (8000e94 <iprintf+0x20>)
 8000e7a:	ab04      	add	r3, sp, #16
 8000e7c:	6808      	ldr	r0, [r1, #0]
 8000e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e82:	6881      	ldr	r1, [r0, #8]
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	f000 f865 	bl	8000f54 <_vfiprintf_r>
 8000e8a:	b003      	add	sp, #12
 8000e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e90:	b004      	add	sp, #16
 8000e92:	4770      	bx	lr
 8000e94:	20000064 	.word	0x20000064

08000e98 <memset>:
 8000e98:	4402      	add	r2, r0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d100      	bne.n	8000ea2 <memset+0xa>
 8000ea0:	4770      	bx	lr
 8000ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ea6:	e7f9      	b.n	8000e9c <memset+0x4>

08000ea8 <__errno>:
 8000ea8:	4b01      	ldr	r3, [pc, #4]	; (8000eb0 <__errno+0x8>)
 8000eaa:	6818      	ldr	r0, [r3, #0]
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000064 	.word	0x20000064

08000eb4 <__libc_init_array>:
 8000eb4:	b570      	push	{r4, r5, r6, lr}
 8000eb6:	4d0d      	ldr	r5, [pc, #52]	; (8000eec <__libc_init_array+0x38>)
 8000eb8:	4c0d      	ldr	r4, [pc, #52]	; (8000ef0 <__libc_init_array+0x3c>)
 8000eba:	1b64      	subs	r4, r4, r5
 8000ebc:	10a4      	asrs	r4, r4, #2
 8000ebe:	2600      	movs	r6, #0
 8000ec0:	42a6      	cmp	r6, r4
 8000ec2:	d109      	bne.n	8000ed8 <__libc_init_array+0x24>
 8000ec4:	4d0b      	ldr	r5, [pc, #44]	; (8000ef4 <__libc_init_array+0x40>)
 8000ec6:	4c0c      	ldr	r4, [pc, #48]	; (8000ef8 <__libc_init_array+0x44>)
 8000ec8:	f000 fe46 	bl	8001b58 <_init>
 8000ecc:	1b64      	subs	r4, r4, r5
 8000ece:	10a4      	asrs	r4, r4, #2
 8000ed0:	2600      	movs	r6, #0
 8000ed2:	42a6      	cmp	r6, r4
 8000ed4:	d105      	bne.n	8000ee2 <__libc_init_array+0x2e>
 8000ed6:	bd70      	pop	{r4, r5, r6, pc}
 8000ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000edc:	4798      	blx	r3
 8000ede:	3601      	adds	r6, #1
 8000ee0:	e7ee      	b.n	8000ec0 <__libc_init_array+0xc>
 8000ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ee6:	4798      	blx	r3
 8000ee8:	3601      	adds	r6, #1
 8000eea:	e7f2      	b.n	8000ed2 <__libc_init_array+0x1e>
 8000eec:	08001ba8 	.word	0x08001ba8
 8000ef0:	08001ba8 	.word	0x08001ba8
 8000ef4:	08001ba8 	.word	0x08001ba8
 8000ef8:	08001bac 	.word	0x08001bac

08000efc <__retarget_lock_acquire_recursive>:
 8000efc:	4770      	bx	lr

08000efe <__retarget_lock_release_recursive>:
 8000efe:	4770      	bx	lr

08000f00 <__sfputc_r>:
 8000f00:	6893      	ldr	r3, [r2, #8]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	b410      	push	{r4}
 8000f08:	6093      	str	r3, [r2, #8]
 8000f0a:	da08      	bge.n	8000f1e <__sfputc_r+0x1e>
 8000f0c:	6994      	ldr	r4, [r2, #24]
 8000f0e:	42a3      	cmp	r3, r4
 8000f10:	db01      	blt.n	8000f16 <__sfputc_r+0x16>
 8000f12:	290a      	cmp	r1, #10
 8000f14:	d103      	bne.n	8000f1e <__sfputc_r+0x1e>
 8000f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f1a:	f000 bc62 	b.w	80017e2 <__swbuf_r>
 8000f1e:	6813      	ldr	r3, [r2, #0]
 8000f20:	1c58      	adds	r0, r3, #1
 8000f22:	6010      	str	r0, [r2, #0]
 8000f24:	7019      	strb	r1, [r3, #0]
 8000f26:	4608      	mov	r0, r1
 8000f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <__sfputs_r>:
 8000f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f30:	4606      	mov	r6, r0
 8000f32:	460f      	mov	r7, r1
 8000f34:	4614      	mov	r4, r2
 8000f36:	18d5      	adds	r5, r2, r3
 8000f38:	42ac      	cmp	r4, r5
 8000f3a:	d101      	bne.n	8000f40 <__sfputs_r+0x12>
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	e007      	b.n	8000f50 <__sfputs_r+0x22>
 8000f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f44:	463a      	mov	r2, r7
 8000f46:	4630      	mov	r0, r6
 8000f48:	f7ff ffda 	bl	8000f00 <__sfputc_r>
 8000f4c:	1c43      	adds	r3, r0, #1
 8000f4e:	d1f3      	bne.n	8000f38 <__sfputs_r+0xa>
 8000f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f54 <_vfiprintf_r>:
 8000f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f58:	460d      	mov	r5, r1
 8000f5a:	b09d      	sub	sp, #116	; 0x74
 8000f5c:	4614      	mov	r4, r2
 8000f5e:	4698      	mov	r8, r3
 8000f60:	4606      	mov	r6, r0
 8000f62:	b118      	cbz	r0, 8000f6c <_vfiprintf_r+0x18>
 8000f64:	6a03      	ldr	r3, [r0, #32]
 8000f66:	b90b      	cbnz	r3, 8000f6c <_vfiprintf_r+0x18>
 8000f68:	f7ff ff4e 	bl	8000e08 <__sinit>
 8000f6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f6e:	07d9      	lsls	r1, r3, #31
 8000f70:	d405      	bmi.n	8000f7e <_vfiprintf_r+0x2a>
 8000f72:	89ab      	ldrh	r3, [r5, #12]
 8000f74:	059a      	lsls	r2, r3, #22
 8000f76:	d402      	bmi.n	8000f7e <_vfiprintf_r+0x2a>
 8000f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f7a:	f7ff ffbf 	bl	8000efc <__retarget_lock_acquire_recursive>
 8000f7e:	89ab      	ldrh	r3, [r5, #12]
 8000f80:	071b      	lsls	r3, r3, #28
 8000f82:	d501      	bpl.n	8000f88 <_vfiprintf_r+0x34>
 8000f84:	692b      	ldr	r3, [r5, #16]
 8000f86:	b99b      	cbnz	r3, 8000fb0 <_vfiprintf_r+0x5c>
 8000f88:	4629      	mov	r1, r5
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f000 fc66 	bl	800185c <__swsetup_r>
 8000f90:	b170      	cbz	r0, 8000fb0 <_vfiprintf_r+0x5c>
 8000f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f94:	07dc      	lsls	r4, r3, #31
 8000f96:	d504      	bpl.n	8000fa2 <_vfiprintf_r+0x4e>
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f9c:	b01d      	add	sp, #116	; 0x74
 8000f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fa2:	89ab      	ldrh	r3, [r5, #12]
 8000fa4:	0598      	lsls	r0, r3, #22
 8000fa6:	d4f7      	bmi.n	8000f98 <_vfiprintf_r+0x44>
 8000fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000faa:	f7ff ffa8 	bl	8000efe <__retarget_lock_release_recursive>
 8000fae:	e7f3      	b.n	8000f98 <_vfiprintf_r+0x44>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fbe:	2330      	movs	r3, #48	; 0x30
 8000fc0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001174 <_vfiprintf_r+0x220>
 8000fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000fc8:	f04f 0901 	mov.w	r9, #1
 8000fcc:	4623      	mov	r3, r4
 8000fce:	469a      	mov	sl, r3
 8000fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fd4:	b10a      	cbz	r2, 8000fda <_vfiprintf_r+0x86>
 8000fd6:	2a25      	cmp	r2, #37	; 0x25
 8000fd8:	d1f9      	bne.n	8000fce <_vfiprintf_r+0x7a>
 8000fda:	ebba 0b04 	subs.w	fp, sl, r4
 8000fde:	d00b      	beq.n	8000ff8 <_vfiprintf_r+0xa4>
 8000fe0:	465b      	mov	r3, fp
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4630      	mov	r0, r6
 8000fe8:	f7ff ffa1 	bl	8000f2e <__sfputs_r>
 8000fec:	3001      	adds	r0, #1
 8000fee:	f000 80a9 	beq.w	8001144 <_vfiprintf_r+0x1f0>
 8000ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ff4:	445a      	add	r2, fp
 8000ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8000ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80a1 	beq.w	8001144 <_vfiprintf_r+0x1f0>
 8001002:	2300      	movs	r3, #0
 8001004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800100c:	f10a 0a01 	add.w	sl, sl, #1
 8001010:	9304      	str	r3, [sp, #16]
 8001012:	9307      	str	r3, [sp, #28]
 8001014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001018:	931a      	str	r3, [sp, #104]	; 0x68
 800101a:	4654      	mov	r4, sl
 800101c:	2205      	movs	r2, #5
 800101e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001022:	4854      	ldr	r0, [pc, #336]	; (8001174 <_vfiprintf_r+0x220>)
 8001024:	f7ff f8d4 	bl	80001d0 <memchr>
 8001028:	9a04      	ldr	r2, [sp, #16]
 800102a:	b9d8      	cbnz	r0, 8001064 <_vfiprintf_r+0x110>
 800102c:	06d1      	lsls	r1, r2, #27
 800102e:	bf44      	itt	mi
 8001030:	2320      	movmi	r3, #32
 8001032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001036:	0713      	lsls	r3, r2, #28
 8001038:	bf44      	itt	mi
 800103a:	232b      	movmi	r3, #43	; 0x2b
 800103c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001040:	f89a 3000 	ldrb.w	r3, [sl]
 8001044:	2b2a      	cmp	r3, #42	; 0x2a
 8001046:	d015      	beq.n	8001074 <_vfiprintf_r+0x120>
 8001048:	9a07      	ldr	r2, [sp, #28]
 800104a:	4654      	mov	r4, sl
 800104c:	2000      	movs	r0, #0
 800104e:	f04f 0c0a 	mov.w	ip, #10
 8001052:	4621      	mov	r1, r4
 8001054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001058:	3b30      	subs	r3, #48	; 0x30
 800105a:	2b09      	cmp	r3, #9
 800105c:	d94d      	bls.n	80010fa <_vfiprintf_r+0x1a6>
 800105e:	b1b0      	cbz	r0, 800108e <_vfiprintf_r+0x13a>
 8001060:	9207      	str	r2, [sp, #28]
 8001062:	e014      	b.n	800108e <_vfiprintf_r+0x13a>
 8001064:	eba0 0308 	sub.w	r3, r0, r8
 8001068:	fa09 f303 	lsl.w	r3, r9, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	9304      	str	r3, [sp, #16]
 8001070:	46a2      	mov	sl, r4
 8001072:	e7d2      	b.n	800101a <_vfiprintf_r+0xc6>
 8001074:	9b03      	ldr	r3, [sp, #12]
 8001076:	1d19      	adds	r1, r3, #4
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	9103      	str	r1, [sp, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	bfbb      	ittet	lt
 8001080:	425b      	neglt	r3, r3
 8001082:	f042 0202 	orrlt.w	r2, r2, #2
 8001086:	9307      	strge	r3, [sp, #28]
 8001088:	9307      	strlt	r3, [sp, #28]
 800108a:	bfb8      	it	lt
 800108c:	9204      	strlt	r2, [sp, #16]
 800108e:	7823      	ldrb	r3, [r4, #0]
 8001090:	2b2e      	cmp	r3, #46	; 0x2e
 8001092:	d10c      	bne.n	80010ae <_vfiprintf_r+0x15a>
 8001094:	7863      	ldrb	r3, [r4, #1]
 8001096:	2b2a      	cmp	r3, #42	; 0x2a
 8001098:	d134      	bne.n	8001104 <_vfiprintf_r+0x1b0>
 800109a:	9b03      	ldr	r3, [sp, #12]
 800109c:	1d1a      	adds	r2, r3, #4
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	9203      	str	r2, [sp, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bfb8      	it	lt
 80010a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80010aa:	3402      	adds	r4, #2
 80010ac:	9305      	str	r3, [sp, #20]
 80010ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001184 <_vfiprintf_r+0x230>
 80010b2:	7821      	ldrb	r1, [r4, #0]
 80010b4:	2203      	movs	r2, #3
 80010b6:	4650      	mov	r0, sl
 80010b8:	f7ff f88a 	bl	80001d0 <memchr>
 80010bc:	b138      	cbz	r0, 80010ce <_vfiprintf_r+0x17a>
 80010be:	9b04      	ldr	r3, [sp, #16]
 80010c0:	eba0 000a 	sub.w	r0, r0, sl
 80010c4:	2240      	movs	r2, #64	; 0x40
 80010c6:	4082      	lsls	r2, r0
 80010c8:	4313      	orrs	r3, r2
 80010ca:	3401      	adds	r4, #1
 80010cc:	9304      	str	r3, [sp, #16]
 80010ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010d2:	4829      	ldr	r0, [pc, #164]	; (8001178 <_vfiprintf_r+0x224>)
 80010d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010d8:	2206      	movs	r2, #6
 80010da:	f7ff f879 	bl	80001d0 <memchr>
 80010de:	2800      	cmp	r0, #0
 80010e0:	d03f      	beq.n	8001162 <_vfiprintf_r+0x20e>
 80010e2:	4b26      	ldr	r3, [pc, #152]	; (800117c <_vfiprintf_r+0x228>)
 80010e4:	bb1b      	cbnz	r3, 800112e <_vfiprintf_r+0x1da>
 80010e6:	9b03      	ldr	r3, [sp, #12]
 80010e8:	3307      	adds	r3, #7
 80010ea:	f023 0307 	bic.w	r3, r3, #7
 80010ee:	3308      	adds	r3, #8
 80010f0:	9303      	str	r3, [sp, #12]
 80010f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010f4:	443b      	add	r3, r7
 80010f6:	9309      	str	r3, [sp, #36]	; 0x24
 80010f8:	e768      	b.n	8000fcc <_vfiprintf_r+0x78>
 80010fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80010fe:	460c      	mov	r4, r1
 8001100:	2001      	movs	r0, #1
 8001102:	e7a6      	b.n	8001052 <_vfiprintf_r+0xfe>
 8001104:	2300      	movs	r3, #0
 8001106:	3401      	adds	r4, #1
 8001108:	9305      	str	r3, [sp, #20]
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 0c0a 	mov.w	ip, #10
 8001110:	4620      	mov	r0, r4
 8001112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001116:	3a30      	subs	r2, #48	; 0x30
 8001118:	2a09      	cmp	r2, #9
 800111a:	d903      	bls.n	8001124 <_vfiprintf_r+0x1d0>
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0c6      	beq.n	80010ae <_vfiprintf_r+0x15a>
 8001120:	9105      	str	r1, [sp, #20]
 8001122:	e7c4      	b.n	80010ae <_vfiprintf_r+0x15a>
 8001124:	fb0c 2101 	mla	r1, ip, r1, r2
 8001128:	4604      	mov	r4, r0
 800112a:	2301      	movs	r3, #1
 800112c:	e7f0      	b.n	8001110 <_vfiprintf_r+0x1bc>
 800112e:	ab03      	add	r3, sp, #12
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	462a      	mov	r2, r5
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <_vfiprintf_r+0x22c>)
 8001136:	a904      	add	r1, sp, #16
 8001138:	4630      	mov	r0, r6
 800113a:	f3af 8000 	nop.w
 800113e:	4607      	mov	r7, r0
 8001140:	1c78      	adds	r0, r7, #1
 8001142:	d1d6      	bne.n	80010f2 <_vfiprintf_r+0x19e>
 8001144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001146:	07d9      	lsls	r1, r3, #31
 8001148:	d405      	bmi.n	8001156 <_vfiprintf_r+0x202>
 800114a:	89ab      	ldrh	r3, [r5, #12]
 800114c:	059a      	lsls	r2, r3, #22
 800114e:	d402      	bmi.n	8001156 <_vfiprintf_r+0x202>
 8001150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001152:	f7ff fed4 	bl	8000efe <__retarget_lock_release_recursive>
 8001156:	89ab      	ldrh	r3, [r5, #12]
 8001158:	065b      	lsls	r3, r3, #25
 800115a:	f53f af1d 	bmi.w	8000f98 <_vfiprintf_r+0x44>
 800115e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001160:	e71c      	b.n	8000f9c <_vfiprintf_r+0x48>
 8001162:	ab03      	add	r3, sp, #12
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	462a      	mov	r2, r5
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <_vfiprintf_r+0x22c>)
 800116a:	a904      	add	r1, sp, #16
 800116c:	4630      	mov	r0, r6
 800116e:	f000 f919 	bl	80013a4 <_printf_i>
 8001172:	e7e4      	b.n	800113e <_vfiprintf_r+0x1ea>
 8001174:	08001b74 	.word	0x08001b74
 8001178:	08001b7e 	.word	0x08001b7e
 800117c:	00000000 	.word	0x00000000
 8001180:	08000f2f 	.word	0x08000f2f
 8001184:	08001b7a 	.word	0x08001b7a

08001188 <sbrk_aligned>:
 8001188:	b570      	push	{r4, r5, r6, lr}
 800118a:	4e0e      	ldr	r6, [pc, #56]	; (80011c4 <sbrk_aligned+0x3c>)
 800118c:	460c      	mov	r4, r1
 800118e:	6831      	ldr	r1, [r6, #0]
 8001190:	4605      	mov	r5, r0
 8001192:	b911      	cbnz	r1, 800119a <sbrk_aligned+0x12>
 8001194:	f000 fc72 	bl	8001a7c <_sbrk_r>
 8001198:	6030      	str	r0, [r6, #0]
 800119a:	4621      	mov	r1, r4
 800119c:	4628      	mov	r0, r5
 800119e:	f000 fc6d 	bl	8001a7c <_sbrk_r>
 80011a2:	1c43      	adds	r3, r0, #1
 80011a4:	d00a      	beq.n	80011bc <sbrk_aligned+0x34>
 80011a6:	1cc4      	adds	r4, r0, #3
 80011a8:	f024 0403 	bic.w	r4, r4, #3
 80011ac:	42a0      	cmp	r0, r4
 80011ae:	d007      	beq.n	80011c0 <sbrk_aligned+0x38>
 80011b0:	1a21      	subs	r1, r4, r0
 80011b2:	4628      	mov	r0, r5
 80011b4:	f000 fc62 	bl	8001a7c <_sbrk_r>
 80011b8:	3001      	adds	r0, #1
 80011ba:	d101      	bne.n	80011c0 <sbrk_aligned+0x38>
 80011bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80011c0:	4620      	mov	r0, r4
 80011c2:	bd70      	pop	{r4, r5, r6, pc}
 80011c4:	200001d4 	.word	0x200001d4

080011c8 <_malloc_r>:
 80011c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011cc:	1ccd      	adds	r5, r1, #3
 80011ce:	f025 0503 	bic.w	r5, r5, #3
 80011d2:	3508      	adds	r5, #8
 80011d4:	2d0c      	cmp	r5, #12
 80011d6:	bf38      	it	cc
 80011d8:	250c      	movcc	r5, #12
 80011da:	2d00      	cmp	r5, #0
 80011dc:	4607      	mov	r7, r0
 80011de:	db01      	blt.n	80011e4 <_malloc_r+0x1c>
 80011e0:	42a9      	cmp	r1, r5
 80011e2:	d905      	bls.n	80011f0 <_malloc_r+0x28>
 80011e4:	230c      	movs	r3, #12
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	2600      	movs	r6, #0
 80011ea:	4630      	mov	r0, r6
 80011ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80012c4 <_malloc_r+0xfc>
 80011f4:	f000 faa6 	bl	8001744 <__malloc_lock>
 80011f8:	f8d8 3000 	ldr.w	r3, [r8]
 80011fc:	461c      	mov	r4, r3
 80011fe:	bb5c      	cbnz	r4, 8001258 <_malloc_r+0x90>
 8001200:	4629      	mov	r1, r5
 8001202:	4638      	mov	r0, r7
 8001204:	f7ff ffc0 	bl	8001188 <sbrk_aligned>
 8001208:	1c43      	adds	r3, r0, #1
 800120a:	4604      	mov	r4, r0
 800120c:	d155      	bne.n	80012ba <_malloc_r+0xf2>
 800120e:	f8d8 4000 	ldr.w	r4, [r8]
 8001212:	4626      	mov	r6, r4
 8001214:	2e00      	cmp	r6, #0
 8001216:	d145      	bne.n	80012a4 <_malloc_r+0xdc>
 8001218:	2c00      	cmp	r4, #0
 800121a:	d048      	beq.n	80012ae <_malloc_r+0xe6>
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	4631      	mov	r1, r6
 8001220:	4638      	mov	r0, r7
 8001222:	eb04 0903 	add.w	r9, r4, r3
 8001226:	f000 fc29 	bl	8001a7c <_sbrk_r>
 800122a:	4581      	cmp	r9, r0
 800122c:	d13f      	bne.n	80012ae <_malloc_r+0xe6>
 800122e:	6821      	ldr	r1, [r4, #0]
 8001230:	1a6d      	subs	r5, r5, r1
 8001232:	4629      	mov	r1, r5
 8001234:	4638      	mov	r0, r7
 8001236:	f7ff ffa7 	bl	8001188 <sbrk_aligned>
 800123a:	3001      	adds	r0, #1
 800123c:	d037      	beq.n	80012ae <_malloc_r+0xe6>
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	442b      	add	r3, r5
 8001242:	6023      	str	r3, [r4, #0]
 8001244:	f8d8 3000 	ldr.w	r3, [r8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d038      	beq.n	80012be <_malloc_r+0xf6>
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	42a2      	cmp	r2, r4
 8001250:	d12b      	bne.n	80012aa <_malloc_r+0xe2>
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	e00f      	b.n	8001278 <_malloc_r+0xb0>
 8001258:	6822      	ldr	r2, [r4, #0]
 800125a:	1b52      	subs	r2, r2, r5
 800125c:	d41f      	bmi.n	800129e <_malloc_r+0xd6>
 800125e:	2a0b      	cmp	r2, #11
 8001260:	d917      	bls.n	8001292 <_malloc_r+0xca>
 8001262:	1961      	adds	r1, r4, r5
 8001264:	42a3      	cmp	r3, r4
 8001266:	6025      	str	r5, [r4, #0]
 8001268:	bf18      	it	ne
 800126a:	6059      	strne	r1, [r3, #4]
 800126c:	6863      	ldr	r3, [r4, #4]
 800126e:	bf08      	it	eq
 8001270:	f8c8 1000 	streq.w	r1, [r8]
 8001274:	5162      	str	r2, [r4, r5]
 8001276:	604b      	str	r3, [r1, #4]
 8001278:	4638      	mov	r0, r7
 800127a:	f104 060b 	add.w	r6, r4, #11
 800127e:	f000 fa67 	bl	8001750 <__malloc_unlock>
 8001282:	f026 0607 	bic.w	r6, r6, #7
 8001286:	1d23      	adds	r3, r4, #4
 8001288:	1af2      	subs	r2, r6, r3
 800128a:	d0ae      	beq.n	80011ea <_malloc_r+0x22>
 800128c:	1b9b      	subs	r3, r3, r6
 800128e:	50a3      	str	r3, [r4, r2]
 8001290:	e7ab      	b.n	80011ea <_malloc_r+0x22>
 8001292:	42a3      	cmp	r3, r4
 8001294:	6862      	ldr	r2, [r4, #4]
 8001296:	d1dd      	bne.n	8001254 <_malloc_r+0x8c>
 8001298:	f8c8 2000 	str.w	r2, [r8]
 800129c:	e7ec      	b.n	8001278 <_malloc_r+0xb0>
 800129e:	4623      	mov	r3, r4
 80012a0:	6864      	ldr	r4, [r4, #4]
 80012a2:	e7ac      	b.n	80011fe <_malloc_r+0x36>
 80012a4:	4634      	mov	r4, r6
 80012a6:	6876      	ldr	r6, [r6, #4]
 80012a8:	e7b4      	b.n	8001214 <_malloc_r+0x4c>
 80012aa:	4613      	mov	r3, r2
 80012ac:	e7cc      	b.n	8001248 <_malloc_r+0x80>
 80012ae:	230c      	movs	r3, #12
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	4638      	mov	r0, r7
 80012b4:	f000 fa4c 	bl	8001750 <__malloc_unlock>
 80012b8:	e797      	b.n	80011ea <_malloc_r+0x22>
 80012ba:	6025      	str	r5, [r4, #0]
 80012bc:	e7dc      	b.n	8001278 <_malloc_r+0xb0>
 80012be:	605b      	str	r3, [r3, #4]
 80012c0:	deff      	udf	#255	; 0xff
 80012c2:	bf00      	nop
 80012c4:	200001d0 	.word	0x200001d0

080012c8 <_printf_common>:
 80012c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012cc:	4616      	mov	r6, r2
 80012ce:	4699      	mov	r9, r3
 80012d0:	688a      	ldr	r2, [r1, #8]
 80012d2:	690b      	ldr	r3, [r1, #16]
 80012d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012d8:	4293      	cmp	r3, r2
 80012da:	bfb8      	it	lt
 80012dc:	4613      	movlt	r3, r2
 80012de:	6033      	str	r3, [r6, #0]
 80012e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012e4:	4607      	mov	r7, r0
 80012e6:	460c      	mov	r4, r1
 80012e8:	b10a      	cbz	r2, 80012ee <_printf_common+0x26>
 80012ea:	3301      	adds	r3, #1
 80012ec:	6033      	str	r3, [r6, #0]
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	0699      	lsls	r1, r3, #26
 80012f2:	bf42      	ittt	mi
 80012f4:	6833      	ldrmi	r3, [r6, #0]
 80012f6:	3302      	addmi	r3, #2
 80012f8:	6033      	strmi	r3, [r6, #0]
 80012fa:	6825      	ldr	r5, [r4, #0]
 80012fc:	f015 0506 	ands.w	r5, r5, #6
 8001300:	d106      	bne.n	8001310 <_printf_common+0x48>
 8001302:	f104 0a19 	add.w	sl, r4, #25
 8001306:	68e3      	ldr	r3, [r4, #12]
 8001308:	6832      	ldr	r2, [r6, #0]
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	42ab      	cmp	r3, r5
 800130e:	dc26      	bgt.n	800135e <_printf_common+0x96>
 8001310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001314:	1e13      	subs	r3, r2, #0
 8001316:	6822      	ldr	r2, [r4, #0]
 8001318:	bf18      	it	ne
 800131a:	2301      	movne	r3, #1
 800131c:	0692      	lsls	r2, r2, #26
 800131e:	d42b      	bmi.n	8001378 <_printf_common+0xb0>
 8001320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001324:	4649      	mov	r1, r9
 8001326:	4638      	mov	r0, r7
 8001328:	47c0      	blx	r8
 800132a:	3001      	adds	r0, #1
 800132c:	d01e      	beq.n	800136c <_printf_common+0xa4>
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	6922      	ldr	r2, [r4, #16]
 8001332:	f003 0306 	and.w	r3, r3, #6
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf02      	ittt	eq
 800133a:	68e5      	ldreq	r5, [r4, #12]
 800133c:	6833      	ldreq	r3, [r6, #0]
 800133e:	1aed      	subeq	r5, r5, r3
 8001340:	68a3      	ldr	r3, [r4, #8]
 8001342:	bf0c      	ite	eq
 8001344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001348:	2500      	movne	r5, #0
 800134a:	4293      	cmp	r3, r2
 800134c:	bfc4      	itt	gt
 800134e:	1a9b      	subgt	r3, r3, r2
 8001350:	18ed      	addgt	r5, r5, r3
 8001352:	2600      	movs	r6, #0
 8001354:	341a      	adds	r4, #26
 8001356:	42b5      	cmp	r5, r6
 8001358:	d11a      	bne.n	8001390 <_printf_common+0xc8>
 800135a:	2000      	movs	r0, #0
 800135c:	e008      	b.n	8001370 <_printf_common+0xa8>
 800135e:	2301      	movs	r3, #1
 8001360:	4652      	mov	r2, sl
 8001362:	4649      	mov	r1, r9
 8001364:	4638      	mov	r0, r7
 8001366:	47c0      	blx	r8
 8001368:	3001      	adds	r0, #1
 800136a:	d103      	bne.n	8001374 <_printf_common+0xac>
 800136c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001374:	3501      	adds	r5, #1
 8001376:	e7c6      	b.n	8001306 <_printf_common+0x3e>
 8001378:	18e1      	adds	r1, r4, r3
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	2030      	movs	r0, #48	; 0x30
 800137e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001382:	4422      	add	r2, r4
 8001384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800138c:	3302      	adds	r3, #2
 800138e:	e7c7      	b.n	8001320 <_printf_common+0x58>
 8001390:	2301      	movs	r3, #1
 8001392:	4622      	mov	r2, r4
 8001394:	4649      	mov	r1, r9
 8001396:	4638      	mov	r0, r7
 8001398:	47c0      	blx	r8
 800139a:	3001      	adds	r0, #1
 800139c:	d0e6      	beq.n	800136c <_printf_common+0xa4>
 800139e:	3601      	adds	r6, #1
 80013a0:	e7d9      	b.n	8001356 <_printf_common+0x8e>
	...

080013a4 <_printf_i>:
 80013a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013a8:	7e0f      	ldrb	r7, [r1, #24]
 80013aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80013ac:	2f78      	cmp	r7, #120	; 0x78
 80013ae:	4691      	mov	r9, r2
 80013b0:	4680      	mov	r8, r0
 80013b2:	460c      	mov	r4, r1
 80013b4:	469a      	mov	sl, r3
 80013b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80013ba:	d807      	bhi.n	80013cc <_printf_i+0x28>
 80013bc:	2f62      	cmp	r7, #98	; 0x62
 80013be:	d80a      	bhi.n	80013d6 <_printf_i+0x32>
 80013c0:	2f00      	cmp	r7, #0
 80013c2:	f000 80d4 	beq.w	800156e <_printf_i+0x1ca>
 80013c6:	2f58      	cmp	r7, #88	; 0x58
 80013c8:	f000 80c0 	beq.w	800154c <_printf_i+0x1a8>
 80013cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80013d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80013d4:	e03a      	b.n	800144c <_printf_i+0xa8>
 80013d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013da:	2b15      	cmp	r3, #21
 80013dc:	d8f6      	bhi.n	80013cc <_printf_i+0x28>
 80013de:	a101      	add	r1, pc, #4	; (adr r1, 80013e4 <_printf_i+0x40>)
 80013e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80013e4:	0800143d 	.word	0x0800143d
 80013e8:	08001451 	.word	0x08001451
 80013ec:	080013cd 	.word	0x080013cd
 80013f0:	080013cd 	.word	0x080013cd
 80013f4:	080013cd 	.word	0x080013cd
 80013f8:	080013cd 	.word	0x080013cd
 80013fc:	08001451 	.word	0x08001451
 8001400:	080013cd 	.word	0x080013cd
 8001404:	080013cd 	.word	0x080013cd
 8001408:	080013cd 	.word	0x080013cd
 800140c:	080013cd 	.word	0x080013cd
 8001410:	08001555 	.word	0x08001555
 8001414:	0800147d 	.word	0x0800147d
 8001418:	0800150f 	.word	0x0800150f
 800141c:	080013cd 	.word	0x080013cd
 8001420:	080013cd 	.word	0x080013cd
 8001424:	08001577 	.word	0x08001577
 8001428:	080013cd 	.word	0x080013cd
 800142c:	0800147d 	.word	0x0800147d
 8001430:	080013cd 	.word	0x080013cd
 8001434:	080013cd 	.word	0x080013cd
 8001438:	08001517 	.word	0x08001517
 800143c:	682b      	ldr	r3, [r5, #0]
 800143e:	1d1a      	adds	r2, r3, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	602a      	str	r2, [r5, #0]
 8001444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800144c:	2301      	movs	r3, #1
 800144e:	e09f      	b.n	8001590 <_printf_i+0x1ec>
 8001450:	6820      	ldr	r0, [r4, #0]
 8001452:	682b      	ldr	r3, [r5, #0]
 8001454:	0607      	lsls	r7, r0, #24
 8001456:	f103 0104 	add.w	r1, r3, #4
 800145a:	6029      	str	r1, [r5, #0]
 800145c:	d501      	bpl.n	8001462 <_printf_i+0xbe>
 800145e:	681e      	ldr	r6, [r3, #0]
 8001460:	e003      	b.n	800146a <_printf_i+0xc6>
 8001462:	0646      	lsls	r6, r0, #25
 8001464:	d5fb      	bpl.n	800145e <_printf_i+0xba>
 8001466:	f9b3 6000 	ldrsh.w	r6, [r3]
 800146a:	2e00      	cmp	r6, #0
 800146c:	da03      	bge.n	8001476 <_printf_i+0xd2>
 800146e:	232d      	movs	r3, #45	; 0x2d
 8001470:	4276      	negs	r6, r6
 8001472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001476:	485a      	ldr	r0, [pc, #360]	; (80015e0 <_printf_i+0x23c>)
 8001478:	230a      	movs	r3, #10
 800147a:	e012      	b.n	80014a2 <_printf_i+0xfe>
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	6820      	ldr	r0, [r4, #0]
 8001480:	1d19      	adds	r1, r3, #4
 8001482:	6029      	str	r1, [r5, #0]
 8001484:	0605      	lsls	r5, r0, #24
 8001486:	d501      	bpl.n	800148c <_printf_i+0xe8>
 8001488:	681e      	ldr	r6, [r3, #0]
 800148a:	e002      	b.n	8001492 <_printf_i+0xee>
 800148c:	0641      	lsls	r1, r0, #25
 800148e:	d5fb      	bpl.n	8001488 <_printf_i+0xe4>
 8001490:	881e      	ldrh	r6, [r3, #0]
 8001492:	4853      	ldr	r0, [pc, #332]	; (80015e0 <_printf_i+0x23c>)
 8001494:	2f6f      	cmp	r7, #111	; 0x6f
 8001496:	bf0c      	ite	eq
 8001498:	2308      	moveq	r3, #8
 800149a:	230a      	movne	r3, #10
 800149c:	2100      	movs	r1, #0
 800149e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80014a2:	6865      	ldr	r5, [r4, #4]
 80014a4:	60a5      	str	r5, [r4, #8]
 80014a6:	2d00      	cmp	r5, #0
 80014a8:	bfa2      	ittt	ge
 80014aa:	6821      	ldrge	r1, [r4, #0]
 80014ac:	f021 0104 	bicge.w	r1, r1, #4
 80014b0:	6021      	strge	r1, [r4, #0]
 80014b2:	b90e      	cbnz	r6, 80014b8 <_printf_i+0x114>
 80014b4:	2d00      	cmp	r5, #0
 80014b6:	d04b      	beq.n	8001550 <_printf_i+0x1ac>
 80014b8:	4615      	mov	r5, r2
 80014ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80014be:	fb03 6711 	mls	r7, r3, r1, r6
 80014c2:	5dc7      	ldrb	r7, [r0, r7]
 80014c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80014c8:	4637      	mov	r7, r6
 80014ca:	42bb      	cmp	r3, r7
 80014cc:	460e      	mov	r6, r1
 80014ce:	d9f4      	bls.n	80014ba <_printf_i+0x116>
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d10b      	bne.n	80014ec <_printf_i+0x148>
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	07de      	lsls	r6, r3, #31
 80014d8:	d508      	bpl.n	80014ec <_printf_i+0x148>
 80014da:	6923      	ldr	r3, [r4, #16]
 80014dc:	6861      	ldr	r1, [r4, #4]
 80014de:	4299      	cmp	r1, r3
 80014e0:	bfde      	ittt	le
 80014e2:	2330      	movle	r3, #48	; 0x30
 80014e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80014e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80014ec:	1b52      	subs	r2, r2, r5
 80014ee:	6122      	str	r2, [r4, #16]
 80014f0:	f8cd a000 	str.w	sl, [sp]
 80014f4:	464b      	mov	r3, r9
 80014f6:	aa03      	add	r2, sp, #12
 80014f8:	4621      	mov	r1, r4
 80014fa:	4640      	mov	r0, r8
 80014fc:	f7ff fee4 	bl	80012c8 <_printf_common>
 8001500:	3001      	adds	r0, #1
 8001502:	d14a      	bne.n	800159a <_printf_i+0x1f6>
 8001504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001508:	b004      	add	sp, #16
 800150a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	f043 0320 	orr.w	r3, r3, #32
 8001514:	6023      	str	r3, [r4, #0]
 8001516:	4833      	ldr	r0, [pc, #204]	; (80015e4 <_printf_i+0x240>)
 8001518:	2778      	movs	r7, #120	; 0x78
 800151a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	6829      	ldr	r1, [r5, #0]
 8001522:	061f      	lsls	r7, r3, #24
 8001524:	f851 6b04 	ldr.w	r6, [r1], #4
 8001528:	d402      	bmi.n	8001530 <_printf_i+0x18c>
 800152a:	065f      	lsls	r7, r3, #25
 800152c:	bf48      	it	mi
 800152e:	b2b6      	uxthmi	r6, r6
 8001530:	07df      	lsls	r7, r3, #31
 8001532:	bf48      	it	mi
 8001534:	f043 0320 	orrmi.w	r3, r3, #32
 8001538:	6029      	str	r1, [r5, #0]
 800153a:	bf48      	it	mi
 800153c:	6023      	strmi	r3, [r4, #0]
 800153e:	b91e      	cbnz	r6, 8001548 <_printf_i+0x1a4>
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	f023 0320 	bic.w	r3, r3, #32
 8001546:	6023      	str	r3, [r4, #0]
 8001548:	2310      	movs	r3, #16
 800154a:	e7a7      	b.n	800149c <_printf_i+0xf8>
 800154c:	4824      	ldr	r0, [pc, #144]	; (80015e0 <_printf_i+0x23c>)
 800154e:	e7e4      	b.n	800151a <_printf_i+0x176>
 8001550:	4615      	mov	r5, r2
 8001552:	e7bd      	b.n	80014d0 <_printf_i+0x12c>
 8001554:	682b      	ldr	r3, [r5, #0]
 8001556:	6826      	ldr	r6, [r4, #0]
 8001558:	6961      	ldr	r1, [r4, #20]
 800155a:	1d18      	adds	r0, r3, #4
 800155c:	6028      	str	r0, [r5, #0]
 800155e:	0635      	lsls	r5, r6, #24
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	d501      	bpl.n	8001568 <_printf_i+0x1c4>
 8001564:	6019      	str	r1, [r3, #0]
 8001566:	e002      	b.n	800156e <_printf_i+0x1ca>
 8001568:	0670      	lsls	r0, r6, #25
 800156a:	d5fb      	bpl.n	8001564 <_printf_i+0x1c0>
 800156c:	8019      	strh	r1, [r3, #0]
 800156e:	2300      	movs	r3, #0
 8001570:	6123      	str	r3, [r4, #16]
 8001572:	4615      	mov	r5, r2
 8001574:	e7bc      	b.n	80014f0 <_printf_i+0x14c>
 8001576:	682b      	ldr	r3, [r5, #0]
 8001578:	1d1a      	adds	r2, r3, #4
 800157a:	602a      	str	r2, [r5, #0]
 800157c:	681d      	ldr	r5, [r3, #0]
 800157e:	6862      	ldr	r2, [r4, #4]
 8001580:	2100      	movs	r1, #0
 8001582:	4628      	mov	r0, r5
 8001584:	f7fe fe24 	bl	80001d0 <memchr>
 8001588:	b108      	cbz	r0, 800158e <_printf_i+0x1ea>
 800158a:	1b40      	subs	r0, r0, r5
 800158c:	6060      	str	r0, [r4, #4]
 800158e:	6863      	ldr	r3, [r4, #4]
 8001590:	6123      	str	r3, [r4, #16]
 8001592:	2300      	movs	r3, #0
 8001594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001598:	e7aa      	b.n	80014f0 <_printf_i+0x14c>
 800159a:	6923      	ldr	r3, [r4, #16]
 800159c:	462a      	mov	r2, r5
 800159e:	4649      	mov	r1, r9
 80015a0:	4640      	mov	r0, r8
 80015a2:	47d0      	blx	sl
 80015a4:	3001      	adds	r0, #1
 80015a6:	d0ad      	beq.n	8001504 <_printf_i+0x160>
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	079b      	lsls	r3, r3, #30
 80015ac:	d413      	bmi.n	80015d6 <_printf_i+0x232>
 80015ae:	68e0      	ldr	r0, [r4, #12]
 80015b0:	9b03      	ldr	r3, [sp, #12]
 80015b2:	4298      	cmp	r0, r3
 80015b4:	bfb8      	it	lt
 80015b6:	4618      	movlt	r0, r3
 80015b8:	e7a6      	b.n	8001508 <_printf_i+0x164>
 80015ba:	2301      	movs	r3, #1
 80015bc:	4632      	mov	r2, r6
 80015be:	4649      	mov	r1, r9
 80015c0:	4640      	mov	r0, r8
 80015c2:	47d0      	blx	sl
 80015c4:	3001      	adds	r0, #1
 80015c6:	d09d      	beq.n	8001504 <_printf_i+0x160>
 80015c8:	3501      	adds	r5, #1
 80015ca:	68e3      	ldr	r3, [r4, #12]
 80015cc:	9903      	ldr	r1, [sp, #12]
 80015ce:	1a5b      	subs	r3, r3, r1
 80015d0:	42ab      	cmp	r3, r5
 80015d2:	dcf2      	bgt.n	80015ba <_printf_i+0x216>
 80015d4:	e7eb      	b.n	80015ae <_printf_i+0x20a>
 80015d6:	2500      	movs	r5, #0
 80015d8:	f104 0619 	add.w	r6, r4, #25
 80015dc:	e7f5      	b.n	80015ca <_printf_i+0x226>
 80015de:	bf00      	nop
 80015e0:	08001b85 	.word	0x08001b85
 80015e4:	08001b96 	.word	0x08001b96

080015e8 <__sflush_r>:
 80015e8:	898a      	ldrh	r2, [r1, #12]
 80015ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015ee:	4605      	mov	r5, r0
 80015f0:	0710      	lsls	r0, r2, #28
 80015f2:	460c      	mov	r4, r1
 80015f4:	d458      	bmi.n	80016a8 <__sflush_r+0xc0>
 80015f6:	684b      	ldr	r3, [r1, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	dc05      	bgt.n	8001608 <__sflush_r+0x20>
 80015fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015fe:	2b00      	cmp	r3, #0
 8001600:	dc02      	bgt.n	8001608 <__sflush_r+0x20>
 8001602:	2000      	movs	r0, #0
 8001604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800160a:	2e00      	cmp	r6, #0
 800160c:	d0f9      	beq.n	8001602 <__sflush_r+0x1a>
 800160e:	2300      	movs	r3, #0
 8001610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001614:	682f      	ldr	r7, [r5, #0]
 8001616:	6a21      	ldr	r1, [r4, #32]
 8001618:	602b      	str	r3, [r5, #0]
 800161a:	d032      	beq.n	8001682 <__sflush_r+0x9a>
 800161c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800161e:	89a3      	ldrh	r3, [r4, #12]
 8001620:	075a      	lsls	r2, r3, #29
 8001622:	d505      	bpl.n	8001630 <__sflush_r+0x48>
 8001624:	6863      	ldr	r3, [r4, #4]
 8001626:	1ac0      	subs	r0, r0, r3
 8001628:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800162a:	b10b      	cbz	r3, 8001630 <__sflush_r+0x48>
 800162c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800162e:	1ac0      	subs	r0, r0, r3
 8001630:	2300      	movs	r3, #0
 8001632:	4602      	mov	r2, r0
 8001634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001636:	6a21      	ldr	r1, [r4, #32]
 8001638:	4628      	mov	r0, r5
 800163a:	47b0      	blx	r6
 800163c:	1c43      	adds	r3, r0, #1
 800163e:	89a3      	ldrh	r3, [r4, #12]
 8001640:	d106      	bne.n	8001650 <__sflush_r+0x68>
 8001642:	6829      	ldr	r1, [r5, #0]
 8001644:	291d      	cmp	r1, #29
 8001646:	d82b      	bhi.n	80016a0 <__sflush_r+0xb8>
 8001648:	4a29      	ldr	r2, [pc, #164]	; (80016f0 <__sflush_r+0x108>)
 800164a:	410a      	asrs	r2, r1
 800164c:	07d6      	lsls	r6, r2, #31
 800164e:	d427      	bmi.n	80016a0 <__sflush_r+0xb8>
 8001650:	2200      	movs	r2, #0
 8001652:	6062      	str	r2, [r4, #4]
 8001654:	04d9      	lsls	r1, r3, #19
 8001656:	6922      	ldr	r2, [r4, #16]
 8001658:	6022      	str	r2, [r4, #0]
 800165a:	d504      	bpl.n	8001666 <__sflush_r+0x7e>
 800165c:	1c42      	adds	r2, r0, #1
 800165e:	d101      	bne.n	8001664 <__sflush_r+0x7c>
 8001660:	682b      	ldr	r3, [r5, #0]
 8001662:	b903      	cbnz	r3, 8001666 <__sflush_r+0x7e>
 8001664:	6560      	str	r0, [r4, #84]	; 0x54
 8001666:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001668:	602f      	str	r7, [r5, #0]
 800166a:	2900      	cmp	r1, #0
 800166c:	d0c9      	beq.n	8001602 <__sflush_r+0x1a>
 800166e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001672:	4299      	cmp	r1, r3
 8001674:	d002      	beq.n	800167c <__sflush_r+0x94>
 8001676:	4628      	mov	r0, r5
 8001678:	f000 fa22 	bl	8001ac0 <_free_r>
 800167c:	2000      	movs	r0, #0
 800167e:	6360      	str	r0, [r4, #52]	; 0x34
 8001680:	e7c0      	b.n	8001604 <__sflush_r+0x1c>
 8001682:	2301      	movs	r3, #1
 8001684:	4628      	mov	r0, r5
 8001686:	47b0      	blx	r6
 8001688:	1c41      	adds	r1, r0, #1
 800168a:	d1c8      	bne.n	800161e <__sflush_r+0x36>
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0c5      	beq.n	800161e <__sflush_r+0x36>
 8001692:	2b1d      	cmp	r3, #29
 8001694:	d001      	beq.n	800169a <__sflush_r+0xb2>
 8001696:	2b16      	cmp	r3, #22
 8001698:	d101      	bne.n	800169e <__sflush_r+0xb6>
 800169a:	602f      	str	r7, [r5, #0]
 800169c:	e7b1      	b.n	8001602 <__sflush_r+0x1a>
 800169e:	89a3      	ldrh	r3, [r4, #12]
 80016a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a4:	81a3      	strh	r3, [r4, #12]
 80016a6:	e7ad      	b.n	8001604 <__sflush_r+0x1c>
 80016a8:	690f      	ldr	r7, [r1, #16]
 80016aa:	2f00      	cmp	r7, #0
 80016ac:	d0a9      	beq.n	8001602 <__sflush_r+0x1a>
 80016ae:	0793      	lsls	r3, r2, #30
 80016b0:	680e      	ldr	r6, [r1, #0]
 80016b2:	bf08      	it	eq
 80016b4:	694b      	ldreq	r3, [r1, #20]
 80016b6:	600f      	str	r7, [r1, #0]
 80016b8:	bf18      	it	ne
 80016ba:	2300      	movne	r3, #0
 80016bc:	eba6 0807 	sub.w	r8, r6, r7
 80016c0:	608b      	str	r3, [r1, #8]
 80016c2:	f1b8 0f00 	cmp.w	r8, #0
 80016c6:	dd9c      	ble.n	8001602 <__sflush_r+0x1a>
 80016c8:	6a21      	ldr	r1, [r4, #32]
 80016ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80016cc:	4643      	mov	r3, r8
 80016ce:	463a      	mov	r2, r7
 80016d0:	4628      	mov	r0, r5
 80016d2:	47b0      	blx	r6
 80016d4:	2800      	cmp	r0, #0
 80016d6:	dc06      	bgt.n	80016e6 <__sflush_r+0xfe>
 80016d8:	89a3      	ldrh	r3, [r4, #12]
 80016da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016de:	81a3      	strh	r3, [r4, #12]
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016e4:	e78e      	b.n	8001604 <__sflush_r+0x1c>
 80016e6:	4407      	add	r7, r0
 80016e8:	eba8 0800 	sub.w	r8, r8, r0
 80016ec:	e7e9      	b.n	80016c2 <__sflush_r+0xda>
 80016ee:	bf00      	nop
 80016f0:	dfbffffe 	.word	0xdfbffffe

080016f4 <_fflush_r>:
 80016f4:	b538      	push	{r3, r4, r5, lr}
 80016f6:	690b      	ldr	r3, [r1, #16]
 80016f8:	4605      	mov	r5, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	b913      	cbnz	r3, 8001704 <_fflush_r+0x10>
 80016fe:	2500      	movs	r5, #0
 8001700:	4628      	mov	r0, r5
 8001702:	bd38      	pop	{r3, r4, r5, pc}
 8001704:	b118      	cbz	r0, 800170e <_fflush_r+0x1a>
 8001706:	6a03      	ldr	r3, [r0, #32]
 8001708:	b90b      	cbnz	r3, 800170e <_fflush_r+0x1a>
 800170a:	f7ff fb7d 	bl	8000e08 <__sinit>
 800170e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f3      	beq.n	80016fe <_fflush_r+0xa>
 8001716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001718:	07d0      	lsls	r0, r2, #31
 800171a:	d404      	bmi.n	8001726 <_fflush_r+0x32>
 800171c:	0599      	lsls	r1, r3, #22
 800171e:	d402      	bmi.n	8001726 <_fflush_r+0x32>
 8001720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001722:	f7ff fbeb 	bl	8000efc <__retarget_lock_acquire_recursive>
 8001726:	4628      	mov	r0, r5
 8001728:	4621      	mov	r1, r4
 800172a:	f7ff ff5d 	bl	80015e8 <__sflush_r>
 800172e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001730:	07da      	lsls	r2, r3, #31
 8001732:	4605      	mov	r5, r0
 8001734:	d4e4      	bmi.n	8001700 <_fflush_r+0xc>
 8001736:	89a3      	ldrh	r3, [r4, #12]
 8001738:	059b      	lsls	r3, r3, #22
 800173a:	d4e1      	bmi.n	8001700 <_fflush_r+0xc>
 800173c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800173e:	f7ff fbde 	bl	8000efe <__retarget_lock_release_recursive>
 8001742:	e7dd      	b.n	8001700 <_fflush_r+0xc>

08001744 <__malloc_lock>:
 8001744:	4801      	ldr	r0, [pc, #4]	; (800174c <__malloc_lock+0x8>)
 8001746:	f7ff bbd9 	b.w	8000efc <__retarget_lock_acquire_recursive>
 800174a:	bf00      	nop
 800174c:	200001cc 	.word	0x200001cc

08001750 <__malloc_unlock>:
 8001750:	4801      	ldr	r0, [pc, #4]	; (8001758 <__malloc_unlock+0x8>)
 8001752:	f7ff bbd4 	b.w	8000efe <__retarget_lock_release_recursive>
 8001756:	bf00      	nop
 8001758:	200001cc 	.word	0x200001cc

0800175c <__sread>:
 800175c:	b510      	push	{r4, lr}
 800175e:	460c      	mov	r4, r1
 8001760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001764:	f000 f978 	bl	8001a58 <_read_r>
 8001768:	2800      	cmp	r0, #0
 800176a:	bfab      	itete	ge
 800176c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800176e:	89a3      	ldrhlt	r3, [r4, #12]
 8001770:	181b      	addge	r3, r3, r0
 8001772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001776:	bfac      	ite	ge
 8001778:	6563      	strge	r3, [r4, #84]	; 0x54
 800177a:	81a3      	strhlt	r3, [r4, #12]
 800177c:	bd10      	pop	{r4, pc}

0800177e <__swrite>:
 800177e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001782:	461f      	mov	r7, r3
 8001784:	898b      	ldrh	r3, [r1, #12]
 8001786:	05db      	lsls	r3, r3, #23
 8001788:	4605      	mov	r5, r0
 800178a:	460c      	mov	r4, r1
 800178c:	4616      	mov	r6, r2
 800178e:	d505      	bpl.n	800179c <__swrite+0x1e>
 8001790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001794:	2302      	movs	r3, #2
 8001796:	2200      	movs	r2, #0
 8001798:	f000 f94c 	bl	8001a34 <_lseek_r>
 800179c:	89a3      	ldrh	r3, [r4, #12]
 800179e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017a6:	81a3      	strh	r3, [r4, #12]
 80017a8:	4632      	mov	r2, r6
 80017aa:	463b      	mov	r3, r7
 80017ac:	4628      	mov	r0, r5
 80017ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017b2:	f000 b973 	b.w	8001a9c <_write_r>

080017b6 <__sseek>:
 80017b6:	b510      	push	{r4, lr}
 80017b8:	460c      	mov	r4, r1
 80017ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017be:	f000 f939 	bl	8001a34 <_lseek_r>
 80017c2:	1c43      	adds	r3, r0, #1
 80017c4:	89a3      	ldrh	r3, [r4, #12]
 80017c6:	bf15      	itete	ne
 80017c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80017ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80017ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80017d2:	81a3      	strheq	r3, [r4, #12]
 80017d4:	bf18      	it	ne
 80017d6:	81a3      	strhne	r3, [r4, #12]
 80017d8:	bd10      	pop	{r4, pc}

080017da <__sclose>:
 80017da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017de:	f000 b8f7 	b.w	80019d0 <_close_r>

080017e2 <__swbuf_r>:
 80017e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e4:	460e      	mov	r6, r1
 80017e6:	4614      	mov	r4, r2
 80017e8:	4605      	mov	r5, r0
 80017ea:	b118      	cbz	r0, 80017f4 <__swbuf_r+0x12>
 80017ec:	6a03      	ldr	r3, [r0, #32]
 80017ee:	b90b      	cbnz	r3, 80017f4 <__swbuf_r+0x12>
 80017f0:	f7ff fb0a 	bl	8000e08 <__sinit>
 80017f4:	69a3      	ldr	r3, [r4, #24]
 80017f6:	60a3      	str	r3, [r4, #8]
 80017f8:	89a3      	ldrh	r3, [r4, #12]
 80017fa:	071a      	lsls	r2, r3, #28
 80017fc:	d525      	bpl.n	800184a <__swbuf_r+0x68>
 80017fe:	6923      	ldr	r3, [r4, #16]
 8001800:	b31b      	cbz	r3, 800184a <__swbuf_r+0x68>
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	6922      	ldr	r2, [r4, #16]
 8001806:	1a98      	subs	r0, r3, r2
 8001808:	6963      	ldr	r3, [r4, #20]
 800180a:	b2f6      	uxtb	r6, r6
 800180c:	4283      	cmp	r3, r0
 800180e:	4637      	mov	r7, r6
 8001810:	dc04      	bgt.n	800181c <__swbuf_r+0x3a>
 8001812:	4621      	mov	r1, r4
 8001814:	4628      	mov	r0, r5
 8001816:	f7ff ff6d 	bl	80016f4 <_fflush_r>
 800181a:	b9e0      	cbnz	r0, 8001856 <__swbuf_r+0x74>
 800181c:	68a3      	ldr	r3, [r4, #8]
 800181e:	3b01      	subs	r3, #1
 8001820:	60a3      	str	r3, [r4, #8]
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	6022      	str	r2, [r4, #0]
 8001828:	701e      	strb	r6, [r3, #0]
 800182a:	6962      	ldr	r2, [r4, #20]
 800182c:	1c43      	adds	r3, r0, #1
 800182e:	429a      	cmp	r2, r3
 8001830:	d004      	beq.n	800183c <__swbuf_r+0x5a>
 8001832:	89a3      	ldrh	r3, [r4, #12]
 8001834:	07db      	lsls	r3, r3, #31
 8001836:	d506      	bpl.n	8001846 <__swbuf_r+0x64>
 8001838:	2e0a      	cmp	r6, #10
 800183a:	d104      	bne.n	8001846 <__swbuf_r+0x64>
 800183c:	4621      	mov	r1, r4
 800183e:	4628      	mov	r0, r5
 8001840:	f7ff ff58 	bl	80016f4 <_fflush_r>
 8001844:	b938      	cbnz	r0, 8001856 <__swbuf_r+0x74>
 8001846:	4638      	mov	r0, r7
 8001848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800184a:	4621      	mov	r1, r4
 800184c:	4628      	mov	r0, r5
 800184e:	f000 f805 	bl	800185c <__swsetup_r>
 8001852:	2800      	cmp	r0, #0
 8001854:	d0d5      	beq.n	8001802 <__swbuf_r+0x20>
 8001856:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800185a:	e7f4      	b.n	8001846 <__swbuf_r+0x64>

0800185c <__swsetup_r>:
 800185c:	b538      	push	{r3, r4, r5, lr}
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <__swsetup_r+0xac>)
 8001860:	4605      	mov	r5, r0
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	460c      	mov	r4, r1
 8001866:	b118      	cbz	r0, 8001870 <__swsetup_r+0x14>
 8001868:	6a03      	ldr	r3, [r0, #32]
 800186a:	b90b      	cbnz	r3, 8001870 <__swsetup_r+0x14>
 800186c:	f7ff facc 	bl	8000e08 <__sinit>
 8001870:	89a3      	ldrh	r3, [r4, #12]
 8001872:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001876:	0718      	lsls	r0, r3, #28
 8001878:	d422      	bmi.n	80018c0 <__swsetup_r+0x64>
 800187a:	06d9      	lsls	r1, r3, #27
 800187c:	d407      	bmi.n	800188e <__swsetup_r+0x32>
 800187e:	2309      	movs	r3, #9
 8001880:	602b      	str	r3, [r5, #0]
 8001882:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001886:	81a3      	strh	r3, [r4, #12]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800188c:	e034      	b.n	80018f8 <__swsetup_r+0x9c>
 800188e:	0758      	lsls	r0, r3, #29
 8001890:	d512      	bpl.n	80018b8 <__swsetup_r+0x5c>
 8001892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001894:	b141      	cbz	r1, 80018a8 <__swsetup_r+0x4c>
 8001896:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800189a:	4299      	cmp	r1, r3
 800189c:	d002      	beq.n	80018a4 <__swsetup_r+0x48>
 800189e:	4628      	mov	r0, r5
 80018a0:	f000 f90e 	bl	8001ac0 <_free_r>
 80018a4:	2300      	movs	r3, #0
 80018a6:	6363      	str	r3, [r4, #52]	; 0x34
 80018a8:	89a3      	ldrh	r3, [r4, #12]
 80018aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80018ae:	81a3      	strh	r3, [r4, #12]
 80018b0:	2300      	movs	r3, #0
 80018b2:	6063      	str	r3, [r4, #4]
 80018b4:	6923      	ldr	r3, [r4, #16]
 80018b6:	6023      	str	r3, [r4, #0]
 80018b8:	89a3      	ldrh	r3, [r4, #12]
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	81a3      	strh	r3, [r4, #12]
 80018c0:	6923      	ldr	r3, [r4, #16]
 80018c2:	b94b      	cbnz	r3, 80018d8 <__swsetup_r+0x7c>
 80018c4:	89a3      	ldrh	r3, [r4, #12]
 80018c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80018ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ce:	d003      	beq.n	80018d8 <__swsetup_r+0x7c>
 80018d0:	4621      	mov	r1, r4
 80018d2:	4628      	mov	r0, r5
 80018d4:	f000 f840 	bl	8001958 <__smakebuf_r>
 80018d8:	89a0      	ldrh	r0, [r4, #12]
 80018da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018de:	f010 0301 	ands.w	r3, r0, #1
 80018e2:	d00a      	beq.n	80018fa <__swsetup_r+0x9e>
 80018e4:	2300      	movs	r3, #0
 80018e6:	60a3      	str	r3, [r4, #8]
 80018e8:	6963      	ldr	r3, [r4, #20]
 80018ea:	425b      	negs	r3, r3
 80018ec:	61a3      	str	r3, [r4, #24]
 80018ee:	6923      	ldr	r3, [r4, #16]
 80018f0:	b943      	cbnz	r3, 8001904 <__swsetup_r+0xa8>
 80018f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80018f6:	d1c4      	bne.n	8001882 <__swsetup_r+0x26>
 80018f8:	bd38      	pop	{r3, r4, r5, pc}
 80018fa:	0781      	lsls	r1, r0, #30
 80018fc:	bf58      	it	pl
 80018fe:	6963      	ldrpl	r3, [r4, #20]
 8001900:	60a3      	str	r3, [r4, #8]
 8001902:	e7f4      	b.n	80018ee <__swsetup_r+0x92>
 8001904:	2000      	movs	r0, #0
 8001906:	e7f7      	b.n	80018f8 <__swsetup_r+0x9c>
 8001908:	20000064 	.word	0x20000064

0800190c <__swhatbuf_r>:
 800190c:	b570      	push	{r4, r5, r6, lr}
 800190e:	460c      	mov	r4, r1
 8001910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001914:	2900      	cmp	r1, #0
 8001916:	b096      	sub	sp, #88	; 0x58
 8001918:	4615      	mov	r5, r2
 800191a:	461e      	mov	r6, r3
 800191c:	da0d      	bge.n	800193a <__swhatbuf_r+0x2e>
 800191e:	89a3      	ldrh	r3, [r4, #12]
 8001920:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	bf0c      	ite	eq
 800192a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800192e:	2340      	movne	r3, #64	; 0x40
 8001930:	2000      	movs	r0, #0
 8001932:	6031      	str	r1, [r6, #0]
 8001934:	602b      	str	r3, [r5, #0]
 8001936:	b016      	add	sp, #88	; 0x58
 8001938:	bd70      	pop	{r4, r5, r6, pc}
 800193a:	466a      	mov	r2, sp
 800193c:	f000 f858 	bl	80019f0 <_fstat_r>
 8001940:	2800      	cmp	r0, #0
 8001942:	dbec      	blt.n	800191e <__swhatbuf_r+0x12>
 8001944:	9901      	ldr	r1, [sp, #4]
 8001946:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800194a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800194e:	4259      	negs	r1, r3
 8001950:	4159      	adcs	r1, r3
 8001952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001956:	e7eb      	b.n	8001930 <__swhatbuf_r+0x24>

08001958 <__smakebuf_r>:
 8001958:	898b      	ldrh	r3, [r1, #12]
 800195a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800195c:	079d      	lsls	r5, r3, #30
 800195e:	4606      	mov	r6, r0
 8001960:	460c      	mov	r4, r1
 8001962:	d507      	bpl.n	8001974 <__smakebuf_r+0x1c>
 8001964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001968:	6023      	str	r3, [r4, #0]
 800196a:	6123      	str	r3, [r4, #16]
 800196c:	2301      	movs	r3, #1
 800196e:	6163      	str	r3, [r4, #20]
 8001970:	b002      	add	sp, #8
 8001972:	bd70      	pop	{r4, r5, r6, pc}
 8001974:	ab01      	add	r3, sp, #4
 8001976:	466a      	mov	r2, sp
 8001978:	f7ff ffc8 	bl	800190c <__swhatbuf_r>
 800197c:	9900      	ldr	r1, [sp, #0]
 800197e:	4605      	mov	r5, r0
 8001980:	4630      	mov	r0, r6
 8001982:	f7ff fc21 	bl	80011c8 <_malloc_r>
 8001986:	b948      	cbnz	r0, 800199c <__smakebuf_r+0x44>
 8001988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800198c:	059a      	lsls	r2, r3, #22
 800198e:	d4ef      	bmi.n	8001970 <__smakebuf_r+0x18>
 8001990:	f023 0303 	bic.w	r3, r3, #3
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	81a3      	strh	r3, [r4, #12]
 800199a:	e7e3      	b.n	8001964 <__smakebuf_r+0xc>
 800199c:	89a3      	ldrh	r3, [r4, #12]
 800199e:	6020      	str	r0, [r4, #0]
 80019a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a4:	81a3      	strh	r3, [r4, #12]
 80019a6:	9b00      	ldr	r3, [sp, #0]
 80019a8:	6163      	str	r3, [r4, #20]
 80019aa:	9b01      	ldr	r3, [sp, #4]
 80019ac:	6120      	str	r0, [r4, #16]
 80019ae:	b15b      	cbz	r3, 80019c8 <__smakebuf_r+0x70>
 80019b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019b4:	4630      	mov	r0, r6
 80019b6:	f000 f82d 	bl	8001a14 <_isatty_r>
 80019ba:	b128      	cbz	r0, 80019c8 <__smakebuf_r+0x70>
 80019bc:	89a3      	ldrh	r3, [r4, #12]
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	81a3      	strh	r3, [r4, #12]
 80019c8:	89a3      	ldrh	r3, [r4, #12]
 80019ca:	431d      	orrs	r5, r3
 80019cc:	81a5      	strh	r5, [r4, #12]
 80019ce:	e7cf      	b.n	8001970 <__smakebuf_r+0x18>

080019d0 <_close_r>:
 80019d0:	b538      	push	{r3, r4, r5, lr}
 80019d2:	4d06      	ldr	r5, [pc, #24]	; (80019ec <_close_r+0x1c>)
 80019d4:	2300      	movs	r3, #0
 80019d6:	4604      	mov	r4, r0
 80019d8:	4608      	mov	r0, r1
 80019da:	602b      	str	r3, [r5, #0]
 80019dc:	f7fe fd62 	bl	80004a4 <_close>
 80019e0:	1c43      	adds	r3, r0, #1
 80019e2:	d102      	bne.n	80019ea <_close_r+0x1a>
 80019e4:	682b      	ldr	r3, [r5, #0]
 80019e6:	b103      	cbz	r3, 80019ea <_close_r+0x1a>
 80019e8:	6023      	str	r3, [r4, #0]
 80019ea:	bd38      	pop	{r3, r4, r5, pc}
 80019ec:	200001d8 	.word	0x200001d8

080019f0 <_fstat_r>:
 80019f0:	b538      	push	{r3, r4, r5, lr}
 80019f2:	4d07      	ldr	r5, [pc, #28]	; (8001a10 <_fstat_r+0x20>)
 80019f4:	2300      	movs	r3, #0
 80019f6:	4604      	mov	r4, r0
 80019f8:	4608      	mov	r0, r1
 80019fa:	4611      	mov	r1, r2
 80019fc:	602b      	str	r3, [r5, #0]
 80019fe:	f7fe fd5d 	bl	80004bc <_fstat>
 8001a02:	1c43      	adds	r3, r0, #1
 8001a04:	d102      	bne.n	8001a0c <_fstat_r+0x1c>
 8001a06:	682b      	ldr	r3, [r5, #0]
 8001a08:	b103      	cbz	r3, 8001a0c <_fstat_r+0x1c>
 8001a0a:	6023      	str	r3, [r4, #0]
 8001a0c:	bd38      	pop	{r3, r4, r5, pc}
 8001a0e:	bf00      	nop
 8001a10:	200001d8 	.word	0x200001d8

08001a14 <_isatty_r>:
 8001a14:	b538      	push	{r3, r4, r5, lr}
 8001a16:	4d06      	ldr	r5, [pc, #24]	; (8001a30 <_isatty_r+0x1c>)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	602b      	str	r3, [r5, #0]
 8001a20:	f7fe fd5c 	bl	80004dc <_isatty>
 8001a24:	1c43      	adds	r3, r0, #1
 8001a26:	d102      	bne.n	8001a2e <_isatty_r+0x1a>
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	b103      	cbz	r3, 8001a2e <_isatty_r+0x1a>
 8001a2c:	6023      	str	r3, [r4, #0]
 8001a2e:	bd38      	pop	{r3, r4, r5, pc}
 8001a30:	200001d8 	.word	0x200001d8

08001a34 <_lseek_r>:
 8001a34:	b538      	push	{r3, r4, r5, lr}
 8001a36:	4d07      	ldr	r5, [pc, #28]	; (8001a54 <_lseek_r+0x20>)
 8001a38:	4604      	mov	r4, r0
 8001a3a:	4608      	mov	r0, r1
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	2200      	movs	r2, #0
 8001a40:	602a      	str	r2, [r5, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f7fe fd55 	bl	80004f2 <_lseek>
 8001a48:	1c43      	adds	r3, r0, #1
 8001a4a:	d102      	bne.n	8001a52 <_lseek_r+0x1e>
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	b103      	cbz	r3, 8001a52 <_lseek_r+0x1e>
 8001a50:	6023      	str	r3, [r4, #0]
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
 8001a54:	200001d8 	.word	0x200001d8

08001a58 <_read_r>:
 8001a58:	b538      	push	{r3, r4, r5, lr}
 8001a5a:	4d07      	ldr	r5, [pc, #28]	; (8001a78 <_read_r+0x20>)
 8001a5c:	4604      	mov	r4, r0
 8001a5e:	4608      	mov	r0, r1
 8001a60:	4611      	mov	r1, r2
 8001a62:	2200      	movs	r2, #0
 8001a64:	602a      	str	r2, [r5, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f7fe fce3 	bl	8000432 <_read>
 8001a6c:	1c43      	adds	r3, r0, #1
 8001a6e:	d102      	bne.n	8001a76 <_read_r+0x1e>
 8001a70:	682b      	ldr	r3, [r5, #0]
 8001a72:	b103      	cbz	r3, 8001a76 <_read_r+0x1e>
 8001a74:	6023      	str	r3, [r4, #0]
 8001a76:	bd38      	pop	{r3, r4, r5, pc}
 8001a78:	200001d8 	.word	0x200001d8

08001a7c <_sbrk_r>:
 8001a7c:	b538      	push	{r3, r4, r5, lr}
 8001a7e:	4d06      	ldr	r5, [pc, #24]	; (8001a98 <_sbrk_r+0x1c>)
 8001a80:	2300      	movs	r3, #0
 8001a82:	4604      	mov	r4, r0
 8001a84:	4608      	mov	r0, r1
 8001a86:	602b      	str	r3, [r5, #0]
 8001a88:	f7fe fd40 	bl	800050c <_sbrk>
 8001a8c:	1c43      	adds	r3, r0, #1
 8001a8e:	d102      	bne.n	8001a96 <_sbrk_r+0x1a>
 8001a90:	682b      	ldr	r3, [r5, #0]
 8001a92:	b103      	cbz	r3, 8001a96 <_sbrk_r+0x1a>
 8001a94:	6023      	str	r3, [r4, #0]
 8001a96:	bd38      	pop	{r3, r4, r5, pc}
 8001a98:	200001d8 	.word	0x200001d8

08001a9c <_write_r>:
 8001a9c:	b538      	push	{r3, r4, r5, lr}
 8001a9e:	4d07      	ldr	r5, [pc, #28]	; (8001abc <_write_r+0x20>)
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	4608      	mov	r0, r1
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	602a      	str	r2, [r5, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f7fe fcde 	bl	800046c <_write>
 8001ab0:	1c43      	adds	r3, r0, #1
 8001ab2:	d102      	bne.n	8001aba <_write_r+0x1e>
 8001ab4:	682b      	ldr	r3, [r5, #0]
 8001ab6:	b103      	cbz	r3, 8001aba <_write_r+0x1e>
 8001ab8:	6023      	str	r3, [r4, #0]
 8001aba:	bd38      	pop	{r3, r4, r5, pc}
 8001abc:	200001d8 	.word	0x200001d8

08001ac0 <_free_r>:
 8001ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ac2:	2900      	cmp	r1, #0
 8001ac4:	d044      	beq.n	8001b50 <_free_r+0x90>
 8001ac6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001aca:	9001      	str	r0, [sp, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f1a1 0404 	sub.w	r4, r1, #4
 8001ad2:	bfb8      	it	lt
 8001ad4:	18e4      	addlt	r4, r4, r3
 8001ad6:	f7ff fe35 	bl	8001744 <__malloc_lock>
 8001ada:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <_free_r+0x94>)
 8001adc:	9801      	ldr	r0, [sp, #4]
 8001ade:	6813      	ldr	r3, [r2, #0]
 8001ae0:	b933      	cbnz	r3, 8001af0 <_free_r+0x30>
 8001ae2:	6063      	str	r3, [r4, #4]
 8001ae4:	6014      	str	r4, [r2, #0]
 8001ae6:	b003      	add	sp, #12
 8001ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001aec:	f7ff be30 	b.w	8001750 <__malloc_unlock>
 8001af0:	42a3      	cmp	r3, r4
 8001af2:	d908      	bls.n	8001b06 <_free_r+0x46>
 8001af4:	6825      	ldr	r5, [r4, #0]
 8001af6:	1961      	adds	r1, r4, r5
 8001af8:	428b      	cmp	r3, r1
 8001afa:	bf01      	itttt	eq
 8001afc:	6819      	ldreq	r1, [r3, #0]
 8001afe:	685b      	ldreq	r3, [r3, #4]
 8001b00:	1949      	addeq	r1, r1, r5
 8001b02:	6021      	streq	r1, [r4, #0]
 8001b04:	e7ed      	b.n	8001ae2 <_free_r+0x22>
 8001b06:	461a      	mov	r2, r3
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	b10b      	cbz	r3, 8001b10 <_free_r+0x50>
 8001b0c:	42a3      	cmp	r3, r4
 8001b0e:	d9fa      	bls.n	8001b06 <_free_r+0x46>
 8001b10:	6811      	ldr	r1, [r2, #0]
 8001b12:	1855      	adds	r5, r2, r1
 8001b14:	42a5      	cmp	r5, r4
 8001b16:	d10b      	bne.n	8001b30 <_free_r+0x70>
 8001b18:	6824      	ldr	r4, [r4, #0]
 8001b1a:	4421      	add	r1, r4
 8001b1c:	1854      	adds	r4, r2, r1
 8001b1e:	42a3      	cmp	r3, r4
 8001b20:	6011      	str	r1, [r2, #0]
 8001b22:	d1e0      	bne.n	8001ae6 <_free_r+0x26>
 8001b24:	681c      	ldr	r4, [r3, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	6053      	str	r3, [r2, #4]
 8001b2a:	440c      	add	r4, r1
 8001b2c:	6014      	str	r4, [r2, #0]
 8001b2e:	e7da      	b.n	8001ae6 <_free_r+0x26>
 8001b30:	d902      	bls.n	8001b38 <_free_r+0x78>
 8001b32:	230c      	movs	r3, #12
 8001b34:	6003      	str	r3, [r0, #0]
 8001b36:	e7d6      	b.n	8001ae6 <_free_r+0x26>
 8001b38:	6825      	ldr	r5, [r4, #0]
 8001b3a:	1961      	adds	r1, r4, r5
 8001b3c:	428b      	cmp	r3, r1
 8001b3e:	bf04      	itt	eq
 8001b40:	6819      	ldreq	r1, [r3, #0]
 8001b42:	685b      	ldreq	r3, [r3, #4]
 8001b44:	6063      	str	r3, [r4, #4]
 8001b46:	bf04      	itt	eq
 8001b48:	1949      	addeq	r1, r1, r5
 8001b4a:	6021      	streq	r1, [r4, #0]
 8001b4c:	6054      	str	r4, [r2, #4]
 8001b4e:	e7ca      	b.n	8001ae6 <_free_r+0x26>
 8001b50:	b003      	add	sp, #12
 8001b52:	bd30      	pop	{r4, r5, pc}
 8001b54:	200001d0 	.word	0x200001d0

08001b58 <_init>:
 8001b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b5a:	bf00      	nop
 8001b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b5e:	bc08      	pop	{r3}
 8001b60:	469e      	mov	lr, r3
 8001b62:	4770      	bx	lr

08001b64 <_fini>:
 8001b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b66:	bf00      	nop
 8001b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b6a:	bc08      	pop	{r3}
 8001b6c:	469e      	mov	lr, r3
 8001b6e:	4770      	bx	lr
