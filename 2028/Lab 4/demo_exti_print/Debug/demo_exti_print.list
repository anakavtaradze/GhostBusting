
demo_exti_print.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08001b74  08001b74  00011b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c28  08001c28  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08001c28  08001c28  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c28  08001c28  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c28  08001c28  00011c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c2c  08001c2c  00011c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08001c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000078  08001ca8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08001ca8  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f99  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e0a  00000000  00000000  00025041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000458  00000000  00000000  00025e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d0  00000000  00000000  000262a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026463  00000000  00000000  00026678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ecc  00000000  00000000  0004cadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ede26  00000000  00000000  000519a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f7cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019b8  00000000  00000000  0013f820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000003c  00000000  00000000  001411d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b5c 	.word	0x08001b5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08001b5c 	.word	0x08001b5c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <HAL_GPIO_EXTI_Callback>:
extern void initialise_monitor_handles(void);
void SystemClock_Config(void);


HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI13_Pin)
 80001e2:	88fb      	ldrh	r3, [r7, #6]
 80001e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001e8:	d102      	bne.n	80001f0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		printf("\t Blue button is pressed. \n");
 80001ea:	4803      	ldr	r0, [pc, #12]	; (80001f8 <HAL_GPIO_EXTI_Callback+0x20>)
 80001ec:	f001 f9b2 	bl	8001554 <puts>
	}
}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	08001b74 	.word	0x08001b74

080001fc <main>:

int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000200:	f000 fefe 	bl	8001000 <initialise_monitor_handles>
	HAL_Init();
 8000204:	f000 f983 	bl	800050e <HAL_Init>
	MX_GPIO_Init();
 8000208:	f000 f822 	bl	8000250 <MX_GPIO_Init>

	while (1)
	{
		printf("P\n");
 800020c:	480a      	ldr	r0, [pc, #40]	; (8000238 <main+0x3c>)
 800020e:	f001 f9a1 	bl	8001554 <puts>
		printf("O\n");
 8000212:	480a      	ldr	r0, [pc, #40]	; (800023c <main+0x40>)
 8000214:	f001 f99e 	bl	8001554 <puts>
		printf("L\n");
 8000218:	4809      	ldr	r0, [pc, #36]	; (8000240 <main+0x44>)
 800021a:	f001 f99b 	bl	8001554 <puts>
		printf("L\n");
 800021e:	4808      	ldr	r0, [pc, #32]	; (8000240 <main+0x44>)
 8000220:	f001 f998 	bl	8001554 <puts>
		printf("I\n");
 8000224:	4807      	ldr	r0, [pc, #28]	; (8000244 <main+0x48>)
 8000226:	f001 f995 	bl	8001554 <puts>
		printf("N\n");
 800022a:	4807      	ldr	r0, [pc, #28]	; (8000248 <main+0x4c>)
 800022c:	f001 f992 	bl	8001554 <puts>
		printf("G\n\n");
 8000230:	4806      	ldr	r0, [pc, #24]	; (800024c <main+0x50>)
 8000232:	f001 f98f 	bl	8001554 <puts>
	{
 8000236:	e7e9      	b.n	800020c <main+0x10>
 8000238:	08001b90 	.word	0x08001b90
 800023c:	08001b94 	.word	0x08001b94
 8000240:	08001b98 	.word	0x08001b98
 8000244:	08001b9c 	.word	0x08001b9c
 8000248:	08001ba0 	.word	0x08001ba0
 800024c:	08001ba4 	.word	0x08001ba4

08000250 <MX_GPIO_Init>:
	}

}

static void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();	// Enable AHB2 Bus for GPIOC
 8000256:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <MX_GPIO_Init+0x54>)
 8000258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025a:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <MX_GPIO_Init+0x54>)
 800025c:	f043 0304 	orr.w	r3, r3, #4
 8000260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000262:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <MX_GPIO_Init+0x54>)
 8000264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000266:	f003 0304 	and.w	r3, r3, #4
 800026a:	603b      	str	r3, [r7, #0]
 800026c:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]

	// Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF,
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800027c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000280:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_GPIO_Init+0x58>)
 8000284:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4619      	mov	r1, r3
 800028e:	4807      	ldr	r0, [pc, #28]	; (80002ac <MX_GPIO_Init+0x5c>)
 8000290:	f000 fab4 	bl	80007fc <HAL_GPIO_Init>

	// Enable NVIC EXTI line 13
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000294:	2028      	movs	r0, #40	; 0x28
 8000296:	f000 fa96 	bl	80007c6 <HAL_NVIC_EnableIRQ>
}
 800029a:	bf00      	nop
 800029c:	3718      	adds	r7, #24
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000
 80002a8:	10210000 	.word	0x10210000
 80002ac:	48000800 	.word	0x48000800

080002b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <HAL_MspInit+0x44>)
 80002b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002ba:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <HAL_MspInit+0x44>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6613      	str	r3, [r2, #96]	; 0x60
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <HAL_MspInit+0x44>)
 80002c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <HAL_MspInit+0x44>)
 80002d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002d2:	4a08      	ldr	r2, [pc, #32]	; (80002f4 <HAL_MspInit+0x44>)
 80002d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002d8:	6593      	str	r3, [r2, #88]	; 0x58
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <HAL_MspInit+0x44>)
 80002dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002e2:	603b      	str	r3, [r7, #0]
 80002e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000

080002f8 <NMI_Handler>:
/******************************************************************************/
/*           Cortex-M4 Processor Interruption and Exception Handlers          */ 
/******************************************************************************/

void NMI_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0

}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0
  while (1)
 800030a:	e7fe      	b.n	800030a <HardFault_Handler+0x4>

0800030c <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  while (1)
 8000310:	e7fe      	b.n	8000310 <MemManage_Handler+0x4>

08000312 <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0
  while (1)
 8000316:	e7fe      	b.n	8000316 <BusFault_Handler+0x4>

08000318 <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  while (1)
 800031c:	e7fe      	b.n	800031c <UsageFault_Handler+0x4>

0800031e <SVC_Handler>:
  {
  }
}

void SVC_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr

0800033a <PendSV_Handler>:

void PendSV_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0
}
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800034c:	f000 f932 	bl	80005b4 <HAL_IncTick>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <EXTI0_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/

void EXTI0_IRQHandler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000358:	2001      	movs	r0, #1
 800035a:	f000 fc13 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}

08000362 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000366:	2002      	movs	r0, #2
 8000368:	f000 fc0c 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}

08000370 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000374:	2004      	movs	r0, #4
 8000376:	f000 fc05 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}

0800037e <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000382:	2008      	movs	r0, #8
 8000384:	f000 fbfe 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}

0800038c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000390:	2010      	movs	r0, #16
 8000392:	f000 fbf7 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}

0800039a <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 800039a:	b580      	push	{r7, lr}
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800039e:	2020      	movs	r0, #32
 80003a0:	f000 fbf0 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80003a4:	2040      	movs	r0, #64	; 0x40
 80003a6:	f000 fbed 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80003aa:	2080      	movs	r0, #128	; 0x80
 80003ac:	f000 fbea 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80003b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003b4:	f000 fbe6 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}

080003bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	//printf("\t Interrupt \n");
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80003c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003c4:	480c      	ldr	r0, [pc, #48]	; (80003f8 <EXTI15_10_IRQHandler+0x3c>)
 80003c6:	f000 fbc3 	bl	8000b50 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80003ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80003ce:	f000 fbd9 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80003d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80003d6:	f000 fbd5 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80003da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80003de:	f000 fbd1 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80003e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80003e6:	f000 fbcd 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80003ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80003ee:	f000 fbc9 	bl	8000b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	48000400 	.word	0x48000400

080003fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void _sbrk(int incr)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000404:	4b10      	ldr	r3, [pc, #64]	; (8000448 <_sbrk+0x4c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d102      	bne.n	8000412 <_sbrk+0x16>
		heap_end = &end;
 800040c:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <_sbrk+0x4c>)
 800040e:	4a0f      	ldr	r2, [pc, #60]	; (800044c <_sbrk+0x50>)
 8000410:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <_sbrk+0x4c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <_sbrk+0x4c>)
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4413      	add	r3, r2
 8000420:	466a      	mov	r2, sp
 8000422:	4293      	cmp	r3, r2
 8000424:	d905      	bls.n	8000432 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000426:	f000 fe67 	bl	80010f8 <__errno>
 800042a:	4603      	mov	r3, r0
 800042c:	220c      	movs	r2, #12
 800042e:	601a      	str	r2, [r3, #0]
		return (void) -1;
 8000430:	e006      	b.n	8000440 <_sbrk+0x44>
	}

	heap_end += incr;
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <_sbrk+0x4c>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4413      	add	r3, r2
 800043a:	4a03      	ldr	r2, [pc, #12]	; (8000448 <_sbrk+0x4c>)
 800043c:	6013      	str	r3, [r2, #0]

	return (void) prev_heap_end;
 800043e:	bf00      	nop
}
 8000440:	3710      	adds	r7, #16
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000094 	.word	0x20000094
 800044c:	20000158 	.word	0x20000158

08000450 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000454:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <SystemInit+0x64>)
 8000456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800045a:	4a16      	ldr	r2, [pc, #88]	; (80004b4 <SystemInit+0x64>)
 800045c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <SystemInit+0x68>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a13      	ldr	r2, [pc, #76]	; (80004b8 <SystemInit+0x68>)
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <SystemInit+0x68>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <SystemInit+0x68>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a0f      	ldr	r2, [pc, #60]	; (80004b8 <SystemInit+0x68>)
 800047c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000480:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000484:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <SystemInit+0x68>)
 8000488:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800048c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <SystemInit+0x68>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a09      	ldr	r2, [pc, #36]	; (80004b8 <SystemInit+0x68>)
 8000494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000498:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800049a:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <SystemInit+0x68>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <SystemInit+0x64>)
 80004a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004a6:	609a      	str	r2, [r3, #8]
#endif
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e000ed00 	.word	0xe000ed00
 80004b8:	40021000 	.word	0x40021000

080004bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004c2:	e003      	b.n	80004cc <LoopCopyDataInit>

080004c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004ca:	3104      	adds	r1, #4

080004cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004cc:	480b      	ldr	r0, [pc, #44]	; (80004fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004d4:	d3f6      	bcc.n	80004c4 <CopyDataInit>
	ldr	r2, =_sbss
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <LoopForever+0x12>)
	b	LoopFillZerobss
 80004d8:	e002      	b.n	80004e0 <LoopFillZerobss>

080004da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004dc:	f842 3b04 	str.w	r3, [r2], #4

080004e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <LoopForever+0x16>)
	cmp	r2, r3
 80004e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004e4:	d3f9      	bcc.n	80004da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004e6:	f7ff ffb3 	bl	8000450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ea:	f000 ff01 	bl	80012f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004ee:	f7ff fe85 	bl	80001fc <main>

080004f2 <LoopForever>:

LoopForever:
    b LoopForever
 80004f2:	e7fe      	b.n	80004f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80004f8:	08001c30 	.word	0x08001c30
	ldr	r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000500:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8000504:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8000508:	20000158 	.word	0x20000158

0800050c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800050c:	e7fe      	b.n	800050c <ADC1_2_IRQHandler>

0800050e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000514:	2300      	movs	r3, #0
 8000516:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f92d 	bl	8000778 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800051e:	2000      	movs	r0, #0
 8000520:	f000 f80e 	bl	8000540 <HAL_InitTick>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800052a:	2301      	movs	r3, #1
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	e001      	b.n	8000534 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000530:	f7ff febe 	bl	80002b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000534:	79fb      	ldrb	r3, [r7, #7]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800054c:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <HAL_InitTick+0x68>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d022      	beq.n	800059a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_InitTick+0x6c>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <HAL_InitTick+0x68>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000560:	fbb1 f3f3 	udiv	r3, r1, r3
 8000564:	fbb2 f3f3 	udiv	r3, r2, r3
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f93a 	bl	80007e2 <HAL_SYSTICK_Config>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d10f      	bne.n	8000594 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b0f      	cmp	r3, #15
 8000578:	d809      	bhi.n	800058e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057a:	2200      	movs	r2, #0
 800057c:	6879      	ldr	r1, [r7, #4]
 800057e:	f04f 30ff 	mov.w	r0, #4294967295
 8000582:	f000 f904 	bl	800078e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_InitTick+0x70>)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	e007      	b.n	800059e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	e004      	b.n	800059e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	e001      	b.n	800059e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800059e:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000004 	.word	0x20000004

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_IncTick+0x1c>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_IncTick+0x20>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4413      	add	r3, r2
 80005c2:	4a03      	ldr	r2, [pc, #12]	; (80005d0 <HAL_IncTick+0x1c>)
 80005c4:	6013      	str	r3, [r2, #0]
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	20000098 	.word	0x20000098
 80005d4:	20000008 	.word	0x20000008

080005d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <__NVIC_SetPriorityGrouping+0x44>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f4:	4013      	ands	r3, r2
 80005f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060a:	4a04      	ldr	r2, [pc, #16]	; (800061c <__NVIC_SetPriorityGrouping+0x44>)
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	60d3      	str	r3, [r2, #12]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <__NVIC_GetPriorityGrouping+0x18>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	0a1b      	lsrs	r3, r3, #8
 800062a:	f003 0307 	and.w	r3, r3, #7
}
 800062e:	4618      	mov	r0, r3
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	2b00      	cmp	r3, #0
 800064c:	db0b      	blt.n	8000666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 021f 	and.w	r2, r3, #31
 8000654:	4907      	ldr	r1, [pc, #28]	; (8000674 <__NVIC_EnableIRQ+0x38>)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	095b      	lsrs	r3, r3, #5
 800065c:	2001      	movs	r0, #1
 800065e:	fa00 f202 	lsl.w	r2, r0, r2
 8000662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000e100 	.word	0xe000e100

08000678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	db0a      	blt.n	80006a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <__NVIC_SetPriority+0x4c>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a0:	e00a      	b.n	80006b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4908      	ldr	r1, [pc, #32]	; (80006c8 <__NVIC_SetPriority+0x50>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	3b04      	subs	r3, #4
 80006b0:	0112      	lsls	r2, r2, #4
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	440b      	add	r3, r1
 80006b6:	761a      	strb	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000e100 	.word	0xe000e100
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	f1c3 0307 	rsb	r3, r3, #7
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	bf28      	it	cs
 80006ea:	2304      	movcs	r3, #4
 80006ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3304      	adds	r3, #4
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d902      	bls.n	80006fc <NVIC_EncodePriority+0x30>
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3b03      	subs	r3, #3
 80006fa:	e000      	b.n	80006fe <NVIC_EncodePriority+0x32>
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	f04f 32ff 	mov.w	r2, #4294967295
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	43da      	mvns	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	401a      	ands	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000714:	f04f 31ff 	mov.w	r1, #4294967295
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	43d9      	mvns	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	4313      	orrs	r3, r2
         );
}
 8000726:	4618      	mov	r0, r3
 8000728:	3724      	adds	r7, #36	; 0x24
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000744:	d301      	bcc.n	800074a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000746:	2301      	movs	r3, #1
 8000748:	e00f      	b.n	800076a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <SysTick_Config+0x40>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000752:	210f      	movs	r1, #15
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f7ff ff8e 	bl	8000678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <SysTick_Config+0x40>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <SysTick_Config+0x40>)
 8000764:	2207      	movs	r2, #7
 8000766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	e000e010 	.word	0xe000e010

08000778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff ff29 	bl	80005d8 <__NVIC_SetPriorityGrouping>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b086      	sub	sp, #24
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
 800079a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007a0:	f7ff ff3e 	bl	8000620 <__NVIC_GetPriorityGrouping>
 80007a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	68b9      	ldr	r1, [r7, #8]
 80007aa:	6978      	ldr	r0, [r7, #20]
 80007ac:	f7ff ff8e 	bl	80006cc <NVIC_EncodePriority>
 80007b0:	4602      	mov	r2, r0
 80007b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff5d 	bl	8000678 <__NVIC_SetPriority>
}
 80007be:	bf00      	nop
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff31 	bl	800063c <__NVIC_EnableIRQ>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ffa2 	bl	8000734 <SysTick_Config>
 80007f0:	4603      	mov	r3, r0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080a:	e17f      	b.n	8000b0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	2101      	movs	r1, #1
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	fa01 f303 	lsl.w	r3, r1, r3
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	f000 8171 	beq.w	8000b06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d00b      	beq.n	8000844 <HAL_GPIO_Init+0x48>
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	2b02      	cmp	r3, #2
 8000832:	d007      	beq.n	8000844 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000838:	2b11      	cmp	r3, #17
 800083a:	d003      	beq.n	8000844 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	2b12      	cmp	r3, #18
 8000842:	d130      	bne.n	80008a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	2203      	movs	r2, #3
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	43db      	mvns	r3, r3
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	68da      	ldr	r2, [r3, #12]
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	4313      	orrs	r3, r2
 800086c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800087a:	2201      	movs	r2, #1
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	4013      	ands	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	091b      	lsrs	r3, r3, #4
 8000890:	f003 0201 	and.w	r2, r3, #1
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	4313      	orrs	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	f003 0303 	and.w	r3, r3, #3
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d118      	bne.n	80008e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008b8:	2201      	movs	r2, #1
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	43db      	mvns	r3, r3
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	f003 0201 	and.w	r2, r3, #1
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	4313      	orrs	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	2203      	movs	r2, #3
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	4013      	ands	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	4313      	orrs	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d003      	beq.n	8000924 <HAL_GPIO_Init+0x128>
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b12      	cmp	r3, #18
 8000922:	d123      	bne.n	800096c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	08da      	lsrs	r2, r3, #3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3208      	adds	r2, #8
 800092c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	f003 0307 	and.w	r3, r3, #7
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	220f      	movs	r2, #15
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	691a      	ldr	r2, [r3, #16]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4313      	orrs	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	08da      	lsrs	r2, r3, #3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3208      	adds	r2, #8
 8000966:	6939      	ldr	r1, [r7, #16]
 8000968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	2203      	movs	r2, #3
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4013      	ands	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 0203 	and.w	r2, r3, #3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4313      	orrs	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 80ac 	beq.w	8000b06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b5f      	ldr	r3, [pc, #380]	; (8000b2c <HAL_GPIO_Init+0x330>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b2:	4a5e      	ldr	r2, [pc, #376]	; (8000b2c <HAL_GPIO_Init+0x330>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ba:	4b5c      	ldr	r3, [pc, #368]	; (8000b2c <HAL_GPIO_Init+0x330>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009c6:	4a5a      	ldr	r2, [pc, #360]	; (8000b30 <HAL_GPIO_Init+0x334>)
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3302      	adds	r3, #2
 80009ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009f0:	d025      	beq.n	8000a3e <HAL_GPIO_Init+0x242>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4f      	ldr	r2, [pc, #316]	; (8000b34 <HAL_GPIO_Init+0x338>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d01f      	beq.n	8000a3a <HAL_GPIO_Init+0x23e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4e      	ldr	r2, [pc, #312]	; (8000b38 <HAL_GPIO_Init+0x33c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d019      	beq.n	8000a36 <HAL_GPIO_Init+0x23a>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4d      	ldr	r2, [pc, #308]	; (8000b3c <HAL_GPIO_Init+0x340>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d013      	beq.n	8000a32 <HAL_GPIO_Init+0x236>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4c      	ldr	r2, [pc, #304]	; (8000b40 <HAL_GPIO_Init+0x344>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d00d      	beq.n	8000a2e <HAL_GPIO_Init+0x232>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4b      	ldr	r2, [pc, #300]	; (8000b44 <HAL_GPIO_Init+0x348>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d007      	beq.n	8000a2a <HAL_GPIO_Init+0x22e>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4a      	ldr	r2, [pc, #296]	; (8000b48 <HAL_GPIO_Init+0x34c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_GPIO_Init+0x22a>
 8000a22:	2306      	movs	r3, #6
 8000a24:	e00c      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a26:	2307      	movs	r3, #7
 8000a28:	e00a      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	e008      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a2e:	2304      	movs	r3, #4
 8000a30:	e006      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a32:	2303      	movs	r3, #3
 8000a34:	e004      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a36:	2302      	movs	r3, #2
 8000a38:	e002      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_Init+0x244>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	f002 0203 	and.w	r2, r2, #3
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	4093      	lsls	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a50:	4937      	ldr	r1, [pc, #220]	; (8000b30 <HAL_GPIO_Init+0x334>)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3302      	adds	r3, #2
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a5e:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a82:	4a32      	ldr	r2, [pc, #200]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a88:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000aac:	4a27      	ldr	r2, [pc, #156]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ad6:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <HAL_GPIO_Init+0x350>)
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa22 f303 	lsr.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f47f ae78 	bne.w	800080c <HAL_GPIO_Init+0x10>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	371c      	adds	r7, #28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010000 	.word	0x40010000
 8000b34:	48000400 	.word	0x48000400
 8000b38:	48000800 	.word	0x48000800
 8000b3c:	48000c00 	.word	0x48000c00
 8000b40:	48001000 	.word	0x48001000
 8000b44:	48001400 	.word	0x48001400
 8000b48:	48001800 	.word	0x48001800
 8000b4c:	40010400 	.word	0x40010400

08000b50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	695a      	ldr	r2, [r3, #20]
 8000b60:	887b      	ldrh	r3, [r7, #2]
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b68:	887a      	ldrh	r2, [r7, #2]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000b6e:	e002      	b.n	8000b76 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b70:	887a      	ldrh	r2, [r7, #2]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	619a      	str	r2, [r3, #24]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b90:	695a      	ldr	r2, [r3, #20]
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	4013      	ands	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d006      	beq.n	8000ba8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fb18 	bl	80001d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40010400 	.word	0x40010400

08000bb4 <findslot>:
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <findslot+0x2c>)
 8000bb6:	b510      	push	{r4, lr}
 8000bb8:	4604      	mov	r4, r0
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	b118      	cbz	r0, 8000bc6 <findslot+0x12>
 8000bbe:	6983      	ldr	r3, [r0, #24]
 8000bc0:	b90b      	cbnz	r3, 8000bc6 <findslot+0x12>
 8000bc2:	f000 faf7 	bl	80011b4 <__sinit>
 8000bc6:	2c13      	cmp	r4, #19
 8000bc8:	d807      	bhi.n	8000bda <findslot+0x26>
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <findslot+0x30>)
 8000bcc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8000bd0:	3201      	adds	r2, #1
 8000bd2:	d002      	beq.n	8000bda <findslot+0x26>
 8000bd4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	2000      	movs	r0, #0
 8000bdc:	e7fc      	b.n	8000bd8 <findslot+0x24>
 8000bde:	bf00      	nop
 8000be0:	20000014 	.word	0x20000014
 8000be4:	200000a8 	.word	0x200000a8

08000be8 <error>:
 8000be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bea:	4604      	mov	r4, r0
 8000bec:	f000 fa84 	bl	80010f8 <__errno>
 8000bf0:	2613      	movs	r6, #19
 8000bf2:	4605      	mov	r5, r0
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	beab      	bkpt	0x00ab
 8000bfc:	4606      	mov	r6, r0
 8000bfe:	602e      	str	r6, [r5, #0]
 8000c00:	4620      	mov	r0, r4
 8000c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c04 <checkerror>:
 8000c04:	1c43      	adds	r3, r0, #1
 8000c06:	d101      	bne.n	8000c0c <checkerror+0x8>
 8000c08:	f7ff bfee 	b.w	8000be8 <error>
 8000c0c:	4770      	bx	lr

08000c0e <_swiread>:
 8000c0e:	b530      	push	{r4, r5, lr}
 8000c10:	b085      	sub	sp, #20
 8000c12:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000c16:	9203      	str	r2, [sp, #12]
 8000c18:	2406      	movs	r4, #6
 8000c1a:	ad01      	add	r5, sp, #4
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	beab      	bkpt	0x00ab
 8000c22:	4604      	mov	r4, r0
 8000c24:	4620      	mov	r0, r4
 8000c26:	f7ff ffed 	bl	8000c04 <checkerror>
 8000c2a:	b005      	add	sp, #20
 8000c2c:	bd30      	pop	{r4, r5, pc}

08000c2e <_read>:
 8000c2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c30:	4615      	mov	r5, r2
 8000c32:	9101      	str	r1, [sp, #4]
 8000c34:	f7ff ffbe 	bl	8000bb4 <findslot>
 8000c38:	9901      	ldr	r1, [sp, #4]
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	b938      	cbnz	r0, 8000c4e <_read+0x20>
 8000c3e:	f000 fa5b 	bl	80010f8 <__errno>
 8000c42:	2309      	movs	r3, #9
 8000c44:	6003      	str	r3, [r0, #0]
 8000c46:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4a:	b003      	add	sp, #12
 8000c4c:	bd30      	pop	{r4, r5, pc}
 8000c4e:	6800      	ldr	r0, [r0, #0]
 8000c50:	462a      	mov	r2, r5
 8000c52:	f7ff ffdc 	bl	8000c0e <_swiread>
 8000c56:	1c43      	adds	r3, r0, #1
 8000c58:	d0f7      	beq.n	8000c4a <_read+0x1c>
 8000c5a:	6863      	ldr	r3, [r4, #4]
 8000c5c:	1a2a      	subs	r2, r5, r0
 8000c5e:	4413      	add	r3, r2
 8000c60:	6063      	str	r3, [r4, #4]
 8000c62:	4610      	mov	r0, r2
 8000c64:	e7f1      	b.n	8000c4a <_read+0x1c>

08000c66 <_swilseek>:
 8000c66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c68:	460c      	mov	r4, r1
 8000c6a:	4616      	mov	r6, r2
 8000c6c:	f7ff ffa2 	bl	8000bb4 <findslot>
 8000c70:	4605      	mov	r5, r0
 8000c72:	b940      	cbnz	r0, 8000c86 <_swilseek+0x20>
 8000c74:	f000 fa40 	bl	80010f8 <__errno>
 8000c78:	2309      	movs	r3, #9
 8000c7a:	6003      	str	r3, [r0, #0]
 8000c7c:	f04f 34ff 	mov.w	r4, #4294967295
 8000c80:	4620      	mov	r0, r4
 8000c82:	b003      	add	sp, #12
 8000c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c86:	2e02      	cmp	r6, #2
 8000c88:	d903      	bls.n	8000c92 <_swilseek+0x2c>
 8000c8a:	f000 fa35 	bl	80010f8 <__errno>
 8000c8e:	2316      	movs	r3, #22
 8000c90:	e7f3      	b.n	8000c7a <_swilseek+0x14>
 8000c92:	2e01      	cmp	r6, #1
 8000c94:	d112      	bne.n	8000cbc <_swilseek+0x56>
 8000c96:	6843      	ldr	r3, [r0, #4]
 8000c98:	18e4      	adds	r4, r4, r3
 8000c9a:	d4f6      	bmi.n	8000c8a <_swilseek+0x24>
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	260a      	movs	r6, #10
 8000ca0:	e9cd 3400 	strd	r3, r4, [sp]
 8000ca4:	466f      	mov	r7, sp
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4639      	mov	r1, r7
 8000caa:	beab      	bkpt	0x00ab
 8000cac:	4606      	mov	r6, r0
 8000cae:	4630      	mov	r0, r6
 8000cb0:	f7ff ffa8 	bl	8000c04 <checkerror>
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	dbe1      	blt.n	8000c7c <_swilseek+0x16>
 8000cb8:	606c      	str	r4, [r5, #4]
 8000cba:	e7e1      	b.n	8000c80 <_swilseek+0x1a>
 8000cbc:	2e02      	cmp	r6, #2
 8000cbe:	d1ed      	bne.n	8000c9c <_swilseek+0x36>
 8000cc0:	6803      	ldr	r3, [r0, #0]
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	260c      	movs	r6, #12
 8000cc6:	466f      	mov	r7, sp
 8000cc8:	4630      	mov	r0, r6
 8000cca:	4639      	mov	r1, r7
 8000ccc:	beab      	bkpt	0x00ab
 8000cce:	4606      	mov	r6, r0
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	f7ff ff97 	bl	8000c04 <checkerror>
 8000cd6:	1c43      	adds	r3, r0, #1
 8000cd8:	d0d0      	beq.n	8000c7c <_swilseek+0x16>
 8000cda:	4404      	add	r4, r0
 8000cdc:	e7de      	b.n	8000c9c <_swilseek+0x36>

08000cde <_lseek>:
 8000cde:	f7ff bfc2 	b.w	8000c66 <_swilseek>

08000ce2 <_swiwrite>:
 8000ce2:	b530      	push	{r4, r5, lr}
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000cea:	9203      	str	r2, [sp, #12]
 8000cec:	2405      	movs	r4, #5
 8000cee:	ad01      	add	r5, sp, #4
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	beab      	bkpt	0x00ab
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f7ff ff83 	bl	8000c04 <checkerror>
 8000cfe:	b005      	add	sp, #20
 8000d00:	bd30      	pop	{r4, r5, pc}

08000d02 <_write>:
 8000d02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d04:	4615      	mov	r5, r2
 8000d06:	9101      	str	r1, [sp, #4]
 8000d08:	f7ff ff54 	bl	8000bb4 <findslot>
 8000d0c:	9901      	ldr	r1, [sp, #4]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	b930      	cbnz	r0, 8000d20 <_write+0x1e>
 8000d12:	f000 f9f1 	bl	80010f8 <__errno>
 8000d16:	2309      	movs	r3, #9
 8000d18:	6003      	str	r3, [r0, #0]
 8000d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1e:	e012      	b.n	8000d46 <_write+0x44>
 8000d20:	6800      	ldr	r0, [r0, #0]
 8000d22:	462a      	mov	r2, r5
 8000d24:	f7ff ffdd 	bl	8000ce2 <_swiwrite>
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	dbf6      	blt.n	8000d1a <_write+0x18>
 8000d2c:	6862      	ldr	r2, [r4, #4]
 8000d2e:	1a2b      	subs	r3, r5, r0
 8000d30:	441a      	add	r2, r3
 8000d32:	42a8      	cmp	r0, r5
 8000d34:	6062      	str	r2, [r4, #4]
 8000d36:	d105      	bne.n	8000d44 <_write+0x42>
 8000d38:	2000      	movs	r0, #0
 8000d3a:	b003      	add	sp, #12
 8000d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d40:	f7ff bf52 	b.w	8000be8 <error>
 8000d44:	4618      	mov	r0, r3
 8000d46:	b003      	add	sp, #12
 8000d48:	bd30      	pop	{r4, r5, pc}

08000d4a <_swiclose>:
 8000d4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d4c:	2402      	movs	r4, #2
 8000d4e:	9001      	str	r0, [sp, #4]
 8000d50:	ad01      	add	r5, sp, #4
 8000d52:	4620      	mov	r0, r4
 8000d54:	4629      	mov	r1, r5
 8000d56:	beab      	bkpt	0x00ab
 8000d58:	4604      	mov	r4, r0
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f7ff ff52 	bl	8000c04 <checkerror>
 8000d60:	b003      	add	sp, #12
 8000d62:	bd30      	pop	{r4, r5, pc}

08000d64 <_close>:
 8000d64:	b538      	push	{r3, r4, r5, lr}
 8000d66:	4605      	mov	r5, r0
 8000d68:	f7ff ff24 	bl	8000bb4 <findslot>
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	b930      	cbnz	r0, 8000d7e <_close+0x1a>
 8000d70:	f000 f9c2 	bl	80010f8 <__errno>
 8000d74:	2309      	movs	r3, #9
 8000d76:	6003      	str	r3, [r0, #0]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	bd38      	pop	{r3, r4, r5, pc}
 8000d7e:	3d01      	subs	r5, #1
 8000d80:	2d01      	cmp	r5, #1
 8000d82:	d809      	bhi.n	8000d98 <_close+0x34>
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <_close+0x48>)
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d104      	bne.n	8000d98 <_close+0x34>
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	6003      	str	r3, [r0, #0]
 8000d94:	2000      	movs	r0, #0
 8000d96:	e7f1      	b.n	8000d7c <_close+0x18>
 8000d98:	6820      	ldr	r0, [r4, #0]
 8000d9a:	f7ff ffd6 	bl	8000d4a <_swiclose>
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	d1ec      	bne.n	8000d7c <_close+0x18>
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	6023      	str	r3, [r4, #0]
 8000da8:	e7e8      	b.n	8000d7c <_close+0x18>
 8000daa:	bf00      	nop
 8000dac:	200000a8 	.word	0x200000a8

08000db0 <_swistat>:
 8000db0:	b570      	push	{r4, r5, r6, lr}
 8000db2:	460c      	mov	r4, r1
 8000db4:	f7ff fefe 	bl	8000bb4 <findslot>
 8000db8:	4605      	mov	r5, r0
 8000dba:	b930      	cbnz	r0, 8000dca <_swistat+0x1a>
 8000dbc:	f000 f99c 	bl	80010f8 <__errno>
 8000dc0:	2309      	movs	r3, #9
 8000dc2:	6003      	str	r3, [r0, #0]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	bd70      	pop	{r4, r5, r6, pc}
 8000dca:	6863      	ldr	r3, [r4, #4]
 8000dcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd0:	6063      	str	r3, [r4, #4]
 8000dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd6:	64a3      	str	r3, [r4, #72]	; 0x48
 8000dd8:	260c      	movs	r6, #12
 8000dda:	4630      	mov	r0, r6
 8000ddc:	4629      	mov	r1, r5
 8000dde:	beab      	bkpt	0x00ab
 8000de0:	4605      	mov	r5, r0
 8000de2:	4628      	mov	r0, r5
 8000de4:	f7ff ff0e 	bl	8000c04 <checkerror>
 8000de8:	1c43      	adds	r3, r0, #1
 8000dea:	bf1c      	itt	ne
 8000dec:	6120      	strne	r0, [r4, #16]
 8000dee:	2000      	movne	r0, #0
 8000df0:	e7ea      	b.n	8000dc8 <_swistat+0x18>

08000df2 <_fstat>:
 8000df2:	460b      	mov	r3, r1
 8000df4:	b510      	push	{r4, lr}
 8000df6:	2100      	movs	r1, #0
 8000df8:	4604      	mov	r4, r0
 8000dfa:	2258      	movs	r2, #88	; 0x58
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 fa9e 	bl	800133e <memset>
 8000e02:	4601      	mov	r1, r0
 8000e04:	4620      	mov	r0, r4
 8000e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e0a:	f7ff bfd1 	b.w	8000db0 <_swistat>

08000e0e <_stat>:
 8000e0e:	b538      	push	{r3, r4, r5, lr}
 8000e10:	460d      	mov	r5, r1
 8000e12:	4604      	mov	r4, r0
 8000e14:	2258      	movs	r2, #88	; 0x58
 8000e16:	2100      	movs	r1, #0
 8000e18:	4628      	mov	r0, r5
 8000e1a:	f000 fa90 	bl	800133e <memset>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	2100      	movs	r1, #0
 8000e22:	f000 f811 	bl	8000e48 <_swiopen>
 8000e26:	1c43      	adds	r3, r0, #1
 8000e28:	4604      	mov	r4, r0
 8000e2a:	d00b      	beq.n	8000e44 <_stat+0x36>
 8000e2c:	686b      	ldr	r3, [r5, #4]
 8000e2e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8000e32:	606b      	str	r3, [r5, #4]
 8000e34:	4629      	mov	r1, r5
 8000e36:	f7ff ffbb 	bl	8000db0 <_swistat>
 8000e3a:	4605      	mov	r5, r0
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f7ff ff91 	bl	8000d64 <_close>
 8000e42:	462c      	mov	r4, r5
 8000e44:	4620      	mov	r0, r4
 8000e46:	bd38      	pop	{r3, r4, r5, pc}

08000e48 <_swiopen>:
 8000e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e4c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8000ef8 <_swiopen+0xb0>
 8000e50:	b097      	sub	sp, #92	; 0x5c
 8000e52:	4607      	mov	r7, r0
 8000e54:	460e      	mov	r6, r1
 8000e56:	2500      	movs	r5, #0
 8000e58:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8000e5c:	1c61      	adds	r1, r4, #1
 8000e5e:	d037      	beq.n	8000ed0 <_swiopen+0x88>
 8000e60:	3501      	adds	r5, #1
 8000e62:	2d14      	cmp	r5, #20
 8000e64:	d1f8      	bne.n	8000e58 <_swiopen+0x10>
 8000e66:	f000 f947 	bl	80010f8 <__errno>
 8000e6a:	2318      	movs	r3, #24
 8000e6c:	6003      	str	r3, [r0, #0]
 8000e6e:	f04f 34ff 	mov.w	r4, #4294967295
 8000e72:	e03d      	b.n	8000ef0 <_swiopen+0xa8>
 8000e74:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8000e78:	f240 6301 	movw	r3, #1537	; 0x601
 8000e7c:	07b2      	lsls	r2, r6, #30
 8000e7e:	bf48      	it	mi
 8000e80:	f044 0402 	orrmi.w	r4, r4, #2
 8000e84:	421e      	tst	r6, r3
 8000e86:	bf18      	it	ne
 8000e88:	f044 0404 	orrne.w	r4, r4, #4
 8000e8c:	0733      	lsls	r3, r6, #28
 8000e8e:	bf48      	it	mi
 8000e90:	f024 0404 	bicmi.w	r4, r4, #4
 8000e94:	4638      	mov	r0, r7
 8000e96:	bf48      	it	mi
 8000e98:	f044 0408 	orrmi.w	r4, r4, #8
 8000e9c:	9700      	str	r7, [sp, #0]
 8000e9e:	f7ff f993 	bl	80001c8 <strlen>
 8000ea2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8000ea6:	2401      	movs	r4, #1
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	4649      	mov	r1, r9
 8000eac:	beab      	bkpt	0x00ab
 8000eae:	4604      	mov	r4, r0
 8000eb0:	2c00      	cmp	r4, #0
 8000eb2:	db08      	blt.n	8000ec6 <_swiopen+0x7e>
 8000eb4:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8000eb8:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c8 3004 	str.w	r3, [r8, #4]
 8000ec2:	462c      	mov	r4, r5
 8000ec4:	e014      	b.n	8000ef0 <_swiopen+0xa8>
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	f7ff fe8e 	bl	8000be8 <error>
 8000ecc:	4604      	mov	r4, r0
 8000ece:	e00f      	b.n	8000ef0 <_swiopen+0xa8>
 8000ed0:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8000ed4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8000ed8:	46e9      	mov	r9, sp
 8000eda:	d1cb      	bne.n	8000e74 <_swiopen+0x2c>
 8000edc:	4649      	mov	r1, r9
 8000ede:	4638      	mov	r0, r7
 8000ee0:	f7ff ff95 	bl	8000e0e <_stat>
 8000ee4:	3001      	adds	r0, #1
 8000ee6:	d0c5      	beq.n	8000e74 <_swiopen+0x2c>
 8000ee8:	f000 f906 	bl	80010f8 <__errno>
 8000eec:	2311      	movs	r3, #17
 8000eee:	6003      	str	r3, [r0, #0]
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	b017      	add	sp, #92	; 0x5c
 8000ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ef8:	200000a8 	.word	0x200000a8

08000efc <_get_semihosting_exts>:
 8000efc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000f00:	4606      	mov	r6, r0
 8000f02:	460f      	mov	r7, r1
 8000f04:	482a      	ldr	r0, [pc, #168]	; (8000fb0 <_get_semihosting_exts+0xb4>)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4615      	mov	r5, r2
 8000f0a:	f7ff ff9d 	bl	8000e48 <_swiopen>
 8000f0e:	462a      	mov	r2, r5
 8000f10:	4604      	mov	r4, r0
 8000f12:	2100      	movs	r1, #0
 8000f14:	4630      	mov	r0, r6
 8000f16:	f000 fa12 	bl	800133e <memset>
 8000f1a:	1c63      	adds	r3, r4, #1
 8000f1c:	d016      	beq.n	8000f4c <_get_semihosting_exts+0x50>
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f7ff fe48 	bl	8000bb4 <findslot>
 8000f24:	f04f 090c 	mov.w	r9, #12
 8000f28:	4680      	mov	r8, r0
 8000f2a:	4648      	mov	r0, r9
 8000f2c:	4641      	mov	r1, r8
 8000f2e:	beab      	bkpt	0x00ab
 8000f30:	4680      	mov	r8, r0
 8000f32:	4640      	mov	r0, r8
 8000f34:	f7ff fe66 	bl	8000c04 <checkerror>
 8000f38:	2803      	cmp	r0, #3
 8000f3a:	dd02      	ble.n	8000f42 <_get_semihosting_exts+0x46>
 8000f3c:	1ec3      	subs	r3, r0, #3
 8000f3e:	42ab      	cmp	r3, r5
 8000f40:	dc08      	bgt.n	8000f54 <_get_semihosting_exts+0x58>
 8000f42:	4620      	mov	r0, r4
 8000f44:	f7ff ff0e 	bl	8000d64 <_close>
 8000f48:	f04f 34ff 	mov.w	r4, #4294967295
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	b003      	add	sp, #12
 8000f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f54:	2204      	movs	r2, #4
 8000f56:	eb0d 0102 	add.w	r1, sp, r2
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f7ff fe67 	bl	8000c2e <_read>
 8000f60:	2803      	cmp	r0, #3
 8000f62:	ddee      	ble.n	8000f42 <_get_semihosting_exts+0x46>
 8000f64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f68:	2b53      	cmp	r3, #83	; 0x53
 8000f6a:	d1ea      	bne.n	8000f42 <_get_semihosting_exts+0x46>
 8000f6c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000f70:	2b48      	cmp	r3, #72	; 0x48
 8000f72:	d1e6      	bne.n	8000f42 <_get_semihosting_exts+0x46>
 8000f74:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000f78:	2b46      	cmp	r3, #70	; 0x46
 8000f7a:	d1e2      	bne.n	8000f42 <_get_semihosting_exts+0x46>
 8000f7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000f80:	2b42      	cmp	r3, #66	; 0x42
 8000f82:	d1de      	bne.n	8000f42 <_get_semihosting_exts+0x46>
 8000f84:	2201      	movs	r2, #1
 8000f86:	4639      	mov	r1, r7
 8000f88:	4620      	mov	r0, r4
 8000f8a:	f7ff fe6c 	bl	8000c66 <_swilseek>
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	dbd7      	blt.n	8000f42 <_get_semihosting_exts+0x46>
 8000f92:	462a      	mov	r2, r5
 8000f94:	4631      	mov	r1, r6
 8000f96:	4620      	mov	r0, r4
 8000f98:	f7ff fe49 	bl	8000c2e <_read>
 8000f9c:	4605      	mov	r5, r0
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f7ff fee0 	bl	8000d64 <_close>
 8000fa4:	4628      	mov	r0, r5
 8000fa6:	f7ff fe2d 	bl	8000c04 <checkerror>
 8000faa:	4604      	mov	r4, r0
 8000fac:	e7ce      	b.n	8000f4c <_get_semihosting_exts+0x50>
 8000fae:	bf00      	nop
 8000fb0:	08001ba7 	.word	0x08001ba7

08000fb4 <initialise_semihosting_exts>:
 8000fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000fb6:	4d0a      	ldr	r5, [pc, #40]	; (8000fe0 <initialise_semihosting_exts+0x2c>)
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	; (8000fe4 <initialise_semihosting_exts+0x30>)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	a801      	add	r0, sp, #4
 8000fc0:	6029      	str	r1, [r5, #0]
 8000fc2:	6022      	str	r2, [r4, #0]
 8000fc4:	f7ff ff9a 	bl	8000efc <_get_semihosting_exts>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	dd07      	ble.n	8000fdc <initialise_semihosting_exts+0x28>
 8000fcc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000fd0:	f003 0201 	and.w	r2, r3, #1
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	602a      	str	r2, [r5, #0]
 8000fda:	6023      	str	r3, [r4, #0]
 8000fdc:	b003      	add	sp, #12
 8000fde:	bd30      	pop	{r4, r5, pc}
 8000fe0:	2000000c 	.word	0x2000000c
 8000fe4:	20000010 	.word	0x20000010

08000fe8 <_has_ext_stdout_stderr>:
 8000fe8:	b510      	push	{r4, lr}
 8000fea:	4c04      	ldr	r4, [pc, #16]	; (8000ffc <_has_ext_stdout_stderr+0x14>)
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	da01      	bge.n	8000ff6 <_has_ext_stdout_stderr+0xe>
 8000ff2:	f7ff ffdf 	bl	8000fb4 <initialise_semihosting_exts>
 8000ff6:	6820      	ldr	r0, [r4, #0]
 8000ff8:	bd10      	pop	{r4, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000010 	.word	0x20000010

08001000 <initialise_monitor_handles>:
 8001000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001004:	b085      	sub	sp, #20
 8001006:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80010b8 <initialise_monitor_handles+0xb8>
 800100a:	f8cd 9004 	str.w	r9, [sp, #4]
 800100e:	2303      	movs	r3, #3
 8001010:	2400      	movs	r4, #0
 8001012:	9303      	str	r3, [sp, #12]
 8001014:	af01      	add	r7, sp, #4
 8001016:	9402      	str	r4, [sp, #8]
 8001018:	2501      	movs	r5, #1
 800101a:	4628      	mov	r0, r5
 800101c:	4639      	mov	r1, r7
 800101e:	beab      	bkpt	0x00ab
 8001020:	4605      	mov	r5, r0
 8001022:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80010bc <initialise_monitor_handles+0xbc>
 8001026:	4623      	mov	r3, r4
 8001028:	4c20      	ldr	r4, [pc, #128]	; (80010ac <initialise_monitor_handles+0xac>)
 800102a:	f8c8 5000 	str.w	r5, [r8]
 800102e:	f04f 32ff 	mov.w	r2, #4294967295
 8001032:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001036:	3301      	adds	r3, #1
 8001038:	2b14      	cmp	r3, #20
 800103a:	d1fa      	bne.n	8001032 <initialise_monitor_handles+0x32>
 800103c:	f7ff ffd4 	bl	8000fe8 <_has_ext_stdout_stderr>
 8001040:	4d1b      	ldr	r5, [pc, #108]	; (80010b0 <initialise_monitor_handles+0xb0>)
 8001042:	b1d0      	cbz	r0, 800107a <initialise_monitor_handles+0x7a>
 8001044:	f04f 0a03 	mov.w	sl, #3
 8001048:	2304      	movs	r3, #4
 800104a:	f8cd 9004 	str.w	r9, [sp, #4]
 800104e:	2601      	movs	r6, #1
 8001050:	f8cd a00c 	str.w	sl, [sp, #12]
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	4630      	mov	r0, r6
 8001058:	4639      	mov	r1, r7
 800105a:	beab      	bkpt	0x00ab
 800105c:	4683      	mov	fp, r0
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <initialise_monitor_handles+0xb4>)
 8001060:	f8cd 9004 	str.w	r9, [sp, #4]
 8001064:	f8c3 b000 	str.w	fp, [r3]
 8001068:	2308      	movs	r3, #8
 800106a:	f8cd a00c 	str.w	sl, [sp, #12]
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	4630      	mov	r0, r6
 8001072:	4639      	mov	r1, r7
 8001074:	beab      	bkpt	0x00ab
 8001076:	4606      	mov	r6, r0
 8001078:	602e      	str	r6, [r5, #0]
 800107a:	682b      	ldr	r3, [r5, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	bf02      	ittt	eq
 8001080:	4b0c      	ldreq	r3, [pc, #48]	; (80010b4 <initialise_monitor_handles+0xb4>)
 8001082:	681b      	ldreq	r3, [r3, #0]
 8001084:	602b      	streq	r3, [r5, #0]
 8001086:	2600      	movs	r6, #0
 8001088:	f8d8 3000 	ldr.w	r3, [r8]
 800108c:	6023      	str	r3, [r4, #0]
 800108e:	6066      	str	r6, [r4, #4]
 8001090:	f7ff ffaa 	bl	8000fe8 <_has_ext_stdout_stderr>
 8001094:	b130      	cbz	r0, 80010a4 <initialise_monitor_handles+0xa4>
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <initialise_monitor_handles+0xb4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800109e:	682b      	ldr	r3, [r5, #0]
 80010a0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80010a4:	b005      	add	sp, #20
 80010a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010aa:	bf00      	nop
 80010ac:	200000a8 	.word	0x200000a8
 80010b0:	2000009c 	.word	0x2000009c
 80010b4:	200000a4 	.word	0x200000a4
 80010b8:	08001bbd 	.word	0x08001bbd
 80010bc:	200000a0 	.word	0x200000a0

080010c0 <_isatty>:
 80010c0:	b570      	push	{r4, r5, r6, lr}
 80010c2:	f7ff fd77 	bl	8000bb4 <findslot>
 80010c6:	2509      	movs	r5, #9
 80010c8:	4604      	mov	r4, r0
 80010ca:	b920      	cbnz	r0, 80010d6 <_isatty+0x16>
 80010cc:	f000 f814 	bl	80010f8 <__errno>
 80010d0:	6005      	str	r5, [r0, #0]
 80010d2:	4620      	mov	r0, r4
 80010d4:	bd70      	pop	{r4, r5, r6, pc}
 80010d6:	4628      	mov	r0, r5
 80010d8:	4621      	mov	r1, r4
 80010da:	beab      	bkpt	0x00ab
 80010dc:	4604      	mov	r4, r0
 80010de:	2c01      	cmp	r4, #1
 80010e0:	d0f7      	beq.n	80010d2 <_isatty+0x12>
 80010e2:	f000 f809 	bl	80010f8 <__errno>
 80010e6:	2400      	movs	r4, #0
 80010e8:	4605      	mov	r5, r0
 80010ea:	2613      	movs	r6, #19
 80010ec:	4630      	mov	r0, r6
 80010ee:	4621      	mov	r1, r4
 80010f0:	beab      	bkpt	0x00ab
 80010f2:	4606      	mov	r6, r0
 80010f4:	602e      	str	r6, [r5, #0]
 80010f6:	e7ec      	b.n	80010d2 <_isatty+0x12>

080010f8 <__errno>:
 80010f8:	4b01      	ldr	r3, [pc, #4]	; (8001100 <__errno+0x8>)
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000014 	.word	0x20000014

08001104 <std>:
 8001104:	2300      	movs	r3, #0
 8001106:	b510      	push	{r4, lr}
 8001108:	4604      	mov	r4, r0
 800110a:	e9c0 3300 	strd	r3, r3, [r0]
 800110e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001112:	6083      	str	r3, [r0, #8]
 8001114:	8181      	strh	r1, [r0, #12]
 8001116:	6643      	str	r3, [r0, #100]	; 0x64
 8001118:	81c2      	strh	r2, [r0, #14]
 800111a:	6183      	str	r3, [r0, #24]
 800111c:	4619      	mov	r1, r3
 800111e:	2208      	movs	r2, #8
 8001120:	305c      	adds	r0, #92	; 0x5c
 8001122:	f000 f90c 	bl	800133e <memset>
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <std+0x38>)
 8001128:	6263      	str	r3, [r4, #36]	; 0x24
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <std+0x3c>)
 800112c:	62a3      	str	r3, [r4, #40]	; 0x28
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <std+0x40>)
 8001130:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <std+0x44>)
 8001134:	6224      	str	r4, [r4, #32]
 8001136:	6323      	str	r3, [r4, #48]	; 0x30
 8001138:	bd10      	pop	{r4, pc}
 800113a:	bf00      	nop
 800113c:	08001585 	.word	0x08001585
 8001140:	080015a7 	.word	0x080015a7
 8001144:	080015df 	.word	0x080015df
 8001148:	08001603 	.word	0x08001603

0800114c <_cleanup_r>:
 800114c:	4901      	ldr	r1, [pc, #4]	; (8001154 <_cleanup_r+0x8>)
 800114e:	f000 b8af 	b.w	80012b0 <_fwalk_reent>
 8001152:	bf00      	nop
 8001154:	080018dd 	.word	0x080018dd

08001158 <__sfmoreglue>:
 8001158:	b570      	push	{r4, r5, r6, lr}
 800115a:	2268      	movs	r2, #104	; 0x68
 800115c:	1e4d      	subs	r5, r1, #1
 800115e:	4355      	muls	r5, r2
 8001160:	460e      	mov	r6, r1
 8001162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001166:	f000 f913 	bl	8001390 <_malloc_r>
 800116a:	4604      	mov	r4, r0
 800116c:	b140      	cbz	r0, 8001180 <__sfmoreglue+0x28>
 800116e:	2100      	movs	r1, #0
 8001170:	e9c0 1600 	strd	r1, r6, [r0]
 8001174:	300c      	adds	r0, #12
 8001176:	60a0      	str	r0, [r4, #8]
 8001178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800117c:	f000 f8df 	bl	800133e <memset>
 8001180:	4620      	mov	r0, r4
 8001182:	bd70      	pop	{r4, r5, r6, pc}

08001184 <__sfp_lock_acquire>:
 8001184:	4801      	ldr	r0, [pc, #4]	; (800118c <__sfp_lock_acquire+0x8>)
 8001186:	f000 b8d8 	b.w	800133a <__retarget_lock_acquire_recursive>
 800118a:	bf00      	nop
 800118c:	20000149 	.word	0x20000149

08001190 <__sfp_lock_release>:
 8001190:	4801      	ldr	r0, [pc, #4]	; (8001198 <__sfp_lock_release+0x8>)
 8001192:	f000 b8d3 	b.w	800133c <__retarget_lock_release_recursive>
 8001196:	bf00      	nop
 8001198:	20000149 	.word	0x20000149

0800119c <__sinit_lock_acquire>:
 800119c:	4801      	ldr	r0, [pc, #4]	; (80011a4 <__sinit_lock_acquire+0x8>)
 800119e:	f000 b8cc 	b.w	800133a <__retarget_lock_acquire_recursive>
 80011a2:	bf00      	nop
 80011a4:	2000014a 	.word	0x2000014a

080011a8 <__sinit_lock_release>:
 80011a8:	4801      	ldr	r0, [pc, #4]	; (80011b0 <__sinit_lock_release+0x8>)
 80011aa:	f000 b8c7 	b.w	800133c <__retarget_lock_release_recursive>
 80011ae:	bf00      	nop
 80011b0:	2000014a 	.word	0x2000014a

080011b4 <__sinit>:
 80011b4:	b510      	push	{r4, lr}
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff fff0 	bl	800119c <__sinit_lock_acquire>
 80011bc:	69a3      	ldr	r3, [r4, #24]
 80011be:	b11b      	cbz	r3, 80011c8 <__sinit+0x14>
 80011c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011c4:	f7ff bff0 	b.w	80011a8 <__sinit_lock_release>
 80011c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80011cc:	6523      	str	r3, [r4, #80]	; 0x50
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <__sinit+0x68>)
 80011d0:	4a13      	ldr	r2, [pc, #76]	; (8001220 <__sinit+0x6c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80011d6:	42a3      	cmp	r3, r4
 80011d8:	bf04      	itt	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	61a3      	streq	r3, [r4, #24]
 80011de:	4620      	mov	r0, r4
 80011e0:	f000 f820 	bl	8001224 <__sfp>
 80011e4:	6060      	str	r0, [r4, #4]
 80011e6:	4620      	mov	r0, r4
 80011e8:	f000 f81c 	bl	8001224 <__sfp>
 80011ec:	60a0      	str	r0, [r4, #8]
 80011ee:	4620      	mov	r0, r4
 80011f0:	f000 f818 	bl	8001224 <__sfp>
 80011f4:	2200      	movs	r2, #0
 80011f6:	60e0      	str	r0, [r4, #12]
 80011f8:	2104      	movs	r1, #4
 80011fa:	6860      	ldr	r0, [r4, #4]
 80011fc:	f7ff ff82 	bl	8001104 <std>
 8001200:	68a0      	ldr	r0, [r4, #8]
 8001202:	2201      	movs	r2, #1
 8001204:	2109      	movs	r1, #9
 8001206:	f7ff ff7d 	bl	8001104 <std>
 800120a:	68e0      	ldr	r0, [r4, #12]
 800120c:	2202      	movs	r2, #2
 800120e:	2112      	movs	r1, #18
 8001210:	f7ff ff78 	bl	8001104 <std>
 8001214:	2301      	movs	r3, #1
 8001216:	61a3      	str	r3, [r4, #24]
 8001218:	e7d2      	b.n	80011c0 <__sinit+0xc>
 800121a:	bf00      	nop
 800121c:	08001c24 	.word	0x08001c24
 8001220:	0800114d 	.word	0x0800114d

08001224 <__sfp>:
 8001224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001226:	4607      	mov	r7, r0
 8001228:	f7ff ffac 	bl	8001184 <__sfp_lock_acquire>
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <__sfp+0x84>)
 800122e:	681e      	ldr	r6, [r3, #0]
 8001230:	69b3      	ldr	r3, [r6, #24]
 8001232:	b913      	cbnz	r3, 800123a <__sfp+0x16>
 8001234:	4630      	mov	r0, r6
 8001236:	f7ff ffbd 	bl	80011b4 <__sinit>
 800123a:	3648      	adds	r6, #72	; 0x48
 800123c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001240:	3b01      	subs	r3, #1
 8001242:	d503      	bpl.n	800124c <__sfp+0x28>
 8001244:	6833      	ldr	r3, [r6, #0]
 8001246:	b30b      	cbz	r3, 800128c <__sfp+0x68>
 8001248:	6836      	ldr	r6, [r6, #0]
 800124a:	e7f7      	b.n	800123c <__sfp+0x18>
 800124c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001250:	b9d5      	cbnz	r5, 8001288 <__sfp+0x64>
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <__sfp+0x88>)
 8001254:	60e3      	str	r3, [r4, #12]
 8001256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800125a:	6665      	str	r5, [r4, #100]	; 0x64
 800125c:	f000 f86c 	bl	8001338 <__retarget_lock_init_recursive>
 8001260:	f7ff ff96 	bl	8001190 <__sfp_lock_release>
 8001264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800126c:	6025      	str	r5, [r4, #0]
 800126e:	61a5      	str	r5, [r4, #24]
 8001270:	2208      	movs	r2, #8
 8001272:	4629      	mov	r1, r5
 8001274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001278:	f000 f861 	bl	800133e <memset>
 800127c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001284:	4620      	mov	r0, r4
 8001286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001288:	3468      	adds	r4, #104	; 0x68
 800128a:	e7d9      	b.n	8001240 <__sfp+0x1c>
 800128c:	2104      	movs	r1, #4
 800128e:	4638      	mov	r0, r7
 8001290:	f7ff ff62 	bl	8001158 <__sfmoreglue>
 8001294:	4604      	mov	r4, r0
 8001296:	6030      	str	r0, [r6, #0]
 8001298:	2800      	cmp	r0, #0
 800129a:	d1d5      	bne.n	8001248 <__sfp+0x24>
 800129c:	f7ff ff78 	bl	8001190 <__sfp_lock_release>
 80012a0:	230c      	movs	r3, #12
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	e7ee      	b.n	8001284 <__sfp+0x60>
 80012a6:	bf00      	nop
 80012a8:	08001c24 	.word	0x08001c24
 80012ac:	ffff0001 	.word	0xffff0001

080012b0 <_fwalk_reent>:
 80012b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012b4:	4606      	mov	r6, r0
 80012b6:	4688      	mov	r8, r1
 80012b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80012bc:	2700      	movs	r7, #0
 80012be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80012c2:	f1b9 0901 	subs.w	r9, r9, #1
 80012c6:	d505      	bpl.n	80012d4 <_fwalk_reent+0x24>
 80012c8:	6824      	ldr	r4, [r4, #0]
 80012ca:	2c00      	cmp	r4, #0
 80012cc:	d1f7      	bne.n	80012be <_fwalk_reent+0xe>
 80012ce:	4638      	mov	r0, r7
 80012d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012d4:	89ab      	ldrh	r3, [r5, #12]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d907      	bls.n	80012ea <_fwalk_reent+0x3a>
 80012da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80012de:	3301      	adds	r3, #1
 80012e0:	d003      	beq.n	80012ea <_fwalk_reent+0x3a>
 80012e2:	4629      	mov	r1, r5
 80012e4:	4630      	mov	r0, r6
 80012e6:	47c0      	blx	r8
 80012e8:	4307      	orrs	r7, r0
 80012ea:	3568      	adds	r5, #104	; 0x68
 80012ec:	e7e9      	b.n	80012c2 <_fwalk_reent+0x12>
	...

080012f0 <__libc_init_array>:
 80012f0:	b570      	push	{r4, r5, r6, lr}
 80012f2:	4d0d      	ldr	r5, [pc, #52]	; (8001328 <__libc_init_array+0x38>)
 80012f4:	4c0d      	ldr	r4, [pc, #52]	; (800132c <__libc_init_array+0x3c>)
 80012f6:	1b64      	subs	r4, r4, r5
 80012f8:	10a4      	asrs	r4, r4, #2
 80012fa:	2600      	movs	r6, #0
 80012fc:	42a6      	cmp	r6, r4
 80012fe:	d109      	bne.n	8001314 <__libc_init_array+0x24>
 8001300:	4d0b      	ldr	r5, [pc, #44]	; (8001330 <__libc_init_array+0x40>)
 8001302:	4c0c      	ldr	r4, [pc, #48]	; (8001334 <__libc_init_array+0x44>)
 8001304:	f000 fc2a 	bl	8001b5c <_init>
 8001308:	1b64      	subs	r4, r4, r5
 800130a:	10a4      	asrs	r4, r4, #2
 800130c:	2600      	movs	r6, #0
 800130e:	42a6      	cmp	r6, r4
 8001310:	d105      	bne.n	800131e <__libc_init_array+0x2e>
 8001312:	bd70      	pop	{r4, r5, r6, pc}
 8001314:	f855 3b04 	ldr.w	r3, [r5], #4
 8001318:	4798      	blx	r3
 800131a:	3601      	adds	r6, #1
 800131c:	e7ee      	b.n	80012fc <__libc_init_array+0xc>
 800131e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001322:	4798      	blx	r3
 8001324:	3601      	adds	r6, #1
 8001326:	e7f2      	b.n	800130e <__libc_init_array+0x1e>
 8001328:	08001c28 	.word	0x08001c28
 800132c:	08001c28 	.word	0x08001c28
 8001330:	08001c28 	.word	0x08001c28
 8001334:	08001c2c 	.word	0x08001c2c

08001338 <__retarget_lock_init_recursive>:
 8001338:	4770      	bx	lr

0800133a <__retarget_lock_acquire_recursive>:
 800133a:	4770      	bx	lr

0800133c <__retarget_lock_release_recursive>:
 800133c:	4770      	bx	lr

0800133e <memset>:
 800133e:	4402      	add	r2, r0
 8001340:	4603      	mov	r3, r0
 8001342:	4293      	cmp	r3, r2
 8001344:	d100      	bne.n	8001348 <memset+0xa>
 8001346:	4770      	bx	lr
 8001348:	f803 1b01 	strb.w	r1, [r3], #1
 800134c:	e7f9      	b.n	8001342 <memset+0x4>
	...

08001350 <sbrk_aligned>:
 8001350:	b570      	push	{r4, r5, r6, lr}
 8001352:	4e0e      	ldr	r6, [pc, #56]	; (800138c <sbrk_aligned+0x3c>)
 8001354:	460c      	mov	r4, r1
 8001356:	6831      	ldr	r1, [r6, #0]
 8001358:	4605      	mov	r5, r0
 800135a:	b911      	cbnz	r1, 8001362 <sbrk_aligned+0x12>
 800135c:	f000 f902 	bl	8001564 <_sbrk_r>
 8001360:	6030      	str	r0, [r6, #0]
 8001362:	4621      	mov	r1, r4
 8001364:	4628      	mov	r0, r5
 8001366:	f000 f8fd 	bl	8001564 <_sbrk_r>
 800136a:	1c43      	adds	r3, r0, #1
 800136c:	d00a      	beq.n	8001384 <sbrk_aligned+0x34>
 800136e:	1cc4      	adds	r4, r0, #3
 8001370:	f024 0403 	bic.w	r4, r4, #3
 8001374:	42a0      	cmp	r0, r4
 8001376:	d007      	beq.n	8001388 <sbrk_aligned+0x38>
 8001378:	1a21      	subs	r1, r4, r0
 800137a:	4628      	mov	r0, r5
 800137c:	f000 f8f2 	bl	8001564 <_sbrk_r>
 8001380:	3001      	adds	r0, #1
 8001382:	d101      	bne.n	8001388 <sbrk_aligned+0x38>
 8001384:	f04f 34ff 	mov.w	r4, #4294967295
 8001388:	4620      	mov	r0, r4
 800138a:	bd70      	pop	{r4, r5, r6, pc}
 800138c:	20000150 	.word	0x20000150

08001390 <_malloc_r>:
 8001390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001394:	1ccd      	adds	r5, r1, #3
 8001396:	f025 0503 	bic.w	r5, r5, #3
 800139a:	3508      	adds	r5, #8
 800139c:	2d0c      	cmp	r5, #12
 800139e:	bf38      	it	cc
 80013a0:	250c      	movcc	r5, #12
 80013a2:	2d00      	cmp	r5, #0
 80013a4:	4607      	mov	r7, r0
 80013a6:	db01      	blt.n	80013ac <_malloc_r+0x1c>
 80013a8:	42a9      	cmp	r1, r5
 80013aa:	d905      	bls.n	80013b8 <_malloc_r+0x28>
 80013ac:	230c      	movs	r3, #12
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	2600      	movs	r6, #0
 80013b2:	4630      	mov	r0, r6
 80013b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013b8:	4e2e      	ldr	r6, [pc, #184]	; (8001474 <_malloc_r+0xe4>)
 80013ba:	f000 fb43 	bl	8001a44 <__malloc_lock>
 80013be:	6833      	ldr	r3, [r6, #0]
 80013c0:	461c      	mov	r4, r3
 80013c2:	bb34      	cbnz	r4, 8001412 <_malloc_r+0x82>
 80013c4:	4629      	mov	r1, r5
 80013c6:	4638      	mov	r0, r7
 80013c8:	f7ff ffc2 	bl	8001350 <sbrk_aligned>
 80013cc:	1c43      	adds	r3, r0, #1
 80013ce:	4604      	mov	r4, r0
 80013d0:	d14d      	bne.n	800146e <_malloc_r+0xde>
 80013d2:	6834      	ldr	r4, [r6, #0]
 80013d4:	4626      	mov	r6, r4
 80013d6:	2e00      	cmp	r6, #0
 80013d8:	d140      	bne.n	800145c <_malloc_r+0xcc>
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	4631      	mov	r1, r6
 80013de:	4638      	mov	r0, r7
 80013e0:	eb04 0803 	add.w	r8, r4, r3
 80013e4:	f000 f8be 	bl	8001564 <_sbrk_r>
 80013e8:	4580      	cmp	r8, r0
 80013ea:	d13a      	bne.n	8001462 <_malloc_r+0xd2>
 80013ec:	6821      	ldr	r1, [r4, #0]
 80013ee:	3503      	adds	r5, #3
 80013f0:	1a6d      	subs	r5, r5, r1
 80013f2:	f025 0503 	bic.w	r5, r5, #3
 80013f6:	3508      	adds	r5, #8
 80013f8:	2d0c      	cmp	r5, #12
 80013fa:	bf38      	it	cc
 80013fc:	250c      	movcc	r5, #12
 80013fe:	4629      	mov	r1, r5
 8001400:	4638      	mov	r0, r7
 8001402:	f7ff ffa5 	bl	8001350 <sbrk_aligned>
 8001406:	3001      	adds	r0, #1
 8001408:	d02b      	beq.n	8001462 <_malloc_r+0xd2>
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	442b      	add	r3, r5
 800140e:	6023      	str	r3, [r4, #0]
 8001410:	e00e      	b.n	8001430 <_malloc_r+0xa0>
 8001412:	6822      	ldr	r2, [r4, #0]
 8001414:	1b52      	subs	r2, r2, r5
 8001416:	d41e      	bmi.n	8001456 <_malloc_r+0xc6>
 8001418:	2a0b      	cmp	r2, #11
 800141a:	d916      	bls.n	800144a <_malloc_r+0xba>
 800141c:	1961      	adds	r1, r4, r5
 800141e:	42a3      	cmp	r3, r4
 8001420:	6025      	str	r5, [r4, #0]
 8001422:	bf18      	it	ne
 8001424:	6059      	strne	r1, [r3, #4]
 8001426:	6863      	ldr	r3, [r4, #4]
 8001428:	bf08      	it	eq
 800142a:	6031      	streq	r1, [r6, #0]
 800142c:	5162      	str	r2, [r4, r5]
 800142e:	604b      	str	r3, [r1, #4]
 8001430:	4638      	mov	r0, r7
 8001432:	f104 060b 	add.w	r6, r4, #11
 8001436:	f000 fb0b 	bl	8001a50 <__malloc_unlock>
 800143a:	f026 0607 	bic.w	r6, r6, #7
 800143e:	1d23      	adds	r3, r4, #4
 8001440:	1af2      	subs	r2, r6, r3
 8001442:	d0b6      	beq.n	80013b2 <_malloc_r+0x22>
 8001444:	1b9b      	subs	r3, r3, r6
 8001446:	50a3      	str	r3, [r4, r2]
 8001448:	e7b3      	b.n	80013b2 <_malloc_r+0x22>
 800144a:	6862      	ldr	r2, [r4, #4]
 800144c:	42a3      	cmp	r3, r4
 800144e:	bf0c      	ite	eq
 8001450:	6032      	streq	r2, [r6, #0]
 8001452:	605a      	strne	r2, [r3, #4]
 8001454:	e7ec      	b.n	8001430 <_malloc_r+0xa0>
 8001456:	4623      	mov	r3, r4
 8001458:	6864      	ldr	r4, [r4, #4]
 800145a:	e7b2      	b.n	80013c2 <_malloc_r+0x32>
 800145c:	4634      	mov	r4, r6
 800145e:	6876      	ldr	r6, [r6, #4]
 8001460:	e7b9      	b.n	80013d6 <_malloc_r+0x46>
 8001462:	230c      	movs	r3, #12
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4638      	mov	r0, r7
 8001468:	f000 faf2 	bl	8001a50 <__malloc_unlock>
 800146c:	e7a1      	b.n	80013b2 <_malloc_r+0x22>
 800146e:	6025      	str	r5, [r4, #0]
 8001470:	e7de      	b.n	8001430 <_malloc_r+0xa0>
 8001472:	bf00      	nop
 8001474:	2000014c 	.word	0x2000014c

08001478 <_puts_r>:
 8001478:	b570      	push	{r4, r5, r6, lr}
 800147a:	460e      	mov	r6, r1
 800147c:	4605      	mov	r5, r0
 800147e:	b118      	cbz	r0, 8001488 <_puts_r+0x10>
 8001480:	6983      	ldr	r3, [r0, #24]
 8001482:	b90b      	cbnz	r3, 8001488 <_puts_r+0x10>
 8001484:	f7ff fe96 	bl	80011b4 <__sinit>
 8001488:	69ab      	ldr	r3, [r5, #24]
 800148a:	68ac      	ldr	r4, [r5, #8]
 800148c:	b913      	cbnz	r3, 8001494 <_puts_r+0x1c>
 800148e:	4628      	mov	r0, r5
 8001490:	f7ff fe90 	bl	80011b4 <__sinit>
 8001494:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <_puts_r+0xd0>)
 8001496:	429c      	cmp	r4, r3
 8001498:	d120      	bne.n	80014dc <_puts_r+0x64>
 800149a:	686c      	ldr	r4, [r5, #4]
 800149c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800149e:	07db      	lsls	r3, r3, #31
 80014a0:	d405      	bmi.n	80014ae <_puts_r+0x36>
 80014a2:	89a3      	ldrh	r3, [r4, #12]
 80014a4:	0598      	lsls	r0, r3, #22
 80014a6:	d402      	bmi.n	80014ae <_puts_r+0x36>
 80014a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014aa:	f7ff ff46 	bl	800133a <__retarget_lock_acquire_recursive>
 80014ae:	89a3      	ldrh	r3, [r4, #12]
 80014b0:	0719      	lsls	r1, r3, #28
 80014b2:	d51d      	bpl.n	80014f0 <_puts_r+0x78>
 80014b4:	6923      	ldr	r3, [r4, #16]
 80014b6:	b1db      	cbz	r3, 80014f0 <_puts_r+0x78>
 80014b8:	3e01      	subs	r6, #1
 80014ba:	68a3      	ldr	r3, [r4, #8]
 80014bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80014c0:	3b01      	subs	r3, #1
 80014c2:	60a3      	str	r3, [r4, #8]
 80014c4:	bb39      	cbnz	r1, 8001516 <_puts_r+0x9e>
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	da38      	bge.n	800153c <_puts_r+0xc4>
 80014ca:	4622      	mov	r2, r4
 80014cc:	210a      	movs	r1, #10
 80014ce:	4628      	mov	r0, r5
 80014d0:	f000 f89c 	bl	800160c <__swbuf_r>
 80014d4:	3001      	adds	r0, #1
 80014d6:	d011      	beq.n	80014fc <_puts_r+0x84>
 80014d8:	250a      	movs	r5, #10
 80014da:	e011      	b.n	8001500 <_puts_r+0x88>
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <_puts_r+0xd4>)
 80014de:	429c      	cmp	r4, r3
 80014e0:	d101      	bne.n	80014e6 <_puts_r+0x6e>
 80014e2:	68ac      	ldr	r4, [r5, #8]
 80014e4:	e7da      	b.n	800149c <_puts_r+0x24>
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <_puts_r+0xd8>)
 80014e8:	429c      	cmp	r4, r3
 80014ea:	bf08      	it	eq
 80014ec:	68ec      	ldreq	r4, [r5, #12]
 80014ee:	e7d5      	b.n	800149c <_puts_r+0x24>
 80014f0:	4621      	mov	r1, r4
 80014f2:	4628      	mov	r0, r5
 80014f4:	f000 f8ee 	bl	80016d4 <__swsetup_r>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	d0dd      	beq.n	80014b8 <_puts_r+0x40>
 80014fc:	f04f 35ff 	mov.w	r5, #4294967295
 8001500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001502:	07da      	lsls	r2, r3, #31
 8001504:	d405      	bmi.n	8001512 <_puts_r+0x9a>
 8001506:	89a3      	ldrh	r3, [r4, #12]
 8001508:	059b      	lsls	r3, r3, #22
 800150a:	d402      	bmi.n	8001512 <_puts_r+0x9a>
 800150c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800150e:	f7ff ff15 	bl	800133c <__retarget_lock_release_recursive>
 8001512:	4628      	mov	r0, r5
 8001514:	bd70      	pop	{r4, r5, r6, pc}
 8001516:	2b00      	cmp	r3, #0
 8001518:	da04      	bge.n	8001524 <_puts_r+0xac>
 800151a:	69a2      	ldr	r2, [r4, #24]
 800151c:	429a      	cmp	r2, r3
 800151e:	dc06      	bgt.n	800152e <_puts_r+0xb6>
 8001520:	290a      	cmp	r1, #10
 8001522:	d004      	beq.n	800152e <_puts_r+0xb6>
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	6022      	str	r2, [r4, #0]
 800152a:	7019      	strb	r1, [r3, #0]
 800152c:	e7c5      	b.n	80014ba <_puts_r+0x42>
 800152e:	4622      	mov	r2, r4
 8001530:	4628      	mov	r0, r5
 8001532:	f000 f86b 	bl	800160c <__swbuf_r>
 8001536:	3001      	adds	r0, #1
 8001538:	d1bf      	bne.n	80014ba <_puts_r+0x42>
 800153a:	e7df      	b.n	80014fc <_puts_r+0x84>
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	250a      	movs	r5, #10
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	6022      	str	r2, [r4, #0]
 8001544:	701d      	strb	r5, [r3, #0]
 8001546:	e7db      	b.n	8001500 <_puts_r+0x88>
 8001548:	08001be4 	.word	0x08001be4
 800154c:	08001c04 	.word	0x08001c04
 8001550:	08001bc4 	.word	0x08001bc4

08001554 <puts>:
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <puts+0xc>)
 8001556:	4601      	mov	r1, r0
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	f7ff bf8d 	b.w	8001478 <_puts_r>
 800155e:	bf00      	nop
 8001560:	20000014 	.word	0x20000014

08001564 <_sbrk_r>:
 8001564:	b538      	push	{r3, r4, r5, lr}
 8001566:	4d06      	ldr	r5, [pc, #24]	; (8001580 <_sbrk_r+0x1c>)
 8001568:	2300      	movs	r3, #0
 800156a:	4604      	mov	r4, r0
 800156c:	4608      	mov	r0, r1
 800156e:	602b      	str	r3, [r5, #0]
 8001570:	f7fe ff44 	bl	80003fc <_sbrk>
 8001574:	1c43      	adds	r3, r0, #1
 8001576:	d102      	bne.n	800157e <_sbrk_r+0x1a>
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	b103      	cbz	r3, 800157e <_sbrk_r+0x1a>
 800157c:	6023      	str	r3, [r4, #0]
 800157e:	bd38      	pop	{r3, r4, r5, pc}
 8001580:	20000154 	.word	0x20000154

08001584 <__sread>:
 8001584:	b510      	push	{r4, lr}
 8001586:	460c      	mov	r4, r1
 8001588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800158c:	f000 fab2 	bl	8001af4 <_read_r>
 8001590:	2800      	cmp	r0, #0
 8001592:	bfab      	itete	ge
 8001594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001596:	89a3      	ldrhlt	r3, [r4, #12]
 8001598:	181b      	addge	r3, r3, r0
 800159a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800159e:	bfac      	ite	ge
 80015a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80015a2:	81a3      	strhlt	r3, [r4, #12]
 80015a4:	bd10      	pop	{r4, pc}

080015a6 <__swrite>:
 80015a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015aa:	461f      	mov	r7, r3
 80015ac:	898b      	ldrh	r3, [r1, #12]
 80015ae:	05db      	lsls	r3, r3, #23
 80015b0:	4605      	mov	r5, r0
 80015b2:	460c      	mov	r4, r1
 80015b4:	4616      	mov	r6, r2
 80015b6:	d505      	bpl.n	80015c4 <__swrite+0x1e>
 80015b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015bc:	2302      	movs	r3, #2
 80015be:	2200      	movs	r2, #0
 80015c0:	f000 f9c8 	bl	8001954 <_lseek_r>
 80015c4:	89a3      	ldrh	r3, [r4, #12]
 80015c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015ce:	81a3      	strh	r3, [r4, #12]
 80015d0:	4632      	mov	r2, r6
 80015d2:	463b      	mov	r3, r7
 80015d4:	4628      	mov	r0, r5
 80015d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015da:	f000 b869 	b.w	80016b0 <_write_r>

080015de <__sseek>:
 80015de:	b510      	push	{r4, lr}
 80015e0:	460c      	mov	r4, r1
 80015e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e6:	f000 f9b5 	bl	8001954 <_lseek_r>
 80015ea:	1c43      	adds	r3, r0, #1
 80015ec:	89a3      	ldrh	r3, [r4, #12]
 80015ee:	bf15      	itete	ne
 80015f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80015f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80015f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80015fa:	81a3      	strheq	r3, [r4, #12]
 80015fc:	bf18      	it	ne
 80015fe:	81a3      	strhne	r3, [r4, #12]
 8001600:	bd10      	pop	{r4, pc}

08001602 <__sclose>:
 8001602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001606:	f000 b8d3 	b.w	80017b0 <_close_r>
	...

0800160c <__swbuf_r>:
 800160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160e:	460e      	mov	r6, r1
 8001610:	4614      	mov	r4, r2
 8001612:	4605      	mov	r5, r0
 8001614:	b118      	cbz	r0, 800161e <__swbuf_r+0x12>
 8001616:	6983      	ldr	r3, [r0, #24]
 8001618:	b90b      	cbnz	r3, 800161e <__swbuf_r+0x12>
 800161a:	f7ff fdcb 	bl	80011b4 <__sinit>
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <__swbuf_r+0x98>)
 8001620:	429c      	cmp	r4, r3
 8001622:	d12b      	bne.n	800167c <__swbuf_r+0x70>
 8001624:	686c      	ldr	r4, [r5, #4]
 8001626:	69a3      	ldr	r3, [r4, #24]
 8001628:	60a3      	str	r3, [r4, #8]
 800162a:	89a3      	ldrh	r3, [r4, #12]
 800162c:	071a      	lsls	r2, r3, #28
 800162e:	d52f      	bpl.n	8001690 <__swbuf_r+0x84>
 8001630:	6923      	ldr	r3, [r4, #16]
 8001632:	b36b      	cbz	r3, 8001690 <__swbuf_r+0x84>
 8001634:	6923      	ldr	r3, [r4, #16]
 8001636:	6820      	ldr	r0, [r4, #0]
 8001638:	1ac0      	subs	r0, r0, r3
 800163a:	6963      	ldr	r3, [r4, #20]
 800163c:	b2f6      	uxtb	r6, r6
 800163e:	4283      	cmp	r3, r0
 8001640:	4637      	mov	r7, r6
 8001642:	dc04      	bgt.n	800164e <__swbuf_r+0x42>
 8001644:	4621      	mov	r1, r4
 8001646:	4628      	mov	r0, r5
 8001648:	f000 f948 	bl	80018dc <_fflush_r>
 800164c:	bb30      	cbnz	r0, 800169c <__swbuf_r+0x90>
 800164e:	68a3      	ldr	r3, [r4, #8]
 8001650:	3b01      	subs	r3, #1
 8001652:	60a3      	str	r3, [r4, #8]
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	6022      	str	r2, [r4, #0]
 800165a:	701e      	strb	r6, [r3, #0]
 800165c:	6963      	ldr	r3, [r4, #20]
 800165e:	3001      	adds	r0, #1
 8001660:	4283      	cmp	r3, r0
 8001662:	d004      	beq.n	800166e <__swbuf_r+0x62>
 8001664:	89a3      	ldrh	r3, [r4, #12]
 8001666:	07db      	lsls	r3, r3, #31
 8001668:	d506      	bpl.n	8001678 <__swbuf_r+0x6c>
 800166a:	2e0a      	cmp	r6, #10
 800166c:	d104      	bne.n	8001678 <__swbuf_r+0x6c>
 800166e:	4621      	mov	r1, r4
 8001670:	4628      	mov	r0, r5
 8001672:	f000 f933 	bl	80018dc <_fflush_r>
 8001676:	b988      	cbnz	r0, 800169c <__swbuf_r+0x90>
 8001678:	4638      	mov	r0, r7
 800167a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <__swbuf_r+0x9c>)
 800167e:	429c      	cmp	r4, r3
 8001680:	d101      	bne.n	8001686 <__swbuf_r+0x7a>
 8001682:	68ac      	ldr	r4, [r5, #8]
 8001684:	e7cf      	b.n	8001626 <__swbuf_r+0x1a>
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <__swbuf_r+0xa0>)
 8001688:	429c      	cmp	r4, r3
 800168a:	bf08      	it	eq
 800168c:	68ec      	ldreq	r4, [r5, #12]
 800168e:	e7ca      	b.n	8001626 <__swbuf_r+0x1a>
 8001690:	4621      	mov	r1, r4
 8001692:	4628      	mov	r0, r5
 8001694:	f000 f81e 	bl	80016d4 <__swsetup_r>
 8001698:	2800      	cmp	r0, #0
 800169a:	d0cb      	beq.n	8001634 <__swbuf_r+0x28>
 800169c:	f04f 37ff 	mov.w	r7, #4294967295
 80016a0:	e7ea      	b.n	8001678 <__swbuf_r+0x6c>
 80016a2:	bf00      	nop
 80016a4:	08001be4 	.word	0x08001be4
 80016a8:	08001c04 	.word	0x08001c04
 80016ac:	08001bc4 	.word	0x08001bc4

080016b0 <_write_r>:
 80016b0:	b538      	push	{r3, r4, r5, lr}
 80016b2:	4d07      	ldr	r5, [pc, #28]	; (80016d0 <_write_r+0x20>)
 80016b4:	4604      	mov	r4, r0
 80016b6:	4608      	mov	r0, r1
 80016b8:	4611      	mov	r1, r2
 80016ba:	2200      	movs	r2, #0
 80016bc:	602a      	str	r2, [r5, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	f7ff fb1f 	bl	8000d02 <_write>
 80016c4:	1c43      	adds	r3, r0, #1
 80016c6:	d102      	bne.n	80016ce <_write_r+0x1e>
 80016c8:	682b      	ldr	r3, [r5, #0]
 80016ca:	b103      	cbz	r3, 80016ce <_write_r+0x1e>
 80016cc:	6023      	str	r3, [r4, #0]
 80016ce:	bd38      	pop	{r3, r4, r5, pc}
 80016d0:	20000154 	.word	0x20000154

080016d4 <__swsetup_r>:
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <__swsetup_r+0xcc>)
 80016d6:	b570      	push	{r4, r5, r6, lr}
 80016d8:	681d      	ldr	r5, [r3, #0]
 80016da:	4606      	mov	r6, r0
 80016dc:	460c      	mov	r4, r1
 80016de:	b125      	cbz	r5, 80016ea <__swsetup_r+0x16>
 80016e0:	69ab      	ldr	r3, [r5, #24]
 80016e2:	b913      	cbnz	r3, 80016ea <__swsetup_r+0x16>
 80016e4:	4628      	mov	r0, r5
 80016e6:	f7ff fd65 	bl	80011b4 <__sinit>
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <__swsetup_r+0xd0>)
 80016ec:	429c      	cmp	r4, r3
 80016ee:	d10f      	bne.n	8001710 <__swsetup_r+0x3c>
 80016f0:	686c      	ldr	r4, [r5, #4]
 80016f2:	89a3      	ldrh	r3, [r4, #12]
 80016f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016f8:	0719      	lsls	r1, r3, #28
 80016fa:	d42c      	bmi.n	8001756 <__swsetup_r+0x82>
 80016fc:	06dd      	lsls	r5, r3, #27
 80016fe:	d411      	bmi.n	8001724 <__swsetup_r+0x50>
 8001700:	2309      	movs	r3, #9
 8001702:	6033      	str	r3, [r6, #0]
 8001704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001708:	81a3      	strh	r3, [r4, #12]
 800170a:	f04f 30ff 	mov.w	r0, #4294967295
 800170e:	e03e      	b.n	800178e <__swsetup_r+0xba>
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <__swsetup_r+0xd4>)
 8001712:	429c      	cmp	r4, r3
 8001714:	d101      	bne.n	800171a <__swsetup_r+0x46>
 8001716:	68ac      	ldr	r4, [r5, #8]
 8001718:	e7eb      	b.n	80016f2 <__swsetup_r+0x1e>
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <__swsetup_r+0xd8>)
 800171c:	429c      	cmp	r4, r3
 800171e:	bf08      	it	eq
 8001720:	68ec      	ldreq	r4, [r5, #12]
 8001722:	e7e6      	b.n	80016f2 <__swsetup_r+0x1e>
 8001724:	0758      	lsls	r0, r3, #29
 8001726:	d512      	bpl.n	800174e <__swsetup_r+0x7a>
 8001728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800172a:	b141      	cbz	r1, 800173e <__swsetup_r+0x6a>
 800172c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001730:	4299      	cmp	r1, r3
 8001732:	d002      	beq.n	800173a <__swsetup_r+0x66>
 8001734:	4630      	mov	r0, r6
 8001736:	f000 f991 	bl	8001a5c <_free_r>
 800173a:	2300      	movs	r3, #0
 800173c:	6363      	str	r3, [r4, #52]	; 0x34
 800173e:	89a3      	ldrh	r3, [r4, #12]
 8001740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001744:	81a3      	strh	r3, [r4, #12]
 8001746:	2300      	movs	r3, #0
 8001748:	6063      	str	r3, [r4, #4]
 800174a:	6923      	ldr	r3, [r4, #16]
 800174c:	6023      	str	r3, [r4, #0]
 800174e:	89a3      	ldrh	r3, [r4, #12]
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	81a3      	strh	r3, [r4, #12]
 8001756:	6923      	ldr	r3, [r4, #16]
 8001758:	b94b      	cbnz	r3, 800176e <__swsetup_r+0x9a>
 800175a:	89a3      	ldrh	r3, [r4, #12]
 800175c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001764:	d003      	beq.n	800176e <__swsetup_r+0x9a>
 8001766:	4621      	mov	r1, r4
 8001768:	4630      	mov	r0, r6
 800176a:	f000 f92b 	bl	80019c4 <__smakebuf_r>
 800176e:	89a0      	ldrh	r0, [r4, #12]
 8001770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001774:	f010 0301 	ands.w	r3, r0, #1
 8001778:	d00a      	beq.n	8001790 <__swsetup_r+0xbc>
 800177a:	2300      	movs	r3, #0
 800177c:	60a3      	str	r3, [r4, #8]
 800177e:	6963      	ldr	r3, [r4, #20]
 8001780:	425b      	negs	r3, r3
 8001782:	61a3      	str	r3, [r4, #24]
 8001784:	6923      	ldr	r3, [r4, #16]
 8001786:	b943      	cbnz	r3, 800179a <__swsetup_r+0xc6>
 8001788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800178c:	d1ba      	bne.n	8001704 <__swsetup_r+0x30>
 800178e:	bd70      	pop	{r4, r5, r6, pc}
 8001790:	0781      	lsls	r1, r0, #30
 8001792:	bf58      	it	pl
 8001794:	6963      	ldrpl	r3, [r4, #20]
 8001796:	60a3      	str	r3, [r4, #8]
 8001798:	e7f4      	b.n	8001784 <__swsetup_r+0xb0>
 800179a:	2000      	movs	r0, #0
 800179c:	e7f7      	b.n	800178e <__swsetup_r+0xba>
 800179e:	bf00      	nop
 80017a0:	20000014 	.word	0x20000014
 80017a4:	08001be4 	.word	0x08001be4
 80017a8:	08001c04 	.word	0x08001c04
 80017ac:	08001bc4 	.word	0x08001bc4

080017b0 <_close_r>:
 80017b0:	b538      	push	{r3, r4, r5, lr}
 80017b2:	4d06      	ldr	r5, [pc, #24]	; (80017cc <_close_r+0x1c>)
 80017b4:	2300      	movs	r3, #0
 80017b6:	4604      	mov	r4, r0
 80017b8:	4608      	mov	r0, r1
 80017ba:	602b      	str	r3, [r5, #0]
 80017bc:	f7ff fad2 	bl	8000d64 <_close>
 80017c0:	1c43      	adds	r3, r0, #1
 80017c2:	d102      	bne.n	80017ca <_close_r+0x1a>
 80017c4:	682b      	ldr	r3, [r5, #0]
 80017c6:	b103      	cbz	r3, 80017ca <_close_r+0x1a>
 80017c8:	6023      	str	r3, [r4, #0]
 80017ca:	bd38      	pop	{r3, r4, r5, pc}
 80017cc:	20000154 	.word	0x20000154

080017d0 <__sflush_r>:
 80017d0:	898a      	ldrh	r2, [r1, #12]
 80017d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017d6:	4605      	mov	r5, r0
 80017d8:	0710      	lsls	r0, r2, #28
 80017da:	460c      	mov	r4, r1
 80017dc:	d458      	bmi.n	8001890 <__sflush_r+0xc0>
 80017de:	684b      	ldr	r3, [r1, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	dc05      	bgt.n	80017f0 <__sflush_r+0x20>
 80017e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc02      	bgt.n	80017f0 <__sflush_r+0x20>
 80017ea:	2000      	movs	r0, #0
 80017ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017f2:	2e00      	cmp	r6, #0
 80017f4:	d0f9      	beq.n	80017ea <__sflush_r+0x1a>
 80017f6:	2300      	movs	r3, #0
 80017f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017fc:	682f      	ldr	r7, [r5, #0]
 80017fe:	602b      	str	r3, [r5, #0]
 8001800:	d032      	beq.n	8001868 <__sflush_r+0x98>
 8001802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001804:	89a3      	ldrh	r3, [r4, #12]
 8001806:	075a      	lsls	r2, r3, #29
 8001808:	d505      	bpl.n	8001816 <__sflush_r+0x46>
 800180a:	6863      	ldr	r3, [r4, #4]
 800180c:	1ac0      	subs	r0, r0, r3
 800180e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001810:	b10b      	cbz	r3, 8001816 <__sflush_r+0x46>
 8001812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001814:	1ac0      	subs	r0, r0, r3
 8001816:	2300      	movs	r3, #0
 8001818:	4602      	mov	r2, r0
 800181a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800181c:	6a21      	ldr	r1, [r4, #32]
 800181e:	4628      	mov	r0, r5
 8001820:	47b0      	blx	r6
 8001822:	1c43      	adds	r3, r0, #1
 8001824:	89a3      	ldrh	r3, [r4, #12]
 8001826:	d106      	bne.n	8001836 <__sflush_r+0x66>
 8001828:	6829      	ldr	r1, [r5, #0]
 800182a:	291d      	cmp	r1, #29
 800182c:	d82c      	bhi.n	8001888 <__sflush_r+0xb8>
 800182e:	4a2a      	ldr	r2, [pc, #168]	; (80018d8 <__sflush_r+0x108>)
 8001830:	40ca      	lsrs	r2, r1
 8001832:	07d6      	lsls	r6, r2, #31
 8001834:	d528      	bpl.n	8001888 <__sflush_r+0xb8>
 8001836:	2200      	movs	r2, #0
 8001838:	6062      	str	r2, [r4, #4]
 800183a:	04d9      	lsls	r1, r3, #19
 800183c:	6922      	ldr	r2, [r4, #16]
 800183e:	6022      	str	r2, [r4, #0]
 8001840:	d504      	bpl.n	800184c <__sflush_r+0x7c>
 8001842:	1c42      	adds	r2, r0, #1
 8001844:	d101      	bne.n	800184a <__sflush_r+0x7a>
 8001846:	682b      	ldr	r3, [r5, #0]
 8001848:	b903      	cbnz	r3, 800184c <__sflush_r+0x7c>
 800184a:	6560      	str	r0, [r4, #84]	; 0x54
 800184c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800184e:	602f      	str	r7, [r5, #0]
 8001850:	2900      	cmp	r1, #0
 8001852:	d0ca      	beq.n	80017ea <__sflush_r+0x1a>
 8001854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001858:	4299      	cmp	r1, r3
 800185a:	d002      	beq.n	8001862 <__sflush_r+0x92>
 800185c:	4628      	mov	r0, r5
 800185e:	f000 f8fd 	bl	8001a5c <_free_r>
 8001862:	2000      	movs	r0, #0
 8001864:	6360      	str	r0, [r4, #52]	; 0x34
 8001866:	e7c1      	b.n	80017ec <__sflush_r+0x1c>
 8001868:	6a21      	ldr	r1, [r4, #32]
 800186a:	2301      	movs	r3, #1
 800186c:	4628      	mov	r0, r5
 800186e:	47b0      	blx	r6
 8001870:	1c41      	adds	r1, r0, #1
 8001872:	d1c7      	bne.n	8001804 <__sflush_r+0x34>
 8001874:	682b      	ldr	r3, [r5, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0c4      	beq.n	8001804 <__sflush_r+0x34>
 800187a:	2b1d      	cmp	r3, #29
 800187c:	d001      	beq.n	8001882 <__sflush_r+0xb2>
 800187e:	2b16      	cmp	r3, #22
 8001880:	d101      	bne.n	8001886 <__sflush_r+0xb6>
 8001882:	602f      	str	r7, [r5, #0]
 8001884:	e7b1      	b.n	80017ea <__sflush_r+0x1a>
 8001886:	89a3      	ldrh	r3, [r4, #12]
 8001888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800188c:	81a3      	strh	r3, [r4, #12]
 800188e:	e7ad      	b.n	80017ec <__sflush_r+0x1c>
 8001890:	690f      	ldr	r7, [r1, #16]
 8001892:	2f00      	cmp	r7, #0
 8001894:	d0a9      	beq.n	80017ea <__sflush_r+0x1a>
 8001896:	0793      	lsls	r3, r2, #30
 8001898:	680e      	ldr	r6, [r1, #0]
 800189a:	bf08      	it	eq
 800189c:	694b      	ldreq	r3, [r1, #20]
 800189e:	600f      	str	r7, [r1, #0]
 80018a0:	bf18      	it	ne
 80018a2:	2300      	movne	r3, #0
 80018a4:	eba6 0807 	sub.w	r8, r6, r7
 80018a8:	608b      	str	r3, [r1, #8]
 80018aa:	f1b8 0f00 	cmp.w	r8, #0
 80018ae:	dd9c      	ble.n	80017ea <__sflush_r+0x1a>
 80018b0:	6a21      	ldr	r1, [r4, #32]
 80018b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80018b4:	4643      	mov	r3, r8
 80018b6:	463a      	mov	r2, r7
 80018b8:	4628      	mov	r0, r5
 80018ba:	47b0      	blx	r6
 80018bc:	2800      	cmp	r0, #0
 80018be:	dc06      	bgt.n	80018ce <__sflush_r+0xfe>
 80018c0:	89a3      	ldrh	r3, [r4, #12]
 80018c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c6:	81a3      	strh	r3, [r4, #12]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	e78e      	b.n	80017ec <__sflush_r+0x1c>
 80018ce:	4407      	add	r7, r0
 80018d0:	eba8 0800 	sub.w	r8, r8, r0
 80018d4:	e7e9      	b.n	80018aa <__sflush_r+0xda>
 80018d6:	bf00      	nop
 80018d8:	20400001 	.word	0x20400001

080018dc <_fflush_r>:
 80018dc:	b538      	push	{r3, r4, r5, lr}
 80018de:	690b      	ldr	r3, [r1, #16]
 80018e0:	4605      	mov	r5, r0
 80018e2:	460c      	mov	r4, r1
 80018e4:	b913      	cbnz	r3, 80018ec <_fflush_r+0x10>
 80018e6:	2500      	movs	r5, #0
 80018e8:	4628      	mov	r0, r5
 80018ea:	bd38      	pop	{r3, r4, r5, pc}
 80018ec:	b118      	cbz	r0, 80018f6 <_fflush_r+0x1a>
 80018ee:	6983      	ldr	r3, [r0, #24]
 80018f0:	b90b      	cbnz	r3, 80018f6 <_fflush_r+0x1a>
 80018f2:	f7ff fc5f 	bl	80011b4 <__sinit>
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <_fflush_r+0x6c>)
 80018f8:	429c      	cmp	r4, r3
 80018fa:	d11b      	bne.n	8001934 <_fflush_r+0x58>
 80018fc:	686c      	ldr	r4, [r5, #4]
 80018fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0ef      	beq.n	80018e6 <_fflush_r+0xa>
 8001906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001908:	07d0      	lsls	r0, r2, #31
 800190a:	d404      	bmi.n	8001916 <_fflush_r+0x3a>
 800190c:	0599      	lsls	r1, r3, #22
 800190e:	d402      	bmi.n	8001916 <_fflush_r+0x3a>
 8001910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001912:	f7ff fd12 	bl	800133a <__retarget_lock_acquire_recursive>
 8001916:	4628      	mov	r0, r5
 8001918:	4621      	mov	r1, r4
 800191a:	f7ff ff59 	bl	80017d0 <__sflush_r>
 800191e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001920:	07da      	lsls	r2, r3, #31
 8001922:	4605      	mov	r5, r0
 8001924:	d4e0      	bmi.n	80018e8 <_fflush_r+0xc>
 8001926:	89a3      	ldrh	r3, [r4, #12]
 8001928:	059b      	lsls	r3, r3, #22
 800192a:	d4dd      	bmi.n	80018e8 <_fflush_r+0xc>
 800192c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800192e:	f7ff fd05 	bl	800133c <__retarget_lock_release_recursive>
 8001932:	e7d9      	b.n	80018e8 <_fflush_r+0xc>
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <_fflush_r+0x70>)
 8001936:	429c      	cmp	r4, r3
 8001938:	d101      	bne.n	800193e <_fflush_r+0x62>
 800193a:	68ac      	ldr	r4, [r5, #8]
 800193c:	e7df      	b.n	80018fe <_fflush_r+0x22>
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <_fflush_r+0x74>)
 8001940:	429c      	cmp	r4, r3
 8001942:	bf08      	it	eq
 8001944:	68ec      	ldreq	r4, [r5, #12]
 8001946:	e7da      	b.n	80018fe <_fflush_r+0x22>
 8001948:	08001be4 	.word	0x08001be4
 800194c:	08001c04 	.word	0x08001c04
 8001950:	08001bc4 	.word	0x08001bc4

08001954 <_lseek_r>:
 8001954:	b538      	push	{r3, r4, r5, lr}
 8001956:	4d07      	ldr	r5, [pc, #28]	; (8001974 <_lseek_r+0x20>)
 8001958:	4604      	mov	r4, r0
 800195a:	4608      	mov	r0, r1
 800195c:	4611      	mov	r1, r2
 800195e:	2200      	movs	r2, #0
 8001960:	602a      	str	r2, [r5, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	f7ff f9bb 	bl	8000cde <_lseek>
 8001968:	1c43      	adds	r3, r0, #1
 800196a:	d102      	bne.n	8001972 <_lseek_r+0x1e>
 800196c:	682b      	ldr	r3, [r5, #0]
 800196e:	b103      	cbz	r3, 8001972 <_lseek_r+0x1e>
 8001970:	6023      	str	r3, [r4, #0]
 8001972:	bd38      	pop	{r3, r4, r5, pc}
 8001974:	20000154 	.word	0x20000154

08001978 <__swhatbuf_r>:
 8001978:	b570      	push	{r4, r5, r6, lr}
 800197a:	460e      	mov	r6, r1
 800197c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001980:	2900      	cmp	r1, #0
 8001982:	b096      	sub	sp, #88	; 0x58
 8001984:	4614      	mov	r4, r2
 8001986:	461d      	mov	r5, r3
 8001988:	da08      	bge.n	800199c <__swhatbuf_r+0x24>
 800198a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	602a      	str	r2, [r5, #0]
 8001992:	061a      	lsls	r2, r3, #24
 8001994:	d410      	bmi.n	80019b8 <__swhatbuf_r+0x40>
 8001996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800199a:	e00e      	b.n	80019ba <__swhatbuf_r+0x42>
 800199c:	466a      	mov	r2, sp
 800199e:	f000 f8bb 	bl	8001b18 <_fstat_r>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	dbf1      	blt.n	800198a <__swhatbuf_r+0x12>
 80019a6:	9a01      	ldr	r2, [sp, #4]
 80019a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80019ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80019b0:	425a      	negs	r2, r3
 80019b2:	415a      	adcs	r2, r3
 80019b4:	602a      	str	r2, [r5, #0]
 80019b6:	e7ee      	b.n	8001996 <__swhatbuf_r+0x1e>
 80019b8:	2340      	movs	r3, #64	; 0x40
 80019ba:	2000      	movs	r0, #0
 80019bc:	6023      	str	r3, [r4, #0]
 80019be:	b016      	add	sp, #88	; 0x58
 80019c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080019c4 <__smakebuf_r>:
 80019c4:	898b      	ldrh	r3, [r1, #12]
 80019c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019c8:	079d      	lsls	r5, r3, #30
 80019ca:	4606      	mov	r6, r0
 80019cc:	460c      	mov	r4, r1
 80019ce:	d507      	bpl.n	80019e0 <__smakebuf_r+0x1c>
 80019d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80019d4:	6023      	str	r3, [r4, #0]
 80019d6:	6123      	str	r3, [r4, #16]
 80019d8:	2301      	movs	r3, #1
 80019da:	6163      	str	r3, [r4, #20]
 80019dc:	b002      	add	sp, #8
 80019de:	bd70      	pop	{r4, r5, r6, pc}
 80019e0:	ab01      	add	r3, sp, #4
 80019e2:	466a      	mov	r2, sp
 80019e4:	f7ff ffc8 	bl	8001978 <__swhatbuf_r>
 80019e8:	9900      	ldr	r1, [sp, #0]
 80019ea:	4605      	mov	r5, r0
 80019ec:	4630      	mov	r0, r6
 80019ee:	f7ff fccf 	bl	8001390 <_malloc_r>
 80019f2:	b948      	cbnz	r0, 8001a08 <__smakebuf_r+0x44>
 80019f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019f8:	059a      	lsls	r2, r3, #22
 80019fa:	d4ef      	bmi.n	80019dc <__smakebuf_r+0x18>
 80019fc:	f023 0303 	bic.w	r3, r3, #3
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	81a3      	strh	r3, [r4, #12]
 8001a06:	e7e3      	b.n	80019d0 <__smakebuf_r+0xc>
 8001a08:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <__smakebuf_r+0x7c>)
 8001a0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a0c:	89a3      	ldrh	r3, [r4, #12]
 8001a0e:	6020      	str	r0, [r4, #0]
 8001a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a14:	81a3      	strh	r3, [r4, #12]
 8001a16:	9b00      	ldr	r3, [sp, #0]
 8001a18:	6163      	str	r3, [r4, #20]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	6120      	str	r0, [r4, #16]
 8001a1e:	b15b      	cbz	r3, 8001a38 <__smakebuf_r+0x74>
 8001a20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a24:	4630      	mov	r0, r6
 8001a26:	f000 f889 	bl	8001b3c <_isatty_r>
 8001a2a:	b128      	cbz	r0, 8001a38 <__smakebuf_r+0x74>
 8001a2c:	89a3      	ldrh	r3, [r4, #12]
 8001a2e:	f023 0303 	bic.w	r3, r3, #3
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	81a3      	strh	r3, [r4, #12]
 8001a38:	89a0      	ldrh	r0, [r4, #12]
 8001a3a:	4305      	orrs	r5, r0
 8001a3c:	81a5      	strh	r5, [r4, #12]
 8001a3e:	e7cd      	b.n	80019dc <__smakebuf_r+0x18>
 8001a40:	0800114d 	.word	0x0800114d

08001a44 <__malloc_lock>:
 8001a44:	4801      	ldr	r0, [pc, #4]	; (8001a4c <__malloc_lock+0x8>)
 8001a46:	f7ff bc78 	b.w	800133a <__retarget_lock_acquire_recursive>
 8001a4a:	bf00      	nop
 8001a4c:	20000148 	.word	0x20000148

08001a50 <__malloc_unlock>:
 8001a50:	4801      	ldr	r0, [pc, #4]	; (8001a58 <__malloc_unlock+0x8>)
 8001a52:	f7ff bc73 	b.w	800133c <__retarget_lock_release_recursive>
 8001a56:	bf00      	nop
 8001a58:	20000148 	.word	0x20000148

08001a5c <_free_r>:
 8001a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a5e:	2900      	cmp	r1, #0
 8001a60:	d044      	beq.n	8001aec <_free_r+0x90>
 8001a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a66:	9001      	str	r0, [sp, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f1a1 0404 	sub.w	r4, r1, #4
 8001a6e:	bfb8      	it	lt
 8001a70:	18e4      	addlt	r4, r4, r3
 8001a72:	f7ff ffe7 	bl	8001a44 <__malloc_lock>
 8001a76:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <_free_r+0x94>)
 8001a78:	9801      	ldr	r0, [sp, #4]
 8001a7a:	6813      	ldr	r3, [r2, #0]
 8001a7c:	b933      	cbnz	r3, 8001a8c <_free_r+0x30>
 8001a7e:	6063      	str	r3, [r4, #4]
 8001a80:	6014      	str	r4, [r2, #0]
 8001a82:	b003      	add	sp, #12
 8001a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a88:	f7ff bfe2 	b.w	8001a50 <__malloc_unlock>
 8001a8c:	42a3      	cmp	r3, r4
 8001a8e:	d908      	bls.n	8001aa2 <_free_r+0x46>
 8001a90:	6825      	ldr	r5, [r4, #0]
 8001a92:	1961      	adds	r1, r4, r5
 8001a94:	428b      	cmp	r3, r1
 8001a96:	bf01      	itttt	eq
 8001a98:	6819      	ldreq	r1, [r3, #0]
 8001a9a:	685b      	ldreq	r3, [r3, #4]
 8001a9c:	1949      	addeq	r1, r1, r5
 8001a9e:	6021      	streq	r1, [r4, #0]
 8001aa0:	e7ed      	b.n	8001a7e <_free_r+0x22>
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	b10b      	cbz	r3, 8001aac <_free_r+0x50>
 8001aa8:	42a3      	cmp	r3, r4
 8001aaa:	d9fa      	bls.n	8001aa2 <_free_r+0x46>
 8001aac:	6811      	ldr	r1, [r2, #0]
 8001aae:	1855      	adds	r5, r2, r1
 8001ab0:	42a5      	cmp	r5, r4
 8001ab2:	d10b      	bne.n	8001acc <_free_r+0x70>
 8001ab4:	6824      	ldr	r4, [r4, #0]
 8001ab6:	4421      	add	r1, r4
 8001ab8:	1854      	adds	r4, r2, r1
 8001aba:	42a3      	cmp	r3, r4
 8001abc:	6011      	str	r1, [r2, #0]
 8001abe:	d1e0      	bne.n	8001a82 <_free_r+0x26>
 8001ac0:	681c      	ldr	r4, [r3, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	6053      	str	r3, [r2, #4]
 8001ac6:	4421      	add	r1, r4
 8001ac8:	6011      	str	r1, [r2, #0]
 8001aca:	e7da      	b.n	8001a82 <_free_r+0x26>
 8001acc:	d902      	bls.n	8001ad4 <_free_r+0x78>
 8001ace:	230c      	movs	r3, #12
 8001ad0:	6003      	str	r3, [r0, #0]
 8001ad2:	e7d6      	b.n	8001a82 <_free_r+0x26>
 8001ad4:	6825      	ldr	r5, [r4, #0]
 8001ad6:	1961      	adds	r1, r4, r5
 8001ad8:	428b      	cmp	r3, r1
 8001ada:	bf04      	itt	eq
 8001adc:	6819      	ldreq	r1, [r3, #0]
 8001ade:	685b      	ldreq	r3, [r3, #4]
 8001ae0:	6063      	str	r3, [r4, #4]
 8001ae2:	bf04      	itt	eq
 8001ae4:	1949      	addeq	r1, r1, r5
 8001ae6:	6021      	streq	r1, [r4, #0]
 8001ae8:	6054      	str	r4, [r2, #4]
 8001aea:	e7ca      	b.n	8001a82 <_free_r+0x26>
 8001aec:	b003      	add	sp, #12
 8001aee:	bd30      	pop	{r4, r5, pc}
 8001af0:	2000014c 	.word	0x2000014c

08001af4 <_read_r>:
 8001af4:	b538      	push	{r3, r4, r5, lr}
 8001af6:	4d07      	ldr	r5, [pc, #28]	; (8001b14 <_read_r+0x20>)
 8001af8:	4604      	mov	r4, r0
 8001afa:	4608      	mov	r0, r1
 8001afc:	4611      	mov	r1, r2
 8001afe:	2200      	movs	r2, #0
 8001b00:	602a      	str	r2, [r5, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	f7ff f893 	bl	8000c2e <_read>
 8001b08:	1c43      	adds	r3, r0, #1
 8001b0a:	d102      	bne.n	8001b12 <_read_r+0x1e>
 8001b0c:	682b      	ldr	r3, [r5, #0]
 8001b0e:	b103      	cbz	r3, 8001b12 <_read_r+0x1e>
 8001b10:	6023      	str	r3, [r4, #0]
 8001b12:	bd38      	pop	{r3, r4, r5, pc}
 8001b14:	20000154 	.word	0x20000154

08001b18 <_fstat_r>:
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4d07      	ldr	r5, [pc, #28]	; (8001b38 <_fstat_r+0x20>)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4604      	mov	r4, r0
 8001b20:	4608      	mov	r0, r1
 8001b22:	4611      	mov	r1, r2
 8001b24:	602b      	str	r3, [r5, #0]
 8001b26:	f7ff f964 	bl	8000df2 <_fstat>
 8001b2a:	1c43      	adds	r3, r0, #1
 8001b2c:	d102      	bne.n	8001b34 <_fstat_r+0x1c>
 8001b2e:	682b      	ldr	r3, [r5, #0]
 8001b30:	b103      	cbz	r3, 8001b34 <_fstat_r+0x1c>
 8001b32:	6023      	str	r3, [r4, #0]
 8001b34:	bd38      	pop	{r3, r4, r5, pc}
 8001b36:	bf00      	nop
 8001b38:	20000154 	.word	0x20000154

08001b3c <_isatty_r>:
 8001b3c:	b538      	push	{r3, r4, r5, lr}
 8001b3e:	4d06      	ldr	r5, [pc, #24]	; (8001b58 <_isatty_r+0x1c>)
 8001b40:	2300      	movs	r3, #0
 8001b42:	4604      	mov	r4, r0
 8001b44:	4608      	mov	r0, r1
 8001b46:	602b      	str	r3, [r5, #0]
 8001b48:	f7ff faba 	bl	80010c0 <_isatty>
 8001b4c:	1c43      	adds	r3, r0, #1
 8001b4e:	d102      	bne.n	8001b56 <_isatty_r+0x1a>
 8001b50:	682b      	ldr	r3, [r5, #0]
 8001b52:	b103      	cbz	r3, 8001b56 <_isatty_r+0x1a>
 8001b54:	6023      	str	r3, [r4, #0]
 8001b56:	bd38      	pop	{r3, r4, r5, pc}
 8001b58:	20000154 	.word	0x20000154

08001b5c <_init>:
 8001b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b5e:	bf00      	nop
 8001b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b62:	bc08      	pop	{r3}
 8001b64:	469e      	mov	lr, r3
 8001b66:	4770      	bx	lr

08001b68 <_fini>:
 8001b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6a:	bf00      	nop
 8001b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b6e:	bc08      	pop	{r3}
 8001b70:	469e      	mov	lr, r3
 8001b72:	4770      	bx	lr
