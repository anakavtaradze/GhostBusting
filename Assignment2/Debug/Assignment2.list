
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf8  0800b560  0800b560  0001b560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c158  0800c158  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c158  0800c158  0001c158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c160  0800c160  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c160  0800c160  0001c160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c164  0800c164  0001c164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800c168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b0  200002d4  0800c43c  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c84  0800c43c  00020c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001523f  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003525  00000000  00000000  00035543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00038a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  00039d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a1ad  00000000  00000000  0003ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179f3  00000000  00000000  0006503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f73ae  00000000  00000000  0007ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173dde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064dc  00000000  00000000  00173e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0017a30c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  0017a330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b548 	.word	0x0800b548

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800b548 	.word	0x0800b548

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b2d      	cmp	r3, #45	; 0x2d
 8000f68:	d119      	bne.n	8000f9e <ParseNumber+0x52>
        minus = 1;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3301      	adds	r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
        i++;
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000f7a:	e010      	b.n	8000f9e <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	461a      	mov	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	3b30      	subs	r3, #48	; 0x30
 8000f8e:	4413      	add	r3, r2
 8000f90:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3301      	adds	r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
        i++;
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b2f      	cmp	r3, #47	; 0x2f
 8000fa4:	d903      	bls.n	8000fae <ParseNumber+0x62>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b39      	cmp	r3, #57	; 0x39
 8000fac:	d9e6      	bls.n	8000f7c <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <ParseNumber+0x6e>
        *cnt = i;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	7bba      	ldrb	r2, [r7, #14]
 8000fb8:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <ParseNumber+0x7a>
        return 0 - sum;
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	425b      	negs	r3, r3
 8000fc4:	e000      	b.n	8000fc8 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000fc6:	68bb      	ldr	r3, [r7, #8]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000fe2:	e019      	b.n	8001018 <ParseIP+0x44>
    hexcnt = 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b2e      	cmp	r3, #46	; 0x2e
 8000fee:	d00e      	beq.n	800100e <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8000ff0:	f107 030e 	add.w	r3, r7, #14
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffa8 	bl	8000f4c <ParseNumber>
 8000ffc:	4601      	mov	r1, r0
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	73fa      	strb	r2, [r7, #15]
 8001004:	461a      	mov	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	4413      	add	r3, r2
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1e1      	bne.n	8000fe4 <ParseIP+0x10>
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	3302      	adds	r3, #2
 800103e:	4934      	ldr	r1, [pc, #208]	; (8001110 <AT_ParseInfo+0xe4>)
 8001040:	4618      	mov	r0, r3
 8001042:	f008 f8cf 	bl	80091e4 <strtok>
 8001046:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001048:	e05a      	b.n	8001100 <AT_ParseInfo+0xd4>
    switch (num++) {
 800104a:	7afb      	ldrb	r3, [r7, #11]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	72fa      	strb	r2, [r7, #11]
 8001050:	2b06      	cmp	r3, #6
 8001052:	d84f      	bhi.n	80010f4 <AT_ParseInfo+0xc8>
 8001054:	a201      	add	r2, pc, #4	; (adr r2, 800105c <AT_ParseInfo+0x30>)
 8001056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105a:	bf00      	nop
 800105c:	08001079 	.word	0x08001079
 8001060:	08001087 	.word	0x08001087
 8001064:	08001097 	.word	0x08001097
 8001068:	080010a7 	.word	0x080010a7
 800106c:	080010b7 	.word	0x080010b7
 8001070:	080010c7 	.word	0x080010c7
 8001074:	080010db 	.word	0x080010db
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2220      	movs	r2, #32
 800107c:	68f9      	ldr	r1, [r7, #12]
 800107e:	4618      	mov	r0, r3
 8001080:	f008 f887 	bl	8009192 <strncpy>
      break;
 8001084:	e037      	b.n	80010f6 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3320      	adds	r3, #32
 800108a:	2218      	movs	r2, #24
 800108c:	68f9      	ldr	r1, [r7, #12]
 800108e:	4618      	mov	r0, r3
 8001090:	f008 f87f 	bl	8009192 <strncpy>
      break;
 8001094:	e02f      	b.n	80010f6 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3338      	adds	r3, #56	; 0x38
 800109a:	2210      	movs	r2, #16
 800109c:	68f9      	ldr	r1, [r7, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	f008 f877 	bl	8009192 <strncpy>
      break;
 80010a4:	e027      	b.n	80010f6 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3348      	adds	r3, #72	; 0x48
 80010aa:	2210      	movs	r2, #16
 80010ac:	68f9      	ldr	r1, [r7, #12]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f008 f86f 	bl	8009192 <strncpy>
      break;
 80010b4:	e01f      	b.n	80010f6 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3358      	adds	r3, #88	; 0x58
 80010ba:	2210      	movs	r2, #16
 80010bc:	68f9      	ldr	r1, [r7, #12]
 80010be:	4618      	mov	r0, r3
 80010c0:	f008 f867 	bl	8009192 <strncpy>
      break;
 80010c4:	e017      	b.n	80010f6 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80010c6:	2100      	movs	r1, #0
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f7ff ff3f 	bl	8000f4c <ParseNumber>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 80010d8:	e00d      	b.n	80010f6 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 80010da:	490e      	ldr	r1, [pc, #56]	; (8001114 <AT_ParseInfo+0xe8>)
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f008 f881 	bl	80091e4 <strtok>
 80010e2:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3368      	adds	r3, #104	; 0x68
 80010e8:	2220      	movs	r2, #32
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f008 f850 	bl	8009192 <strncpy>
      break;
 80010f2:	e000      	b.n	80010f6 <AT_ParseInfo+0xca>

    default: break;
 80010f4:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80010f6:	4906      	ldr	r1, [pc, #24]	; (8001110 <AT_ParseInfo+0xe4>)
 80010f8:	2000      	movs	r0, #0
 80010fa:	f008 f873 	bl	80091e4 <strtok>
 80010fe:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1a1      	bne.n	800104a <AT_ParseInfo+0x1e>
  }
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	0800b590 	.word	0x0800b590
 8001114:	0800b594 	.word	0x0800b594

08001118 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3302      	adds	r3, #2
 800112a:	4952      	ldr	r1, [pc, #328]	; (8001274 <AT_ParseConnSettings+0x15c>)
 800112c:	4618      	mov	r0, r3
 800112e:	f008 f859 	bl	80091e4 <strtok>
 8001132:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001134:	e095      	b.n	8001262 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	73fa      	strb	r2, [r7, #15]
 800113c:	2b0b      	cmp	r3, #11
 800113e:	d87f      	bhi.n	8001240 <AT_ParseConnSettings+0x128>
 8001140:	a201      	add	r2, pc, #4	; (adr r2, 8001148 <AT_ParseConnSettings+0x30>)
 8001142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001146:	bf00      	nop
 8001148:	08001179 	.word	0x08001179
 800114c:	08001187 	.word	0x08001187
 8001150:	08001197 	.word	0x08001197
 8001154:	080011ab 	.word	0x080011ab
 8001158:	080011bf 	.word	0x080011bf
 800115c:	080011d3 	.word	0x080011d3
 8001160:	080011e1 	.word	0x080011e1
 8001164:	080011ef 	.word	0x080011ef
 8001168:	080011fd 	.word	0x080011fd
 800116c:	0800120b 	.word	0x0800120b
 8001170:	08001219 	.word	0x08001219
 8001174:	0800122d 	.word	0x0800122d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2221      	movs	r2, #33	; 0x21
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	4618      	mov	r0, r3
 8001180:	f008 f807 	bl	8009192 <strncpy>
      break;
 8001184:	e05d      	b.n	8001242 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	3321      	adds	r3, #33	; 0x21
 800118a:	2221      	movs	r2, #33	; 0x21
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	4618      	mov	r0, r3
 8001190:	f007 ffff 	bl	8009192 <strncpy>
      break;
 8001194:	e055      	b.n	8001242 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001196:	2100      	movs	r1, #0
 8001198:	68b8      	ldr	r0, [r7, #8]
 800119a:	f7ff fed7 	bl	8000f4c <ParseNumber>
 800119e:	4603      	mov	r3, r0
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80011a8:	e04b      	b.n	8001242 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80011aa:	2100      	movs	r1, #0
 80011ac:	68b8      	ldr	r0, [r7, #8]
 80011ae:	f7ff fecd 	bl	8000f4c <ParseNumber>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 80011bc:	e041      	b.n	8001242 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80011be:	2100      	movs	r1, #0
 80011c0:	68b8      	ldr	r0, [r7, #8]
 80011c2:	f7ff fec3 	bl	8000f4c <ParseNumber>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80011d0:	e037      	b.n	8001242 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3348      	adds	r3, #72	; 0x48
 80011d6:	4619      	mov	r1, r3
 80011d8:	68b8      	ldr	r0, [r7, #8]
 80011da:	f7ff fefb 	bl	8000fd4 <ParseIP>
      break;
 80011de:	e030      	b.n	8001242 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	334c      	adds	r3, #76	; 0x4c
 80011e4:	4619      	mov	r1, r3
 80011e6:	68b8      	ldr	r0, [r7, #8]
 80011e8:	f7ff fef4 	bl	8000fd4 <ParseIP>
      break;
 80011ec:	e029      	b.n	8001242 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3350      	adds	r3, #80	; 0x50
 80011f2:	4619      	mov	r1, r3
 80011f4:	68b8      	ldr	r0, [r7, #8]
 80011f6:	f7ff feed 	bl	8000fd4 <ParseIP>
      break;
 80011fa:	e022      	b.n	8001242 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3354      	adds	r3, #84	; 0x54
 8001200:	4619      	mov	r1, r3
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	f7ff fee6 	bl	8000fd4 <ParseIP>
      break;
 8001208:	e01b      	b.n	8001242 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3358      	adds	r3, #88	; 0x58
 800120e:	4619      	mov	r1, r3
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fedf 	bl	8000fd4 <ParseIP>
      break;
 8001216:	e014      	b.n	8001242 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001218:	2100      	movs	r1, #0
 800121a:	68b8      	ldr	r0, [r7, #8]
 800121c:	f7ff fe96 	bl	8000f4c <ParseNumber>
 8001220:	4603      	mov	r3, r0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800122a:	e00a      	b.n	8001242 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800122c:	2100      	movs	r1, #0
 800122e:	68b8      	ldr	r0, [r7, #8]
 8001230:	f7ff fe8c 	bl	8000f4c <ParseNumber>
 8001234:	4603      	mov	r3, r0
 8001236:	b2da      	uxtb	r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800123e:	e000      	b.n	8001242 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8001240:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001242:	490c      	ldr	r1, [pc, #48]	; (8001274 <AT_ParseConnSettings+0x15c>)
 8001244:	2000      	movs	r0, #0
 8001246:	f007 ffcd 	bl	80091e4 <strtok>
 800124a:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <AT_ParseConnSettings+0x14a>
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	3b01      	subs	r3, #1
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b2c      	cmp	r3, #44	; 0x2c
 800125a:	d102      	bne.n	8001262 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	3301      	adds	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	f47f af66 	bne.w	8001136 <AT_ParseConnSettings+0x1e>
    }
  }
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	0800b590 	.word	0x0800b590

08001278 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  int16_t recv_len = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	827b      	strh	r3, [r7, #18]
  LOCK_WIFI();  

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001292:	68b8      	ldr	r0, [r7, #8]
 8001294:	f7fe ff9c 	bl	80001d0 <strlen>
 8001298:	4603      	mov	r3, r0
 800129a:	b299      	uxth	r1, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80012a2:	461a      	mov	r2, r3
 80012a4:	68b8      	ldr	r0, [r7, #8]
 80012a6:	47a0      	blx	r4
 80012a8:	4603      	mov	r3, r0
 80012aa:	617b      	str	r3, [r7, #20]

  if( ret > 0)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	dd33      	ble.n	800131a <AT_ExecuteCommand+0xa2>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 80012be:	f44f 61af 	mov.w	r1, #1400	; 0x578
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	4798      	blx	r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	827b      	strh	r3, [r7, #18]
    if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 80012ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	dd1c      	ble.n	800130c <AT_ExecuteCommand+0x94>
 80012d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012d6:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80012da:	da17      	bge.n	800130c <AT_ExecuteCommand+0x94>
    {
      *(pdata + recv_len) = 0;
 80012dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 80012e8:	490e      	ldr	r1, [pc, #56]	; (8001324 <AT_ExecuteCommand+0xac>)
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f007 ff64 	bl	80091b8 <strstr>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <AT_ExecuteCommand+0x82>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e010      	b.n	800131c <AT_ExecuteCommand+0xa4>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80012fa:	490b      	ldr	r1, [pc, #44]	; (8001328 <AT_ExecuteCommand+0xb0>)
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f007 ff5b 	bl	80091b8 <strstr>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <AT_ExecuteCommand+0x94>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001308:	2305      	movs	r3, #5
 800130a:	e007      	b.n	800131c <AT_ExecuteCommand+0xa4>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 800130c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001310:	f113 0f04 	cmn.w	r3, #4
 8001314:	d101      	bne.n	800131a <AT_ExecuteCommand+0xa2>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001316:	2306      	movs	r3, #6
 8001318:	e000      	b.n	800131c <AT_ExecuteCommand+0xa4>
    }
  }
  UNLOCK_WIFI();  
  return ES_WIFI_STATUS_IO_ERROR;
 800131a:	2304      	movs	r3, #4
}
 800131c:	4618      	mov	r0, r3
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}
 8001324:	0800b598 	.word	0x0800b598
 8001328:	0800b5a4 	.word	0x0800b5a4

0800132c <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();  
  cmd_len = strlen((char*)cmd);
 8001346:	68b8      	ldr	r0, [r7, #8]
 8001348:	f7fe ff42 	bl	80001d0 <strlen>
 800134c:	4603      	mov	r3, r0
 800134e:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001350:	8a7b      	ldrh	r3, [r7, #18]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <AT_RequestSendData+0x32>
 800135a:	2302      	movs	r3, #2
 800135c:	e053      	b.n	8001406 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800136a:	8a79      	ldrh	r1, [r7, #18]
 800136c:	68b8      	ldr	r0, [r7, #8]
 800136e:	4798      	blx	r3
 8001370:	4603      	mov	r3, r0
 8001372:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001374:	8a3a      	ldrh	r2, [r7, #16]
 8001376:	8a7b      	ldrh	r3, [r7, #18]
 8001378:	429a      	cmp	r2, r3
 800137a:	d143      	bne.n	8001404 <AT_RequestSendData+0xd8>
  {    
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 8001388:	8879      	ldrh	r1, [r7, #2]
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	4798      	blx	r3
 800138e:	4603      	mov	r3, r0
 8001390:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001392:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	429a      	cmp	r2, r3
 800139a:	d131      	bne.n	8001400 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 80013a8:	2100      	movs	r1, #0
 80013aa:	6a38      	ldr	r0, [r7, #32]
 80013ac:	4798      	blx	r3
 80013ae:	4603      	mov	r3, r0
 80013b0:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 80013b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	dd19      	ble.n	80013ee <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 80013ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013be:	6a3a      	ldr	r2, [r7, #32]
 80013c0:	4413      	add	r3, r2
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80013c6:	4912      	ldr	r1, [pc, #72]	; (8001410 <AT_RequestSendData+0xe4>)
 80013c8:	6a38      	ldr	r0, [r7, #32]
 80013ca:	f007 fef5 	bl	80091b8 <strstr>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e016      	b.n	8001406 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80013d8:	490e      	ldr	r1, [pc, #56]	; (8001414 <AT_RequestSendData+0xe8>)
 80013da:	6a38      	ldr	r0, [r7, #32]
 80013dc:	f007 feec 	bl	80091b8 <strstr>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80013e6:	2305      	movs	r3, #5
 80013e8:	e00d      	b.n	8001406 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 80013ea:	2302      	movs	r3, #2
 80013ec:	e00b      	b.n	8001406 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 80013ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013f2:	f113 0f04 	cmn.w	r3, #4
 80013f6:	d101      	bne.n	80013fc <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80013f8:	2306      	movs	r3, #6
 80013fa:	e004      	b.n	8001406 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 80013fc:	2302      	movs	r3, #2
 80013fe:	e002      	b.n	8001406 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001400:	2302      	movs	r3, #2
 8001402:	e000      	b.n	8001406 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001404:	2304      	movs	r3, #4
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	0800b598 	.word	0x0800b598
 8001414:	0800b5a4 	.word	0x0800b5a4

08001418 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001420:	2302      	movs	r3, #2
 8001422:	73fb      	strb	r3, [r7, #15]
  aos_mutex_new(&es_wifi_mutex);
#endif

  LOCK_WIFI();  

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f247 5230 	movw	r2, #30000	; 0x7530
 800142a:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001434:	2000      	movs	r0, #0
 8001436:	4798      	blx	r3
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d113      	bne.n	8001466 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001444:	461a      	mov	r2, r3
 8001446:	490a      	ldr	r1, [pc, #40]	; (8001470 <ES_WIFI_Init+0x58>)
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff15 	bl	8001278 <AT_ExecuteCommand>
 800144e:	4603      	mov	r3, r0
 8001450:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d106      	bne.n	8001466 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800145e:	4619      	mov	r1, r3
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fde3 	bl	800102c <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	0800b5b4 	.word	0x0800b5b4

08001474 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00b      	beq.n	80014a0 <ES_WIFI_RegisterBusIO+0x2c>
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d008      	beq.n	80014a0 <ES_WIFI_RegisterBusIO+0x2c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <ES_WIFI_RegisterBusIO+0x2c>
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <ES_WIFI_RegisterBusIO+0x2c>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 80014a0:	2302      	movs	r3, #2
 80014a2:	e014      	b.n	80014ce <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	4932      	ldr	r1, [pc, #200]	; (80015bc <ES_WIFI_Connect+0xe0>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f007 fdd5 	bl	80090a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001506:	461a      	mov	r2, r3
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff feb5 	bl	8001278 <AT_ExecuteCommand>
 800150e:	4603      	mov	r3, r0
 8001510:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d14b      	bne.n	80015b0 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4927      	ldr	r1, [pc, #156]	; (80015c0 <ES_WIFI_Connect+0xe4>)
 8001522:	4618      	mov	r0, r3
 8001524:	f007 fdbe 	bl	80090a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001534:	461a      	mov	r2, r3
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f7ff fe9e 	bl	8001278 <AT_ExecuteCommand>
 800153c:	4603      	mov	r3, r0
 800153e:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d134      	bne.n	80015b0 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	78fa      	ldrb	r2, [r7, #3]
 800154a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001554:	78fa      	ldrb	r2, [r7, #3]
 8001556:	491b      	ldr	r1, [pc, #108]	; (80015c4 <ES_WIFI_Connect+0xe8>)
 8001558:	4618      	mov	r0, r3
 800155a:	f007 fda3 	bl	80090a4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800156a:	461a      	mov	r2, r3
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f7ff fe83 	bl	8001278 <AT_ExecuteCommand>
 8001572:	4603      	mov	r3, r0
 8001574:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d119      	bne.n	80015b0 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001582:	4911      	ldr	r1, [pc, #68]	; (80015c8 <ES_WIFI_Connect+0xec>)
 8001584:	4618      	mov	r0, r3
 8001586:	f007 fd8d 	bl	80090a4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001596:	461a      	mov	r2, r3
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff fe6d 	bl	8001278 <AT_ExecuteCommand>
 800159e:	4603      	mov	r3, r0
 80015a0:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d103      	bne.n	80015b0 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	0800b5c0 	.word	0x0800b5c0
 80015c0:	0800b5c8 	.word	0x0800b5c8
 80015c4:	0800b5d0 	.word	0x0800b5d0
 80015c8:	0800b5d8 	.word	0x0800b5d8

080015cc <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C?\r");
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015da:	4910      	ldr	r1, [pc, #64]	; (800161c <ES_WIFI_GetNetworkSettings+0x50>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f007 fd61 	bl	80090a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ee:	461a      	mov	r2, r3
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fe41 	bl	8001278 <AT_ExecuteCommand>
 80015f6:	4603      	mov	r3, r0
 80015f8:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d108      	bne.n	8001612 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	338d      	adds	r3, #141	; 0x8d
 800160a:	4619      	mov	r1, r3
 800160c:	4610      	mov	r0, r2
 800160e:	f7ff fd83 	bl	8001118 <AT_ParseConnSettings>
  }
  
  UNLOCK_WIFI();
  return ret;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	0800b5e4 	.word	0x0800b5e4

08001620 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b087      	sub	sp, #28
 8001624:	af02      	add	r7, sp, #8
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	785b      	ldrb	r3, [r3, #1]
 8001638:	461a      	mov	r2, r3
 800163a:	4951      	ldr	r1, [pc, #324]	; (8001780 <ES_WIFI_StartClientConnection+0x160>)
 800163c:	f007 fd32 	bl	80090a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800164c:	461a      	mov	r2, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fe12 	bl	8001278 <AT_ExecuteCommand>
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d114      	bne.n	8001688 <ES_WIFI_StartClientConnection+0x68>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4946      	ldr	r1, [pc, #280]	; (8001784 <ES_WIFI_StartClientConnection+0x164>)
 800166c:	f007 fd1a 	bl	80090a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800167c:	461a      	mov	r2, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fdfa 	bl	8001278 <AT_ExecuteCommand>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->LocalPort > 0))
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d118      	bne.n	80016c0 <ES_WIFI_StartClientConnection+0xa0>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	889b      	ldrh	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d014      	beq.n	80016c0 <ES_WIFI_StartClientConnection+0xa0>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	889b      	ldrh	r3, [r3, #4]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4939      	ldr	r1, [pc, #228]	; (8001788 <ES_WIFI_StartClientConnection+0x168>)
 80016a4:	f007 fcfe 	bl	80090a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016b4:	461a      	mov	r2, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fdde 	bl	8001278 <AT_ExecuteCommand>
 80016bc:	4603      	mov	r3, r0
 80016be:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <ES_WIFI_StartClientConnection+0xd8>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	885b      	ldrh	r3, [r3, #2]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d014      	beq.n	80016f8 <ES_WIFI_StartClientConnection+0xd8>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	885b      	ldrh	r3, [r3, #2]
 80016d8:	461a      	mov	r2, r3
 80016da:	492c      	ldr	r1, [pc, #176]	; (800178c <ES_WIFI_StartClientConnection+0x16c>)
 80016dc:	f007 fce2 	bl	80090a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ec:	461a      	mov	r2, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fdc2 	bl	8001278 <AT_ExecuteCommand>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_CONNECTION))
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d124      	bne.n	8001748 <ES_WIFI_StartClientConnection+0x128>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d120      	bne.n	8001748 <ES_WIFI_StartClientConnection+0x128>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	799b      	ldrb	r3, [r3, #6]
 8001710:	4619      	mov	r1, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	79db      	ldrb	r3, [r3, #7]
 8001716:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800171c:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	9200      	str	r2, [sp, #0]
 8001726:	4623      	mov	r3, r4
 8001728:	460a      	mov	r2, r1
 800172a:	4919      	ldr	r1, [pc, #100]	; (8001790 <ES_WIFI_StartClientConnection+0x170>)
 800172c:	f007 fcba 	bl	80090a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800173c:	461a      	mov	r2, r3
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fd9a 	bl	8001278 <AT_ExecuteCommand>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d112      	bne.n	8001774 <ES_WIFI_StartClientConnection+0x154>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001754:	490f      	ldr	r1, [pc, #60]	; (8001794 <ES_WIFI_StartClientConnection+0x174>)
 8001756:	4618      	mov	r0, r3
 8001758:	f007 fca4 	bl	80090a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001768:	461a      	mov	r2, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fd84 	bl	8001278 <AT_ExecuteCommand>
 8001770:	4603      	mov	r3, r0
 8001772:	73fb      	strb	r3, [r7, #15]
  }
  
  UNLOCK_WIFI();
  return ret;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bd90      	pop	{r4, r7, pc}
 800177e:	bf00      	nop
 8001780:	0800b6b8 	.word	0x0800b6b8
 8001784:	0800b6c0 	.word	0x0800b6c0
 8001788:	0800b6c8 	.word	0x0800b6c8
 800178c:	0800b6d0 	.word	0x0800b6d0
 8001790:	0800b6d8 	.word	0x0800b6d8
 8001794:	0800b6e8 	.word	0x0800b6e8

08001798 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af02      	add	r7, sp, #8
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	461a      	mov	r2, r3
 80017a4:	460b      	mov	r3, r1
 80017a6:	72fb      	strb	r3, [r7, #11]
 80017a8:	4613      	mov	r3, r2
 80017aa:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80017ac:	2302      	movs	r3, #2
 80017ae:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80017b0:	893b      	ldrh	r3, [r7, #8]
 80017b2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80017b6:	d302      	bcc.n	80017be <ES_WIFI_SendData+0x26>
 80017b8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80017bc:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	893a      	ldrh	r2, [r7, #8]
 80017c2:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017ca:	7afa      	ldrb	r2, [r7, #11]
 80017cc:	4942      	ldr	r1, [pc, #264]	; (80018d8 <ES_WIFI_SendData+0x140>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f007 fc68 	bl	80090a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017e0:	461a      	mov	r2, r3
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f7ff fd48 	bl	8001278 <AT_ExecuteCommand>
 80017e8:	4603      	mov	r3, r0
 80017ea:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d15e      	bne.n	80018b0 <ES_WIFI_SendData+0x118>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fa:	4938      	ldr	r1, [pc, #224]	; (80018dc <ES_WIFI_SendData+0x144>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f007 fc51 	bl	80090a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800180e:	461a      	mov	r2, r3
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f7ff fd31 	bl	8001278 <AT_ExecuteCommand>
 8001816:	4603      	mov	r3, r0
 8001818:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d13d      	bne.n	800189c <ES_WIFI_SendData+0x104>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001826:	893a      	ldrh	r2, [r7, #8]
 8001828:	492d      	ldr	r1, [pc, #180]	; (80018e0 <ES_WIFI_SendData+0x148>)
 800182a:	4618      	mov	r0, r3
 800182c:	f007 fc3a 	bl	80090a4 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800183c:	893a      	ldrh	r2, [r7, #8]
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	4613      	mov	r3, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f7ff fd71 	bl	800132c <AT_RequestSendData>
 800184a:	4603      	mov	r3, r0
 800184c:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d119      	bne.n	8001888 <ES_WIFI_SendData+0xf0>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800185a:	4922      	ldr	r1, [pc, #136]	; (80018e4 <ES_WIFI_SendData+0x14c>)
 800185c:	4618      	mov	r0, r3
 800185e:	f007 fcab 	bl	80091b8 <strstr>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d02c      	beq.n	80018c2 <ES_WIFI_SendData+0x12a>
        {
          _DEBUG_("SEnd Data detect error %s\n", (char *)Obj->CmdData);
 8001868:	f240 722c 	movw	r2, #1836	; 0x72c
 800186c:	491e      	ldr	r1, [pc, #120]	; (80018e8 <ES_WIFI_SendData+0x150>)
 800186e:	481f      	ldr	r0, [pc, #124]	; (80018ec <ES_WIFI_SendData+0x154>)
 8001870:	f007 fb46 	bl	8008f00 <iprintf>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800187a:	4619      	mov	r1, r3
 800187c:	481c      	ldr	r0, [pc, #112]	; (80018f0 <ES_WIFI_SendData+0x158>)
 800187e:	f007 fb3f 	bl	8008f00 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001882:	2302      	movs	r3, #2
 8001884:	75fb      	strb	r3, [r7, #23]
 8001886:	e01c      	b.n	80018c2 <ES_WIFI_SendData+0x12a>
        }
      }
      else
      {
        _DEBUG_("Send Data command failed\n");
 8001888:	f240 7232 	movw	r2, #1842	; 0x732
 800188c:	4916      	ldr	r1, [pc, #88]	; (80018e8 <ES_WIFI_SendData+0x150>)
 800188e:	4817      	ldr	r0, [pc, #92]	; (80018ec <ES_WIFI_SendData+0x154>)
 8001890:	f007 fb36 	bl	8008f00 <iprintf>
 8001894:	4817      	ldr	r0, [pc, #92]	; (80018f4 <ES_WIFI_SendData+0x15c>)
 8001896:	f007 fbb9 	bl	800900c <puts>
 800189a:	e012      	b.n	80018c2 <ES_WIFI_SendData+0x12a>
      }
    }
    else
    {
      _DEBUG_("S2 command failed\n");
 800189c:	f240 7237 	movw	r2, #1847	; 0x737
 80018a0:	4911      	ldr	r1, [pc, #68]	; (80018e8 <ES_WIFI_SendData+0x150>)
 80018a2:	4812      	ldr	r0, [pc, #72]	; (80018ec <ES_WIFI_SendData+0x154>)
 80018a4:	f007 fb2c 	bl	8008f00 <iprintf>
 80018a8:	4813      	ldr	r0, [pc, #76]	; (80018f8 <ES_WIFI_SendData+0x160>)
 80018aa:	f007 fbaf 	bl	800900c <puts>
 80018ae:	e008      	b.n	80018c2 <ES_WIFI_SendData+0x12a>
    }
  }
  else
  {
   _DEBUG_("P0 command failed\n");
 80018b0:	f240 723c 	movw	r2, #1852	; 0x73c
 80018b4:	490c      	ldr	r1, [pc, #48]	; (80018e8 <ES_WIFI_SendData+0x150>)
 80018b6:	480d      	ldr	r0, [pc, #52]	; (80018ec <ES_WIFI_SendData+0x154>)
 80018b8:	f007 fb22 	bl	8008f00 <iprintf>
 80018bc:	480f      	ldr	r0, [pc, #60]	; (80018fc <ES_WIFI_SendData+0x164>)
 80018be:	f007 fba5 	bl	800900c <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d102      	bne.n	80018ce <ES_WIFI_SendData+0x136>
  {
    *SentLen = 0;
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	2200      	movs	r2, #0
 80018cc:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	0800b6b8 	.word	0x0800b6b8
 80018dc:	0800b744 	.word	0x0800b744
 80018e0:	0800b74c 	.word	0x0800b74c
 80018e4:	0800b758 	.word	0x0800b758
 80018e8:	0800b760 	.word	0x0800b760
 80018ec:	0800b778 	.word	0x0800b778
 80018f0:	0800b780 	.word	0x0800b780
 80018f4:	0800b79c 	.word	0x0800b79c
 80018f8:	0800b7b8 	.word	0x0800b7b8
 80018fc:	0800b7cc 	.word	0x0800b7cc

08001900 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	; 0x30
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001908:	4b56      	ldr	r3, [pc, #344]	; (8001a64 <SPI_WIFI_MspInit+0x164>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	4a55      	ldr	r2, [pc, #340]	; (8001a64 <SPI_WIFI_MspInit+0x164>)
 800190e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001912:	6593      	str	r3, [r2, #88]	; 0x58
 8001914:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <SPI_WIFI_MspInit+0x164>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001920:	4b50      	ldr	r3, [pc, #320]	; (8001a64 <SPI_WIFI_MspInit+0x164>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	4a4f      	ldr	r2, [pc, #316]	; (8001a64 <SPI_WIFI_MspInit+0x164>)
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192c:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <SPI_WIFI_MspInit+0x164>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001938:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <SPI_WIFI_MspInit+0x164>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	4a49      	ldr	r2, [pc, #292]	; (8001a64 <SPI_WIFI_MspInit+0x164>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <SPI_WIFI_MspInit+0x164>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001950:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <SPI_WIFI_MspInit+0x164>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001954:	4a43      	ldr	r2, [pc, #268]	; (8001a64 <SPI_WIFI_MspInit+0x164>)
 8001956:	f043 0310 	orr.w	r3, r3, #16
 800195a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195c:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <SPI_WIFI_MspInit+0x164>)
 800195e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196e:	483e      	ldr	r0, [pc, #248]	; (8001a68 <SPI_WIFI_MspInit+0x168>)
 8001970:	f003 fcf0 	bl	8005354 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001978:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	4836      	ldr	r0, [pc, #216]	; (8001a68 <SPI_WIFI_MspInit+0x168>)
 800198e:	f003 fa2b 	bl	8004de8 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001992:	2302      	movs	r3, #2
 8001994:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001996:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <SPI_WIFI_MspInit+0x16c>)
 8001998:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	4831      	ldr	r0, [pc, #196]	; (8001a70 <SPI_WIFI_MspInit+0x170>)
 80019aa:	f003 fa1d 	bl	8004de8 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80019ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4829      	ldr	r0, [pc, #164]	; (8001a70 <SPI_WIFI_MspInit+0x170>)
 80019cc:	f003 fa0c 	bl	8004de8 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET ); 
 80019d0:	2201      	movs	r2, #1
 80019d2:	2101      	movs	r1, #1
 80019d4:	4826      	ldr	r0, [pc, #152]	; (8001a70 <SPI_WIFI_MspInit+0x170>)
 80019d6:	f003 fcbd 	bl	8005354 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80019da:	2301      	movs	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80019e6:	2301      	movs	r3, #1
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	481f      	ldr	r0, [pc, #124]	; (8001a70 <SPI_WIFI_MspInit+0x170>)
 80019f2:	f003 f9f9 	bl	8004de8 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80019f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019fa:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001a04:	2301      	movs	r3, #1
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001a08:	2306      	movs	r3, #6
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	4818      	ldr	r0, [pc, #96]	; (8001a74 <SPI_WIFI_MspInit+0x174>)
 8001a14:	f003 f9e8 	bl	8004de8 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001a26:	2301      	movs	r3, #1
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	480f      	ldr	r0, [pc, #60]	; (8001a74 <SPI_WIFI_MspInit+0x174>)
 8001a36:	f003 f9d7 	bl	8004de8 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a3e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001a4c:	2306      	movs	r3, #6
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4807      	ldr	r0, [pc, #28]	; (8001a74 <SPI_WIFI_MspInit+0x174>)
 8001a58:	f003 f9c6 	bl	8004de8 <HAL_GPIO_Init>
}
 8001a5c:	bf00      	nop
 8001a5e:	3730      	adds	r7, #48	; 0x30
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	48000400 	.word	0x48000400
 8001a6c:	10110000 	.word	0x10110000
 8001a70:	48001000 	.word	0x48001000
 8001a74:	48000800 	.word	0x48000800

08001a78 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d13a      	bne.n	8001b02 <SPI_WIFI_Init+0x8a>
  {
    hspi.Instance               = SPI3;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001a8e:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <SPI_WIFI_Init+0xa4>)
 8001a90:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001a92:	4821      	ldr	r0, [pc, #132]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001a94:	f7ff ff34 	bl	8001900 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001a9a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a9e:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001aa8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001aac:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001aba:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac0:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <SPI_WIFI_Init+0xa0>)
 8001ae2:	f004 fa99 	bl	8006018 <HAL_SPI_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	e00d      	b.n	8001b0e <SPI_WIFI_Init+0x96>
    }

	 // Enable Interrupt for Data Ready pin , GPIO_PIN1
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, 0x0F, 0x00);
 8001af2:	2200      	movs	r2, #0
 8001af4:	210f      	movs	r1, #15
 8001af6:	2007      	movs	r0, #7
 8001af8:	f003 f8ff 	bl	8004cfa <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001afc:	2007      	movs	r0, #7
 8001afe:	f003 f918 	bl	8004d32 <HAL_NVIC_EnableIRQ>
    
    // create Mutex and Semaphore
	RTOS_CREATE_SEM_MUTEX();
  }
  
  rc= SPI_WIFI_ResetModule();
 8001b02:	f000 f80d 	bl	8001b20 <SPI_WIFI_ResetModule>
 8001b06:	4603      	mov	r3, r0
 8001b08:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200002f0 	.word	0x200002f0
 8001b1c:	40003c00 	.word	0x40003c00

08001b20 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001b26:	f002 ffdf 	bl	8004ae8 <HAL_GetTick>
 8001b2a:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b36:	4830      	ldr	r0, [pc, #192]	; (8001bf8 <SPI_WIFI_ResetModule+0xd8>)
 8001b38:	f003 fc0c 	bl	8005354 <HAL_GPIO_WritePin>
 8001b3c:	200a      	movs	r0, #10
 8001b3e:	f002 ffdf 	bl	8004b00 <HAL_Delay>
 8001b42:	2201      	movs	r2, #1
 8001b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b48:	482b      	ldr	r0, [pc, #172]	; (8001bf8 <SPI_WIFI_ResetModule+0xd8>)
 8001b4a:	f003 fc03 	bl	8005354 <HAL_GPIO_WritePin>
 8001b4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b52:	f002 ffd5 	bl	8004b00 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001b56:	2200      	movs	r2, #0
 8001b58:	2101      	movs	r1, #1
 8001b5a:	4827      	ldr	r0, [pc, #156]	; (8001bf8 <SPI_WIFI_ResetModule+0xd8>)
 8001b5c:	f003 fbfa 	bl	8005354 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001b60:	200f      	movs	r0, #15
 8001b62:	f000 f977 	bl	8001e54 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8001b66:	e020      	b.n	8001baa <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	463a      	mov	r2, r7
 8001b6c:	18d1      	adds	r1, r2, r3
 8001b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b72:	2201      	movs	r2, #1
 8001b74:	4821      	ldr	r0, [pc, #132]	; (8001bfc <SPI_WIFI_ResetModule+0xdc>)
 8001b76:	f004 fc67 	bl	8006448 <HAL_SPI_Receive>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	3302      	adds	r3, #2
 8001b82:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001b84:	f002 ffb0 	bl	8004ae8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b92:	d202      	bcs.n	8001b9a <SPI_WIFI_ResetModule+0x7a>
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS(); 
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4816      	ldr	r0, [pc, #88]	; (8001bf8 <SPI_WIFI_ResetModule+0xd8>)
 8001ba0:	f003 fbd8 	bl	8005354 <HAL_GPIO_WritePin>
      return -1;
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba8:	e021      	b.n	8001bee <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001baa:	2102      	movs	r1, #2
 8001bac:	4812      	ldr	r0, [pc, #72]	; (8001bf8 <SPI_WIFI_ResetModule+0xd8>)
 8001bae:	f003 fbb9 	bl	8005324 <HAL_GPIO_ReadPin>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d0d7      	beq.n	8001b68 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS(); 
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2101      	movs	r1, #1
 8001bbc:	480e      	ldr	r0, [pc, #56]	; (8001bf8 <SPI_WIFI_ResetModule+0xd8>)
 8001bbe:	f003 fbc9 	bl	8005354 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001bc2:	783b      	ldrb	r3, [r7, #0]
 8001bc4:	2b15      	cmp	r3, #21
 8001bc6:	d10e      	bne.n	8001be6 <SPI_WIFI_ResetModule+0xc6>
 8001bc8:	787b      	ldrb	r3, [r7, #1]
 8001bca:	2b15      	cmp	r3, #21
 8001bcc:	d10b      	bne.n	8001be6 <SPI_WIFI_ResetModule+0xc6>
 8001bce:	78bb      	ldrb	r3, [r7, #2]
 8001bd0:	2b0d      	cmp	r3, #13
 8001bd2:	d108      	bne.n	8001be6 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001bd6:	2b0a      	cmp	r3, #10
 8001bd8:	d105      	bne.n	8001be6 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001bda:	793b      	ldrb	r3, [r7, #4]
 8001bdc:	2b3e      	cmp	r3, #62	; 0x3e
 8001bde:	d102      	bne.n	8001be6 <SPI_WIFI_ResetModule+0xc6>
 8001be0:	797b      	ldrb	r3, [r7, #5]
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d002      	beq.n	8001bec <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	e000      	b.n	8001bee <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	48001000 	.word	0x48001000
 8001bfc:	200002f0 	.word	0x200002f0

08001c00 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <SPI_WIFI_DeInit+0x10>)
 8001c06:	f004 fa91 	bl	800612c <HAL_SPI_DeInit>
  RTOS_FREE_SEM_MUTEX();
  return 0;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200002f0 	.word	0x200002f0

08001c14 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001c1c:	f002 ff64 	bl	8004ae8 <HAL_GetTick>
 8001c20:	4603      	mov	r3, r0
 8001c22:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8001c24:	e00a      	b.n	8001c3c <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001c26:	f002 ff5f 	bl	8004ae8 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1ad2      	subs	r2, r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d902      	bls.n	8001c3c <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e007      	b.n	8001c4c <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <wait_cmddata_rdy_high+0x40>)
 8001c40:	f003 fb70 	bl	8005324 <HAL_GPIO_ReadPin>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d1ed      	bne.n	8001c26 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	48001000 	.word	0x48001000

08001c58 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout); 
#else
  int tickstart = HAL_GetTick();
 8001c60:	f002 ff42 	bl	8004ae8 <HAL_GetTick>
 8001c64:	4603      	mov	r3, r0
 8001c66:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001c68:	e00a      	b.n	8001c80 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001c6a:	f002 ff3d 	bl	8004ae8 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1ad2      	subs	r2, r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d902      	bls.n	8001c80 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	e004      	b.n	8001c8a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <wait_cmddata_rdy_rising_event+0x3c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d0f0      	beq.n	8001c6a <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0; 
 8001c88:	2300      	movs	r3, #0
#endif
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000354 	.word	0x20000354

08001c98 <SPI_WIFI_ReceiveData>:
}
*/


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS(); 
 8001caa:	2201      	movs	r2, #1
 8001cac:	2101      	movs	r1, #1
 8001cae:	4831      	ldr	r0, [pc, #196]	; (8001d74 <SPI_WIFI_ReceiveData+0xdc>)
 8001cb0:	f003 fb50 	bl	8005354 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f000 f8cd 	bl	8001e54 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ffcb 	bl	8001c58 <wait_cmddata_rdy_rising_event>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	da02      	bge.n	8001cce <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001cc8:	f06f 0302 	mvn.w	r3, #2
 8001ccc:	e04e      	b.n	8001d6c <SPI_WIFI_ReceiveData+0xd4>
  }

  LOCK_SPI();  
  WIFI_ENABLE_NSS(); 
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4828      	ldr	r0, [pc, #160]	; (8001d74 <SPI_WIFI_ReceiveData+0xdc>)
 8001cd4:	f003 fb3e 	bl	8005354 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001cd8:	200f      	movs	r0, #15
 8001cda:	f000 f8bb 	bl	8001e54 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001cde:	e037      	b.n	8001d50 <SPI_WIFI_ReceiveData+0xb8>
  {
    if((length < len) || (!len))
 8001ce0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ce4:	897b      	ldrh	r3, [r7, #10]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	db02      	blt.n	8001cf0 <SPI_WIFI_ReceiveData+0x58>
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d136      	bne.n	8001d5e <SPI_WIFI_ReceiveData+0xc6>
    {
      //spi_rx_event=1;
      if (HAL_SPI_Receive(&hspi, tmp, 1, 0xFFFFFFFF) != HAL_OK) {
 8001cf0:	f107 0114 	add.w	r1, r7, #20
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	481f      	ldr	r0, [pc, #124]	; (8001d78 <SPI_WIFI_ReceiveData+0xe0>)
 8001cfc:	f004 fba4 	bl	8006448 <HAL_SPI_Receive>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <SPI_WIFI_ReceiveData+0x7e>
        WIFI_DISABLE_NSS();
 8001d06:	2201      	movs	r2, #1
 8001d08:	2101      	movs	r1, #1
 8001d0a:	481a      	ldr	r0, [pc, #104]	; (8001d74 <SPI_WIFI_ReceiveData+0xdc>)
 8001d0c:	f003 fb22 	bl	8005354 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
 8001d14:	e02a      	b.n	8001d6c <SPI_WIFI_ReceiveData+0xd4>
      }
  
      //wait_spi_rx_event(timeout);

      pData[0] = tmp[0];
 8001d16:	7d3a      	ldrb	r2, [r7, #20]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	7d7a      	ldrb	r2, [r7, #21]
 8001d22:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001d24:	8afb      	ldrh	r3, [r7, #22]
 8001d26:	3302      	adds	r3, #2
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3302      	adds	r3, #2
 8001d30:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8001d32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d36:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001d3a:	db09      	blt.n	8001d50 <SPI_WIFI_ReceiveData+0xb8>
        WIFI_DISABLE_NSS();
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2101      	movs	r1, #1
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <SPI_WIFI_ReceiveData+0xdc>)
 8001d42:	f003 fb07 	bl	8005354 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();    
 8001d46:	f7ff feeb 	bl	8001b20 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001d4a:	f06f 0303 	mvn.w	r3, #3
 8001d4e:	e00d      	b.n	8001d6c <SPI_WIFI_ReceiveData+0xd4>
  while (WIFI_IS_CMDDATA_READY())
 8001d50:	2102      	movs	r1, #2
 8001d52:	4808      	ldr	r0, [pc, #32]	; (8001d74 <SPI_WIFI_ReceiveData+0xdc>)
 8001d54:	f003 fae6 	bl	8005324 <HAL_GPIO_ReadPin>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d0c0      	beq.n	8001ce0 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS(); 
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2101      	movs	r1, #1
 8001d62:	4804      	ldr	r0, [pc, #16]	; (8001d74 <SPI_WIFI_ReceiveData+0xdc>)
 8001d64:	f003 faf6 	bl	8005354 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001d68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	48001000 	.word	0x48001000
 8001d78:	200002f0 	.word	0x200002f0

08001d7c <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	460b      	mov	r3, r1
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff41 	bl	8001c14 <wait_cmddata_rdy_high>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da02      	bge.n	8001d9e <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	e043      	b.n	8001e26 <SPI_WIFI_SendData+0xaa>
  }
    
  // arm to detect rising event
  cmddata_rdy_rising_event=1;
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <SPI_WIFI_SendData+0xb4>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001da4:	2200      	movs	r2, #0
 8001da6:	2101      	movs	r1, #1
 8001da8:	4822      	ldr	r0, [pc, #136]	; (8001e34 <SPI_WIFI_SendData+0xb8>)
 8001daa:	f003 fad3 	bl	8005354 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001dae:	200f      	movs	r0, #15
 8001db0:	f000 f850 	bl	8001e54 <SPI_WIFI_DelayUs>
  if (len > 1)
 8001db4:	897b      	ldrh	r3, [r7, #10]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d913      	bls.n	8001de2 <SPI_WIFI_SendData+0x66>
  {
    //spi_tx_event=1;
    if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , len/2, 0xFFFFFFFF) != HAL_OK)
 8001dba:	897b      	ldrh	r3, [r7, #10]
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	481c      	ldr	r0, [pc, #112]	; (8001e38 <SPI_WIFI_SendData+0xbc>)
 8001dc8:	f004 f9d8 	bl	800617c <HAL_SPI_Transmit>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <SPI_WIFI_SendData+0x66>
    {
      WIFI_DISABLE_NSS();
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	4817      	ldr	r0, [pc, #92]	; (8001e34 <SPI_WIFI_SendData+0xb8>)
 8001dd8:	f003 fabc 	bl	8005354 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8001de0:	e021      	b.n	8001e26 <SPI_WIFI_SendData+0xaa>
    }
    //wait_spi_tx_event(timeout);
  }
  
  if ( len & 1)
 8001de2:	897b      	ldrh	r3, [r7, #10]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01a      	beq.n	8001e22 <SPI_WIFI_SendData+0xa6>
  {
    Padding[0] = pdata[len-1];
 8001dec:	897b      	ldrh	r3, [r7, #10]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8001df8:	230a      	movs	r3, #10
 8001dfa:	757b      	strb	r3, [r7, #21]

    //spi_tx_event=1;
    if( HAL_SPI_Transmit(&hspi, Padding, 1, 0xFFFFFFFF) != HAL_OK)
 8001dfc:	f107 0114 	add.w	r1, r7, #20
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295
 8001e04:	2201      	movs	r2, #1
 8001e06:	480c      	ldr	r0, [pc, #48]	; (8001e38 <SPI_WIFI_SendData+0xbc>)
 8001e08:	f004 f9b8 	bl	800617c <HAL_SPI_Transmit>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <SPI_WIFI_SendData+0xa6>
    {
      WIFI_DISABLE_NSS();
 8001e12:	2201      	movs	r2, #1
 8001e14:	2101      	movs	r1, #1
 8001e16:	4807      	ldr	r0, [pc, #28]	; (8001e34 <SPI_WIFI_SendData+0xb8>)
 8001e18:	f003 fa9c 	bl	8005354 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e20:	e001      	b.n	8001e26 <SPI_WIFI_SendData+0xaa>
    }  
    //wait_spi_tx_event(timeout);
    
  }
  return len;
 8001e22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000354 	.word	0x20000354
 8001e34:	48001000 	.word	0x48001000
 8001e38:	200002f0 	.word	0x200002f0

08001e3c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f002 fe5b 	bl	8004b00 <HAL_Delay>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t freq = (SystemCoreClock/1000000L);
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <SPI_WIFI_DelayUs+0x8c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <SPI_WIFI_DelayUs+0x90>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0c9b      	lsrs	r3, r3, #18
 8001e68:	617b      	str	r3, [r7, #20]
  uint32_t ctrl;
  uint32_t cycle;
  
  n=n*freq;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	607b      	str	r3, [r7, #4]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001e74:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <SPI_WIFI_DelayUs+0x94>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <SPI_WIFI_DelayUs+0x94>)
 8001e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7e:	60d3      	str	r3, [r2, #12]
  ctrl = DWT->CTRL;
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <SPI_WIFI_DelayUs+0x98>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	613b      	str	r3, [r7, #16]
  DWT->CTRL |= 1 ; // enable  counter
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <SPI_WIFI_DelayUs+0x98>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <SPI_WIFI_DelayUs+0x98>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6013      	str	r3, [r2, #0]
  cycle = DWT->CYCCNT;
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <SPI_WIFI_DelayUs+0x98>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	60fb      	str	r3, [r7, #12]
  n += cycle;
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	607b      	str	r3, [r7, #4]
  if (n < cycle) 
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d205      	bcs.n	8001eb4 <SPI_WIFI_DelayUs+0x60>
  {
	 // wait for rewrap
	 while(n < DWT->CYCCNT);
 8001ea8:	bf00      	nop
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <SPI_WIFI_DelayUs+0x98>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d3fa      	bcc.n	8001eaa <SPI_WIFI_DelayUs+0x56>
  }
  
  while(DWT->CYCCNT < n);
 8001eb4:	bf00      	nop
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <SPI_WIFI_DelayUs+0x98>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8fa      	bhi.n	8001eb6 <SPI_WIFI_DelayUs+0x62>
  
  DWT->CTRL &= ~(ctrl & 1 ) ; // restore counter mode
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <SPI_WIFI_DelayUs+0x98>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	4907      	ldr	r1, [pc, #28]	; (8001eec <SPI_WIFI_DelayUs+0x98>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
  return;
 8001ed2:	bf00      	nop
}
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000028 	.word	0x20000028
 8001ee4:	431bde83 	.word	0x431bde83
 8001ee8:	e000edf0 	.word	0xe000edf0
 8001eec:	e0001000 	.word	0xe0001000

08001ef0 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <SPI_WIFI_ISR+0x1c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d102      	bne.n	8001f02 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event=0;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <SPI_WIFI_ISR+0x1c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
   }
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	20000354 	.word	0x20000354

08001f10 <Get_Sensor_Readings>:
	const uint16_t DEST_PORT = 2028;		// 'server' port number - this is the port Packet Sender listens to (as you set in Packer Sender)
												// and should be allowed by the OS firewall
#endif
SPI_HandleTypeDef hspi3;

void Get_Sensor_Readings(){
 8001f10:	b5b0      	push	{r4, r5, r7, lr}
 8001f12:	af00      	add	r7, sp, #0
    BSP_MAGNETO_GetXYZ(mag_data_i16);
 8001f14:	48b6      	ldr	r0, [pc, #728]	; (80021f0 <Get_Sensor_Readings+0x2e0>)
 8001f16:	f001 ff9d 	bl	8003e54 <BSP_MAGNETO_GetXYZ>
    BSP_ACCELERO_AccGetXYZ(accel_data_i16);
 8001f1a:	48b6      	ldr	r0, [pc, #728]	; (80021f4 <Get_Sensor_Readings+0x2e4>)
 8001f1c:	f001 fece 	bl	8003cbc <BSP_ACCELERO_AccGetXYZ>
    BSP_GYRO_GetXYZ(gyro_data_il6);
 8001f20:	48b5      	ldr	r0, [pc, #724]	; (80021f8 <Get_Sensor_Readings+0x2e8>)
 8001f22:	f001 ff25 	bl	8003d70 <BSP_GYRO_GetXYZ>

    mag_data[0] = ALPHA * (float)mag_data_i16[0] + (1 - ALPHA) * mag_data[0];
 8001f26:	4bb2      	ldr	r3, [pc, #712]	; (80021f0 <Get_Sensor_Readings+0x2e0>)
 8001f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f34:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80021fc <Get_Sensor_Readings+0x2ec>
 8001f38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f3c:	4bb0      	ldr	r3, [pc, #704]	; (8002200 <Get_Sensor_Readings+0x2f0>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8002204 <Get_Sensor_Readings+0x2f4>
 8001f46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4e:	4bac      	ldr	r3, [pc, #688]	; (8002200 <Get_Sensor_Readings+0x2f0>)
 8001f50:	edc3 7a00 	vstr	s15, [r3]
    mag_data[1] = ALPHA * (float)mag_data_i16[1] + (1 - ALPHA) * mag_data[1];
 8001f54:	4ba6      	ldr	r3, [pc, #664]	; (80021f0 <Get_Sensor_Readings+0x2e0>)
 8001f56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f62:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80021fc <Get_Sensor_Readings+0x2ec>
 8001f66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f6a:	4ba5      	ldr	r3, [pc, #660]	; (8002200 <Get_Sensor_Readings+0x2f0>)
 8001f6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f70:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8002204 <Get_Sensor_Readings+0x2f4>
 8001f74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7c:	4ba0      	ldr	r3, [pc, #640]	; (8002200 <Get_Sensor_Readings+0x2f0>)
 8001f7e:	edc3 7a01 	vstr	s15, [r3, #4]
    mag_data[2] = ALPHA * (float)mag_data_i16[2] + (1 - ALPHA) * mag_data[2];
 8001f82:	4b9b      	ldr	r3, [pc, #620]	; (80021f0 <Get_Sensor_Readings+0x2e0>)
 8001f84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f90:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80021fc <Get_Sensor_Readings+0x2ec>
 8001f94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f98:	4b99      	ldr	r3, [pc, #612]	; (8002200 <Get_Sensor_Readings+0x2f0>)
 8001f9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f9e:	eddf 6a99 	vldr	s13, [pc, #612]	; 8002204 <Get_Sensor_Readings+0x2f4>
 8001fa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	4b95      	ldr	r3, [pc, #596]	; (8002200 <Get_Sensor_Readings+0x2f0>)
 8001fac:	edc3 7a02 	vstr	s15, [r3, #8]

    t_data = ALPHA * BSP_TSENSOR_ReadTemp() + (1 - ALPHA) * t_data;
 8001fb0:	f001 ffb2 	bl	8003f18 <BSP_TSENSOR_ReadTemp>
 8001fb4:	eef0 7a40 	vmov.f32	s15, s0
 8001fb8:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80021fc <Get_Sensor_Readings+0x2ec>
 8001fbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fc0:	4b91      	ldr	r3, [pc, #580]	; (8002208 <Get_Sensor_Readings+0x2f8>)
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8002204 <Get_Sensor_Readings+0x2f4>
 8001fca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd2:	4b8d      	ldr	r3, [pc, #564]	; (8002208 <Get_Sensor_Readings+0x2f8>)
 8001fd4:	edc3 7a00 	vstr	s15, [r3]
    h_data = ALPHA * BSP_HSENSOR_ReadHumidity() + (1 - ALPHA) * h_data;
 8001fd8:	f001 ff02 	bl	8003de0 <BSP_HSENSOR_ReadHumidity>
 8001fdc:	eef0 7a40 	vmov.f32	s15, s0
 8001fe0:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80021fc <Get_Sensor_Readings+0x2ec>
 8001fe4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fe8:	4b88      	ldr	r3, [pc, #544]	; (800220c <Get_Sensor_Readings+0x2fc>)
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	eddf 6a85 	vldr	s13, [pc, #532]	; 8002204 <Get_Sensor_Readings+0x2f4>
 8001ff2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffa:	4b84      	ldr	r3, [pc, #528]	; (800220c <Get_Sensor_Readings+0x2fc>)
 8001ffc:	edc3 7a00 	vstr	s15, [r3]

    accel_data[0] = ALPHA * (float)accel_data_i16[0] * (9.8/1000.0f) + (1 - ALPHA) * accel_data[0];
 8002000:	4b7c      	ldr	r3, [pc, #496]	; (80021f4 <Get_Sensor_Readings+0x2e4>)
 8002002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200e:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80021fc <Get_Sensor_Readings+0x2ec>
 8002012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002016:	ee17 0a90 	vmov	r0, s15
 800201a:	f7fe fa95 	bl	8000548 <__aeabi_f2d>
 800201e:	a372      	add	r3, pc, #456	; (adr r3, 80021e8 <Get_Sensor_Readings+0x2d8>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f7fe fae8 	bl	80005f8 <__aeabi_dmul>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4614      	mov	r4, r2
 800202e:	461d      	mov	r5, r3
 8002030:	4b77      	ldr	r3, [pc, #476]	; (8002210 <Get_Sensor_Readings+0x300>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002204 <Get_Sensor_Readings+0x2f4>
 800203a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800203e:	ee17 0a90 	vmov	r0, s15
 8002042:	f7fe fa81 	bl	8000548 <__aeabi_f2d>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4620      	mov	r0, r4
 800204c:	4629      	mov	r1, r5
 800204e:	f7fe f91d 	bl	800028c <__adddf3>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	f7fe fda5 	bl	8000ba8 <__aeabi_d2f>
 800205e:	4603      	mov	r3, r0
 8002060:	4a6b      	ldr	r2, [pc, #428]	; (8002210 <Get_Sensor_Readings+0x300>)
 8002062:	6013      	str	r3, [r2, #0]
    accel_data[1] = ALPHA * (float)accel_data_i16[1] * (9.8/1000.0f) + (1 - ALPHA) * accel_data[1];
 8002064:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <Get_Sensor_Readings+0x2e4>)
 8002066:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002072:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80021fc <Get_Sensor_Readings+0x2ec>
 8002076:	ee67 7a87 	vmul.f32	s15, s15, s14
 800207a:	ee17 0a90 	vmov	r0, s15
 800207e:	f7fe fa63 	bl	8000548 <__aeabi_f2d>
 8002082:	a359      	add	r3, pc, #356	; (adr r3, 80021e8 <Get_Sensor_Readings+0x2d8>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f7fe fab6 	bl	80005f8 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4614      	mov	r4, r2
 8002092:	461d      	mov	r5, r3
 8002094:	4b5e      	ldr	r3, [pc, #376]	; (8002210 <Get_Sensor_Readings+0x300>)
 8002096:	edd3 7a01 	vldr	s15, [r3, #4]
 800209a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8002204 <Get_Sensor_Readings+0x2f4>
 800209e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a2:	ee17 0a90 	vmov	r0, s15
 80020a6:	f7fe fa4f 	bl	8000548 <__aeabi_f2d>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4620      	mov	r0, r4
 80020b0:	4629      	mov	r1, r5
 80020b2:	f7fe f8eb 	bl	800028c <__adddf3>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe fd73 	bl	8000ba8 <__aeabi_d2f>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a52      	ldr	r2, [pc, #328]	; (8002210 <Get_Sensor_Readings+0x300>)
 80020c6:	6053      	str	r3, [r2, #4]
    accel_data[2] = ALPHA * (float)accel_data_i16[2] * (9.8/1000.0f) + (1 - ALPHA) * accel_data[2];
 80020c8:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <Get_Sensor_Readings+0x2e4>)
 80020ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80021fc <Get_Sensor_Readings+0x2ec>
 80020da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020de:	ee17 0a90 	vmov	r0, s15
 80020e2:	f7fe fa31 	bl	8000548 <__aeabi_f2d>
 80020e6:	a340      	add	r3, pc, #256	; (adr r3, 80021e8 <Get_Sensor_Readings+0x2d8>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe fa84 	bl	80005f8 <__aeabi_dmul>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4614      	mov	r4, r2
 80020f6:	461d      	mov	r5, r3
 80020f8:	4b45      	ldr	r3, [pc, #276]	; (8002210 <Get_Sensor_Readings+0x300>)
 80020fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80020fe:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002204 <Get_Sensor_Readings+0x2f4>
 8002102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002106:	ee17 0a90 	vmov	r0, s15
 800210a:	f7fe fa1d 	bl	8000548 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4620      	mov	r0, r4
 8002114:	4629      	mov	r1, r5
 8002116:	f7fe f8b9 	bl	800028c <__adddf3>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	f7fe fd41 	bl	8000ba8 <__aeabi_d2f>
 8002126:	4603      	mov	r3, r0
 8002128:	4a39      	ldr	r2, [pc, #228]	; (8002210 <Get_Sensor_Readings+0x300>)
 800212a:	6093      	str	r3, [r2, #8]

    gyro_data[0] = ALPHA * (float)gyro_data_il6[0] + (1 - ALPHA) * gyro_data[0];
 800212c:	4b32      	ldr	r3, [pc, #200]	; (80021f8 <Get_Sensor_Readings+0x2e8>)
 800212e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80021fc <Get_Sensor_Readings+0x2ec>
 800213e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002142:	4b34      	ldr	r3, [pc, #208]	; (8002214 <Get_Sensor_Readings+0x304>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002204 <Get_Sensor_Readings+0x2f4>
 800214c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002154:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <Get_Sensor_Readings+0x304>)
 8002156:	edc3 7a00 	vstr	s15, [r3]
    gyro_data[1] = ALPHA * (float)gyro_data_il6[1] + (1 - ALPHA) * gyro_data[1];
 800215a:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <Get_Sensor_Readings+0x2e8>)
 800215c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002168:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80021fc <Get_Sensor_Readings+0x2ec>
 800216c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <Get_Sensor_Readings+0x304>)
 8002172:	edd3 7a01 	vldr	s15, [r3, #4]
 8002176:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002204 <Get_Sensor_Readings+0x2f4>
 800217a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800217e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <Get_Sensor_Readings+0x304>)
 8002184:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro_data[2] = ALPHA * (float)gyro_data_il6[2] + (1 - ALPHA) * gyro_data[2];
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <Get_Sensor_Readings+0x2e8>)
 800218a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002196:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80021fc <Get_Sensor_Readings+0x2ec>
 800219a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <Get_Sensor_Readings+0x304>)
 80021a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80021a4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002204 <Get_Sensor_Readings+0x2f4>
 80021a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <Get_Sensor_Readings+0x304>)
 80021b2:	edc3 7a02 	vstr	s15, [r3, #8]

    p_data = ALPHA * BSP_PSENSOR_ReadPressure() + (1 - ALPHA) * p_data;
 80021b6:	f001 fe85 	bl	8003ec4 <BSP_PSENSOR_ReadPressure>
 80021ba:	eef0 7a40 	vmov.f32	s15, s0
 80021be:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80021fc <Get_Sensor_Readings+0x2ec>
 80021c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <Get_Sensor_Readings+0x308>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002204 <Get_Sensor_Readings+0x2f4>
 80021d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <Get_Sensor_Readings+0x308>)
 80021da:	edc3 7a00 	vstr	s15, [r3]
}
 80021de:	bf00      	nop
 80021e0:	bdb0      	pop	{r4, r5, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	f3af 8000 	nop.w
 80021e8:	bc01a36f 	.word	0xbc01a36f
 80021ec:	3f841205 	.word	0x3f841205
 80021f0:	20000370 	.word	0x20000370
 80021f4:	20000384 	.word	0x20000384
 80021f8:	20000398 	.word	0x20000398
 80021fc:	3f4ccccd 	.word	0x3f4ccccd
 8002200:	20000364 	.word	0x20000364
 8002204:	3e4ccccc 	.word	0x3e4ccccc
 8002208:	2000000c 	.word	0x2000000c
 800220c:	20000010 	.word	0x20000010
 8002210:	20000378 	.word	0x20000378
 8002214:	2000038c 	.word	0x2000038c
 8002218:	20000014 	.word	0x20000014

0800221c <HAL_GPIO_EXTI_Callback>:

//reaction to detecting click of a button & double clicking
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI13_Pin){
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222c:	d132      	bne.n	8002294 <HAL_GPIO_EXTI_Callback+0x78>
		if(!not_clicked)
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d104      	bne.n	8002240 <HAL_GPIO_EXTI_Callback+0x24>
			num_clicked++;
 8002236:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_GPIO_EXTI_Callback+0x90>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <HAL_GPIO_EXTI_Callback+0x90>)
 800223e:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()-time_clicked<=1000 && num_clicked > 1){
 8002240:	f002 fc52 	bl	8004ae8 <HAL_GetTick>
 8002244:	4603      	mov	r3, r0
 8002246:	4a1a      	ldr	r2, [pc, #104]	; (80022b0 <HAL_GPIO_EXTI_Callback+0x94>)
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002250:	d817      	bhi.n	8002282 <HAL_GPIO_EXTI_Callback+0x66>
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_GPIO_EXTI_Callback+0x90>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b01      	cmp	r3, #1
 8002258:	dd13      	ble.n	8002282 <HAL_GPIO_EXTI_Callback+0x66>
			modeChanged = 1;
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x98>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
			if (normal_mode == 0){
 8002260:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d106      	bne.n	8002276 <HAL_GPIO_EXTI_Callback+0x5a>
				normal_mode = 1;
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]
				configured = 0;
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HAL_GPIO_EXTI_Callback+0xa0>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e002      	b.n	800227c <HAL_GPIO_EXTI_Callback+0x60>
			}
			else
				normal_mode = 0;
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
			num_clicked = 0;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_GPIO_EXTI_Callback+0x90>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
		}
		time_clicked = HAL_GetTick();
 8002282:	f002 fc31 	bl	8004ae8 <HAL_GetTick>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_GPIO_EXTI_Callback+0x94>)
 800228c:	601a      	str	r2, [r3, #0]
		not_clicked = 0;
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_1){
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <HAL_GPIO_EXTI_Callback+0x82>
	  SPI_WIFI_ISR();
 800229a:	f7ff fe29 	bl	8001ef0 <SPI_WIFI_ISR>
	}
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000018 	.word	0x20000018
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000358 	.word	0x20000358
 80022b4:	20000008 	.word	0x20000008
 80022b8:	20000004 	.word	0x20000004
 80022bc:	2000035c 	.word	0x2000035c

080022c0 <vec_magnitude>:


float vec_magnitude(float data[3]) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    return sqrt(data[0] * data[0] + data[1] * data[1] + data[2] * data[2]);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	ed93 7a00 	vldr	s14, [r3]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	edd3 6a00 	vldr	s13, [r3]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	edd3 7a00 	vldr	s15, [r3]
 80022e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3308      	adds	r3, #8
 80022f4:	edd3 6a00 	vldr	s13, [r3]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3308      	adds	r3, #8
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002308:	ee17 0a90 	vmov	r0, s15
 800230c:	f7fe f91c 	bl	8000548 <__aeabi_f2d>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	ec43 2b10 	vmov	d0, r2, r3
 8002318:	f009 f82d 	bl	800b376 <sqrt>
 800231c:	ec53 2b10 	vmov	r2, r3, d0
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f7fe fc40 	bl	8000ba8 <__aeabi_d2f>
 8002328:	4603      	mov	r3, r0
 800232a:	ee07 3a90 	vmov	s15, r3
}
 800232e:	eeb0 0a67 	vmov.f32	s0, s15
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <Sensors_Init>:


UART_HandleTypeDef huart1;

void Sensors_Init(void){
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
    BSP_TSENSOR_Init();
 800233c:	f001 fdd0 	bl	8003ee0 <BSP_TSENSOR_Init>
    BSP_ACCELERO_Init();
 8002340:	f001 fc7e 	bl	8003c40 <BSP_ACCELERO_Init>
    BSP_MAGNETO_Init();
 8002344:	f001 fd5a 	bl	8003dfc <BSP_MAGNETO_Init>
    BSP_GYRO_Init();
 8002348:	f001 fcd0 	bl	8003cec <BSP_GYRO_Init>
    BSP_HSENSOR_Init();
 800234c:	f001 fd28 	bl	8003da0 <BSP_HSENSOR_Init>
    BSP_PSENSOR_Init();
 8002350:	f001 fd98 	bl	8003e84 <BSP_PSENSOR_Init>
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <Sensors_Calibrate>:

void Sensors_Calibrate(void) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 // Calibration
	Get_Sensor_Readings();
 800235e:	f7ff fdd7 	bl	8001f10 <Get_Sensor_Readings>
	temp_config = t_data;
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <Sensors_Calibrate+0x78>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <Sensors_Calibrate+0x7c>)
 8002368:	6013      	str	r3, [r2, #0]
	h_config = h_data;
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <Sensors_Calibrate+0x80>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <Sensors_Calibrate+0x84>)
 8002370:	6013      	str	r3, [r2, #0]
	p_config = p_data;
 8002372:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <Sensors_Calibrate+0x88>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <Sensors_Calibrate+0x8c>)
 8002378:	6013      	str	r3, [r2, #0]
	magneto_config = vec_magnitude(mag_data);
 800237a:	481b      	ldr	r0, [pc, #108]	; (80023e8 <Sensors_Calibrate+0x90>)
 800237c:	f7ff ffa0 	bl	80022c0 <vec_magnitude>
 8002380:	eef0 7a40 	vmov.f32	s15, s0
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <Sensors_Calibrate+0x94>)
 8002386:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<3; i++){
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	e016      	b.n	80023be <Sensors_Calibrate+0x66>
		accel_config[i] = accel_data[i];
 8002390:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <Sensors_Calibrate+0x98>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4916      	ldr	r1, [pc, #88]	; (80023f4 <Sensors_Calibrate+0x9c>)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	601a      	str	r2, [r3, #0]
		gyro_config[i] = gyro_data[i];
 80023a4:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <Sensors_Calibrate+0xa0>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4913      	ldr	r1, [pc, #76]	; (80023fc <Sensors_Calibrate+0xa4>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	601a      	str	r2, [r3, #0]
	for (int i=0; i<3; i++){
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3301      	adds	r3, #1
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	dde5      	ble.n	8002390 <Sensors_Calibrate+0x38>
	}
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000000c 	.word	0x2000000c
 80023d4:	200003a4 	.word	0x200003a4
 80023d8:	20000010 	.word	0x20000010
 80023dc:	200003a8 	.word	0x200003a8
 80023e0:	20000014 	.word	0x20000014
 80023e4:	200003b8 	.word	0x200003b8
 80023e8:	20000364 	.word	0x20000364
 80023ec:	200003a0 	.word	0x200003a0
 80023f0:	20000378 	.word	0x20000378
 80023f4:	200003ac 	.word	0x200003ac
 80023f8:	2000038c 	.word	0x2000038c
 80023fc:	200003bc 	.word	0x200003bc

08002400 <main>:

int main(void) {
 8002400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002404:	f5ad 6d96 	sub.w	sp, sp, #1200	; 0x4b0
 8002408:	af0a      	add	r7, sp, #40	; 0x28
	/* Reset of all peripherals, Initializes Systick etc. */
	HAL_Init();
 800240a:	f002 fb09 	bl	8004a20 <HAL_Init>
	uint8_t req[MAX_LENGTH];	// request packet
	uint8_t resp[MAX_LENGTH];	// response packet
	uint16_t Datalen;

	Sensors_Init();
 800240e:	f7ff ff93 	bl	8002338 <Sensors_Init>
	BSP_LED_Init(LED2);
 8002412:	2000      	movs	r0, #0
 8002414:	f001 fa68 	bl	80038e8 <BSP_LED_Init>
	initialise_monitor_handles();
 8002418:	f005 febe 	bl	8008198 <initialise_monitor_handles>
	MX_GPIO_Init();
 800241c:	f000 ff38 	bl	8003290 <MX_GPIO_Init>
	UART1_Init();
 8002420:	f000 fedc 	bl	80031dc <UART1_Init>

	int tickstart = HAL_GetTick();
 8002424:	f002 fb60 	bl	8004ae8 <HAL_GetTick>
 8002428:	4603      	mov	r3, r0
 800242a:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484

	while (1) {
		char message[UART_BUFFER_SIZE];

		if (modeChanged){
 800242e:	4b76      	ldr	r3, [pc, #472]	; (8002608 <main+0x208>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d004      	beq.n	8002440 <main+0x40>
			Switch_Mode();
 8002436:	f000 fde1 	bl	8002ffc <Switch_Mode>
			modeChanged = 0;
 800243a:	4b73      	ldr	r3, [pc, #460]	; (8002608 <main+0x208>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
		}

		//normal mode
		if (normal_mode){
 8002440:	4b72      	ldr	r3, [pc, #456]	; (800260c <main+0x20c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d07e      	beq.n	8002546 <main+0x146>
			//performs action every 1 second
			if ((HAL_GetTick() - tickstart) >= 1000){
 8002448:	f002 fb4e 	bl	8004ae8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002458:	d3e9      	bcc.n	800242e <main+0x2e>
				tickstart = HAL_GetTick();
 800245a:	f002 fb45 	bl	8004ae8 <HAL_GetTick>
 800245e:	4603      	mov	r3, r0
 8002460:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
				Get_Sensor_Readings();
 8002464:	f7ff fd54 	bl	8001f10 <Get_Sensor_Readings>
				if(!wifi)
 8002468:	4b69      	ldr	r3, [pc, #420]	; (8002610 <main+0x210>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <main+0x76>
						Print_Sensor_Data();
 8002470:	f000 fe40 	bl	80030f4 <Print_Sensor_Data>
 8002474:	e7db      	b.n	800242e <main+0x2e>
					else{
						float mag_magnitude = vec_magnitude(mag_data);
 8002476:	4867      	ldr	r0, [pc, #412]	; (8002614 <main+0x214>)
 8002478:	f7ff ff22 	bl	80022c0 <vec_magnitude>
 800247c:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8002480:	ed83 0a00 	vstr	s0, [r3]
						float accel_magnitude = vec_magnitude(accel_data);
 8002484:	4864      	ldr	r0, [pc, #400]	; (8002618 <main+0x218>)
 8002486:	f7ff ff1b 	bl	80022c0 <vec_magnitude>
 800248a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800248e:	ed83 0a00 	vstr	s0, [r3]
						float gyro_magnitude = vec_magnitude(gyro_data);
 8002492:	4862      	ldr	r0, [pc, #392]	; (800261c <main+0x21c>)
 8002494:	f7ff ff14 	bl	80022c0 <vec_magnitude>
 8002498:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800249c:	ed83 0a00 	vstr	s0, [r3]

						sprintf((char*)req, "T: %.2f C, P: %.2f hPa, H: %.2f %% RH, A: %.2f m/s^2, G: %.2f mdeg/s, M: %.2f gauss\r\n\n",t_data, p_data, h_data, accel_magnitude, gyro_magnitude, mag_magnitude);
 80024a0:	4b5f      	ldr	r3, [pc, #380]	; (8002620 <main+0x220>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe f84f 	bl	8000548 <__aeabi_f2d>
 80024aa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80024ae:	4b5d      	ldr	r3, [pc, #372]	; (8002624 <main+0x224>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe f848 	bl	8000548 <__aeabi_f2d>
 80024b8:	4604      	mov	r4, r0
 80024ba:	460d      	mov	r5, r1
 80024bc:	4b5a      	ldr	r3, [pc, #360]	; (8002628 <main+0x228>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f841 	bl	8000548 <__aeabi_f2d>
 80024c6:	4680      	mov	r8, r0
 80024c8:	4689      	mov	r9, r1
 80024ca:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	f7fe f83a 	bl	8000548 <__aeabi_f2d>
 80024d4:	4682      	mov	sl, r0
 80024d6:	468b      	mov	fp, r1
 80024d8:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	f7fe f833 	bl	8000548 <__aeabi_f2d>
 80024e2:	e9c7 0100 	strd	r0, r1, [r7]
 80024e6:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	f7fe f82c 	bl	8000548 <__aeabi_f2d>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	f507 7031 	add.w	r0, r7, #708	; 0x2c4
 80024f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80024fc:	ed97 7b00 	vldr	d7, [r7]
 8002500:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002504:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002508:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800250c:	e9cd 4500 	strd	r4, r5, [sp]
 8002510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002514:	4945      	ldr	r1, [pc, #276]	; (800262c <main+0x22c>)
 8002516:	f006 fdc5 	bl	80090a4 <siprintf>
						WiFi_Stat = WIFI_SendData(1, req, (uint16_t)strlen((char*)req), &Datalen, WIFI_WRITE_TIMEOUT);
 800251a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800251e:	4618      	mov	r0, r3
 8002520:	f7fd fe56 	bl	80001d0 <strlen>
 8002524:	4603      	mov	r3, r0
 8002526:	b29a      	uxth	r2, r3
 8002528:	f507 7399 	add.w	r3, r7, #306	; 0x132
 800252c:	f507 7131 	add.w	r1, r7, #708	; 0x2c4
 8002530:	f242 7010 	movw	r0, #10000	; 0x2710
 8002534:	9000      	str	r0, [sp, #0]
 8002536:	2001      	movs	r0, #1
 8002538:	f001 f98a 	bl	8003850 <WIFI_SendData>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <main+0x230>)
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e773      	b.n	800242e <main+0x2e>
			}
		}

		//ghost busting mode
		else{
			if(!configured){
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <main+0x234>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 80a1 	bne.w	8002692 <main+0x292>
				char message_enter_mode[128];
				sprintf(message_enter_mode, "Please configure your PHANTASMA. Place it in a position you want to catch ghosts from. Type in 'Done' once finished.\r\n");
 8002550:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002554:	4938      	ldr	r1, [pc, #224]	; (8002638 <main+0x238>)
 8002556:	4618      	mov	r0, r3
 8002558:	f006 fda4 	bl	80090a4 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)message_enter_mode, strlen(message_enter_mode),HAL_MAX_DELAY);
 800255c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002560:	4618      	mov	r0, r3
 8002562:	f7fd fe35 	bl	80001d0 <strlen>
 8002566:	4603      	mov	r3, r0
 8002568:	b29a      	uxth	r2, r3
 800256a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
 8002572:	4832      	ldr	r0, [pc, #200]	; (800263c <main+0x23c>)
 8002574:	f004 fd86 	bl	8007084 <HAL_UART_Transmit>
			}

			while(!normal_mode && !configured){
 8002578:	e08b      	b.n	8002692 <main+0x292>
				uint8_t buffer[5];
				buffer[4]="\0";
 800257a:	4b31      	ldr	r3, [pc, #196]	; (8002640 <main+0x240>)
 800257c:	b2da      	uxtb	r2, r3
 800257e:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002582:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8002586:	711a      	strb	r2, [r3, #4]
				HAL_UART_Receive(&huart1,buffer,5,HAL_MAX_DELAY);
 8002588:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
 8002590:	2205      	movs	r2, #5
 8002592:	482a      	ldr	r0, [pc, #168]	; (800263c <main+0x23c>)
 8002594:	f004 fe09 	bl	80071aa <HAL_UART_Receive>
				char message_config[UART_BUFFER_SIZE];
				if (strncmp((char*)buffer, "Done\r", 5) == 0) {
 8002598:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800259c:	2205      	movs	r2, #5
 800259e:	4929      	ldr	r1, [pc, #164]	; (8002644 <main+0x244>)
 80025a0:	4618      	mov	r0, r3
 80025a2:	f006 fde2 	bl	800916a <strncmp>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d151      	bne.n	8002650 <main+0x250>
					sprintf(message_config, "Message Received! Analyzing...\r\n");
 80025ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025b0:	4925      	ldr	r1, [pc, #148]	; (8002648 <main+0x248>)
 80025b2:	4618      	mov	r0, r3
 80025b4:	f006 fd76 	bl	80090a4 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message_config, strlen(message_config),HAL_MAX_DELAY);
 80025b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd fe07 	bl	80001d0 <strlen>
 80025c2:	4603      	mov	r3, r0
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
 80025ce:	481b      	ldr	r0, [pc, #108]	; (800263c <main+0x23c>)
 80025d0:	f004 fd58 	bl	8007084 <HAL_UART_Transmit>

					Sensors_Calibrate();
 80025d4:	f7ff fec0 	bl	8002358 <Sensors_Calibrate>

					sprintf(message_config, "Configuration Complete!\r\n");
 80025d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025dc:	491b      	ldr	r1, [pc, #108]	; (800264c <main+0x24c>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f006 fd60 	bl	80090a4 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message_config, strlen(message_config),HAL_MAX_DELAY);
 80025e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd fdf1 	bl	80001d0 <strlen>
 80025ee:	4603      	mov	r3, r0
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	4810      	ldr	r0, [pc, #64]	; (800263c <main+0x23c>)
 80025fc:	f004 fd42 	bl	8007084 <HAL_UART_Transmit>

					configured = 1;
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <main+0x234>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e04d      	b.n	80026a4 <main+0x2a4>
 8002608:	20000008 	.word	0x20000008
 800260c:	20000004 	.word	0x20000004
 8002610:	200003c8 	.word	0x200003c8
 8002614:	20000364 	.word	0x20000364
 8002618:	20000378 	.word	0x20000378
 800261c:	2000038c 	.word	0x2000038c
 8002620:	2000000c 	.word	0x2000000c
 8002624:	20000014 	.word	0x20000014
 8002628:	20000010 	.word	0x20000010
 800262c:	0800b8ec 	.word	0x0800b8ec
 8002630:	200003cc 	.word	0x200003cc
 8002634:	2000035c 	.word	0x2000035c
 8002638:	0800b944 	.word	0x0800b944
 800263c:	20000434 	.word	0x20000434
 8002640:	0800b9bc 	.word	0x0800b9bc
 8002644:	0800b9c0 	.word	0x0800b9c0
 8002648:	0800b9c8 	.word	0x0800b9c8
 800264c:	0800b9ec 	.word	0x0800b9ec
					break;
				}
				if(buffer[4]!=NULL){
 8002650:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002654:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8002658:	791b      	ldrb	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d019      	beq.n	8002692 <main+0x292>
					sprintf(message_config, "Incorrect Message. Please Enter 'Done' once you are ready!\r\n");
 800265e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002662:	49bb      	ldr	r1, [pc, #748]	; (8002950 <main+0x550>)
 8002664:	4618      	mov	r0, r3
 8002666:	f006 fd1d 	bl	80090a4 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message_config, strlen(message_config),HAL_MAX_DELAY);
 800266a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd fdae 	bl	80001d0 <strlen>
 8002674:	4603      	mov	r3, r0
 8002676:	b29a      	uxth	r2, r3
 8002678:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800267c:	f04f 33ff 	mov.w	r3, #4294967295
 8002680:	48b4      	ldr	r0, [pc, #720]	; (8002954 <main+0x554>)
 8002682:	f004 fcff 	bl	8007084 <HAL_UART_Transmit>
					buffer[4] = '0';
 8002686:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800268a:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800268e:	2230      	movs	r2, #48	; 0x30
 8002690:	711a      	strb	r2, [r3, #4]
			while(!normal_mode && !configured){
 8002692:	4bb1      	ldr	r3, [pc, #708]	; (8002958 <main+0x558>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d104      	bne.n	80026a4 <main+0x2a4>
 800269a:	4bb0      	ldr	r3, [pc, #704]	; (800295c <main+0x55c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f43f af6b 	beq.w	800257a <main+0x17a>
				}
			}

			//performs action every 1 second
			if ((HAL_GetTick() - tickstart) >= 1000){
 80026a4:	f002 fa20 	bl	8004ae8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026b4:	f4ff aebb 	bcc.w	800242e <main+0x2e>
				tickstart = HAL_GetTick();
 80026b8:	f002 fa16 	bl	8004ae8 <HAL_GetTick>
 80026bc:	4603      	mov	r3, r0
 80026be:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484

				printf("busting\n");
 80026c2:	48a7      	ldr	r0, [pc, #668]	; (8002960 <main+0x560>)
 80026c4:	f006 fca2 	bl	800900c <puts>

				float streshold_magneto_mag = 300;
 80026c8:	4ba6      	ldr	r3, [pc, #664]	; (8002964 <main+0x564>)
 80026ca:	f207 4274 	addw	r2, r7, #1140	; 0x474
 80026ce:	6013      	str	r3, [r2, #0]
				float streshold_temp = 0.3;
 80026d0:	4ba5      	ldr	r3, [pc, #660]	; (8002968 <main+0x568>)
 80026d2:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80026d6:	6013      	str	r3, [r2, #0]
				float streshold_h = 1;
 80026d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026dc:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 80026e0:	6013      	str	r3, [r2, #0]
				float streshold_accel[3] = {0.05, 0.05, 0.05};
 80026e2:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80026e6:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80026ea:	4aa0      	ldr	r2, [pc, #640]	; (800296c <main+0x56c>)
 80026ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				float streshold_p = 0.5;
 80026f2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80026f6:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 80026fa:	6013      	str	r3, [r2, #0]
				float streshold_gyro[3] = {8500, 5, 40000};
 80026fc:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002700:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8002704:	4a9a      	ldr	r2, [pc, #616]	; (8002970 <main+0x570>)
 8002706:	ca07      	ldmia	r2, {r0, r1, r2}
 8002708:	e883 0007 	stmia.w	r3, {r0, r1, r2}

				char message[UART_BUFFER_SIZE];

				Get_Sensor_Readings();
 800270c:	f7ff fc00 	bl	8001f10 <Get_Sensor_Readings>

				if(fabs(vec_magnitude(mag_data)-magneto_config)>=streshold_magneto_mag){
 8002710:	4898      	ldr	r0, [pc, #608]	; (8002974 <main+0x574>)
 8002712:	f7ff fdd5 	bl	80022c0 <vec_magnitude>
 8002716:	eeb0 7a40 	vmov.f32	s14, s0
 800271a:	4b97      	ldr	r3, [pc, #604]	; (8002978 <main+0x578>)
 800271c:	edd3 7a00 	vldr	s15, [r3]
 8002720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002724:	eef0 7ae7 	vabs.f32	s15, s15
 8002728:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800272c:	ed93 7a00 	vldr	s14, [r3]
 8002730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002738:	f200 8164 	bhi.w	8002a04 <main+0x604>
					not_clicked = 1;
 800273c:	4b8f      	ldr	r3, [pc, #572]	; (800297c <main+0x57c>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]
					sprintf(message, "Changes in magnetic field detected!\r\nChange = %0.4f\r\n", vec_magnitude(mag_data)-magneto_config);
 8002742:	488c      	ldr	r0, [pc, #560]	; (8002974 <main+0x574>)
 8002744:	f7ff fdbc 	bl	80022c0 <vec_magnitude>
 8002748:	eeb0 7a40 	vmov.f32	s14, s0
 800274c:	4b8a      	ldr	r3, [pc, #552]	; (8002978 <main+0x578>)
 800274e:	edd3 7a00 	vldr	s15, [r3]
 8002752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002756:	ee17 0a90 	vmov	r0, s15
 800275a:	f7fd fef5 	bl	8000548 <__aeabi_f2d>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	f107 0014 	add.w	r0, r7, #20
 8002766:	4986      	ldr	r1, [pc, #536]	; (8002980 <main+0x580>)
 8002768:	f006 fc9c 	bl	80090a4 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd fd2d 	bl	80001d0 <strlen>
 8002776:	4603      	mov	r3, r0
 8002778:	b29a      	uxth	r2, r3
 800277a:	f107 0114 	add.w	r1, r7, #20
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	4874      	ldr	r0, [pc, #464]	; (8002954 <main+0x554>)
 8002784:	f004 fc7e 	bl	8007084 <HAL_UART_Transmit>

					float starting_magnitude = magneto_config;
 8002788:	4b7b      	ldr	r3, [pc, #492]	; (8002978 <main+0x578>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8002790:	6013      	str	r3, [r2, #0]
					char messageed[UART_BUFFER_SIZE];
					int tickstart1 = HAL_GetTick();
 8002792:	f002 f9a9 	bl	8004ae8 <HAL_GetTick>
 8002796:	4603      	mov	r3, r0
 8002798:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480

					while(not_clicked){
 800279c:	e0b3      	b.n	8002906 <main+0x506>
						if((HAL_GetTick() - tickstart1) >= 1000){
 800279e:	f002 f9a3 	bl	8004ae8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ae:	d327      	bcc.n	8002800 <main+0x400>
							sprintf(messageed, "Ghost detected in! Prepare to bust!\r\n", vec_magnitude(mag_data)-magneto_config);
 80027b0:	4870      	ldr	r0, [pc, #448]	; (8002974 <main+0x574>)
 80027b2:	f7ff fd85 	bl	80022c0 <vec_magnitude>
 80027b6:	eeb0 7a40 	vmov.f32	s14, s0
 80027ba:	4b6f      	ldr	r3, [pc, #444]	; (8002978 <main+0x578>)
 80027bc:	edd3 7a00 	vldr	s15, [r3]
 80027c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c4:	ee17 0a90 	vmov	r0, s15
 80027c8:	f7fd febe 	bl	8000548 <__aeabi_f2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80027d4:	496b      	ldr	r1, [pc, #428]	; (8002984 <main+0x584>)
 80027d6:	f006 fc65 	bl	80090a4 <siprintf>
							HAL_UART_Transmit(&huart1, (uint8_t*)messageed, strlen(messageed),HAL_MAX_DELAY);
 80027da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd fcf6 	bl	80001d0 <strlen>
 80027e4:	4603      	mov	r3, r0
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80027ec:	f04f 33ff 	mov.w	r3, #4294967295
 80027f0:	4858      	ldr	r0, [pc, #352]	; (8002954 <main+0x554>)
 80027f2:	f004 fc47 	bl	8007084 <HAL_UART_Transmit>
							tickstart1 = HAL_GetTick();
 80027f6:	f002 f977 	bl	8004ae8 <HAL_GetTick>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
						}
						BSP_MAGNETO_GetXYZ(mag_data_i16);
 8002800:	4861      	ldr	r0, [pc, #388]	; (8002988 <main+0x588>)
 8002802:	f001 fb27 	bl	8003e54 <BSP_MAGNETO_GetXYZ>
						mag_data[0] = (float)mag_data_i16[0];
 8002806:	4b60      	ldr	r3, [pc, #384]	; (8002988 <main+0x588>)
 8002808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002814:	4b57      	ldr	r3, [pc, #348]	; (8002974 <main+0x574>)
 8002816:	edc3 7a00 	vstr	s15, [r3]
						mag_data[1] = (float)mag_data_i16[1];
 800281a:	4b5b      	ldr	r3, [pc, #364]	; (8002988 <main+0x588>)
 800281c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <main+0x574>)
 800282a:	edc3 7a01 	vstr	s15, [r3, #4]
						mag_data[2] = (float)mag_data_i16[2];
 800282e:	4b56      	ldr	r3, [pc, #344]	; (8002988 <main+0x588>)
 8002830:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283c:	4b4d      	ldr	r3, [pc, #308]	; (8002974 <main+0x574>)
 800283e:	edc3 7a02 	vstr	s15, [r3, #8]
						float magnitude = vec_magnitude(mag_data);
 8002842:	484c      	ldr	r0, [pc, #304]	; (8002974 <main+0x574>)
 8002844:	f7ff fd3c 	bl	80022c0 <vec_magnitude>
 8002848:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800284c:	ed83 0a00 	vstr	s0, [r3]
						float blinking_period = 2000-0.5*fabs(magnitude-starting_magnitude);
 8002850:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8002854:	ed93 7a00 	vldr	s14, [r3]
 8002858:	f207 4364 	addw	r3, r7, #1124	; 0x464
 800285c:	edd3 7a00 	vldr	s15, [r3]
 8002860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002864:	eef0 7ae7 	vabs.f32	s15, s15
 8002868:	ee17 0a90 	vmov	r0, s15
 800286c:	f7fd fe6c 	bl	8000548 <__aeabi_f2d>
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	4b45      	ldr	r3, [pc, #276]	; (800298c <main+0x58c>)
 8002876:	f7fd febf 	bl	80005f8 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	f04f 0000 	mov.w	r0, #0
 8002882:	4943      	ldr	r1, [pc, #268]	; (8002990 <main+0x590>)
 8002884:	f7fd fd00 	bl	8000288 <__aeabi_dsub>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	f7fe f98a 	bl	8000ba8 <__aeabi_d2f>
 8002894:	4603      	mov	r3, r0
 8002896:	f207 427c 	addw	r2, r7, #1148	; 0x47c
 800289a:	6013      	str	r3, [r2, #0]
						printf("%f\r\n", blinking_period);
 800289c:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	f7fd fe51 	bl	8000548 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	483a      	ldr	r0, [pc, #232]	; (8002994 <main+0x594>)
 80028ac:	f006 fb28 	bl	8008f00 <iprintf>
						if(blinking_period < 75)
 80028b0:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80028b4:	edd3 7a00 	vldr	s15, [r3]
 80028b8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002998 <main+0x598>
 80028bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c4:	d503      	bpl.n	80028ce <main+0x4ce>
							blinking_period = 75;
 80028c6:	4b35      	ldr	r3, [pc, #212]	; (800299c <main+0x59c>)
 80028c8:	f207 427c 	addw	r2, r7, #1148	; 0x47c
 80028cc:	6013      	str	r3, [r2, #0]
						if ((HAL_GetTick() - tickstart) >= blinking_period){
 80028ce:	f002 f90b 	bl	8004ae8 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e2:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80028e6:	ed93 7a00 	vldr	s14, [r3]
 80028ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f2:	d900      	bls.n	80028f6 <main+0x4f6>
 80028f4:	e007      	b.n	8002906 <main+0x506>
							BSP_LED_Toggle(LED2);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f001 f83c 	bl	8003974 <BSP_LED_Toggle>
							tickstart = HAL_GetTick();
 80028fc:	f002 f8f4 	bl	8004ae8 <HAL_GetTick>
 8002900:	4603      	mov	r3, r0
 8002902:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
					while(not_clicked){
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <main+0x57c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f47f af47 	bne.w	800279e <main+0x39e>
						}
					}
					sprintf(message, "Ghost Captured!\r\n");
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4922      	ldr	r1, [pc, #136]	; (80029a0 <main+0x5a0>)
 8002916:	4618      	mov	r0, r3
 8002918:	f006 fbc4 	bl	80090a4 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),HAL_MAX_DELAY);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fc55 	bl	80001d0 <strlen>
 8002926:	4603      	mov	r3, r0
 8002928:	b29a      	uxth	r2, r3
 800292a:	f107 0114 	add.w	r1, r7, #20
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	4808      	ldr	r0, [pc, #32]	; (8002954 <main+0x554>)
 8002934:	f004 fba6 	bl	8007084 <HAL_UART_Transmit>
					ghosts_captured++;
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <main+0x5a4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <main+0x5a4>)
 8002940:	6013      	str	r3, [r2, #0]
					not_clicked = 1;
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <main+0x57c>)
 8002944:	2201      	movs	r2, #1
 8002946:	601a      	str	r2, [r3, #0]
					BSP_LED_Off(LED2);
 8002948:	2000      	movs	r0, #0
 800294a:	f000 fffd 	bl	8003948 <BSP_LED_Off>
					while(not_clicked)
 800294e:	e02c      	b.n	80029aa <main+0x5aa>
 8002950:	0800ba08 	.word	0x0800ba08
 8002954:	20000434 	.word	0x20000434
 8002958:	20000004 	.word	0x20000004
 800295c:	2000035c 	.word	0x2000035c
 8002960:	0800ba48 	.word	0x0800ba48
 8002964:	43960000 	.word	0x43960000
 8002968:	3e99999a 	.word	0x3e99999a
 800296c:	0800bc50 	.word	0x0800bc50
 8002970:	0800bc5c 	.word	0x0800bc5c
 8002974:	20000364 	.word	0x20000364
 8002978:	200003a0 	.word	0x200003a0
 800297c:	20000018 	.word	0x20000018
 8002980:	0800ba50 	.word	0x0800ba50
 8002984:	0800ba88 	.word	0x0800ba88
 8002988:	20000370 	.word	0x20000370
 800298c:	3fe00000 	.word	0x3fe00000
 8002990:	409f4000 	.word	0x409f4000
 8002994:	0800bab0 	.word	0x0800bab0
 8002998:	42960000 	.word	0x42960000
 800299c:	42960000 	.word	0x42960000
 80029a0:	0800bab8 	.word	0x0800bab8
 80029a4:	20000360 	.word	0x20000360
						continue;
 80029a8:	bf00      	nop
					while(not_clicked)
 80029aa:	4bd7      	ldr	r3, [pc, #860]	; (8002d08 <main+0x908>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1fa      	bne.n	80029a8 <main+0x5a8>
					BSP_MAGNETO_GetXYZ(mag_data_i16);
 80029b2:	48d6      	ldr	r0, [pc, #856]	; (8002d0c <main+0x90c>)
 80029b4:	f001 fa4e 	bl	8003e54 <BSP_MAGNETO_GetXYZ>
					mag_data[0] = (float)mag_data_i16[0];
 80029b8:	4bd4      	ldr	r3, [pc, #848]	; (8002d0c <main+0x90c>)
 80029ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c6:	4bd2      	ldr	r3, [pc, #840]	; (8002d10 <main+0x910>)
 80029c8:	edc3 7a00 	vstr	s15, [r3]
					mag_data[1] = (float)mag_data_i16[1];
 80029cc:	4bcf      	ldr	r3, [pc, #828]	; (8002d0c <main+0x90c>)
 80029ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029da:	4bcd      	ldr	r3, [pc, #820]	; (8002d10 <main+0x910>)
 80029dc:	edc3 7a01 	vstr	s15, [r3, #4]
					mag_data[2] = (float)mag_data_i16[2];
 80029e0:	4bca      	ldr	r3, [pc, #808]	; (8002d0c <main+0x90c>)
 80029e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ee:	4bc8      	ldr	r3, [pc, #800]	; (8002d10 <main+0x910>)
 80029f0:	edc3 7a02 	vstr	s15, [r3, #8]
					magneto_config = vec_magnitude(mag_data);
 80029f4:	48c6      	ldr	r0, [pc, #792]	; (8002d10 <main+0x910>)
 80029f6:	f7ff fc63 	bl	80022c0 <vec_magnitude>
 80029fa:	eef0 7a40 	vmov.f32	s15, s0
 80029fe:	4bc5      	ldr	r3, [pc, #788]	; (8002d14 <main+0x914>)
 8002a00:	edc3 7a00 	vstr	s15, [r3]
				}
				if(fabs(t_data-temp_config)>=streshold_temp){
 8002a04:	4bc4      	ldr	r3, [pc, #784]	; (8002d18 <main+0x918>)
 8002a06:	ed93 7a00 	vldr	s14, [r3]
 8002a0a:	4bc4      	ldr	r3, [pc, #784]	; (8002d1c <main+0x91c>)
 8002a0c:	edd3 7a00 	vldr	s15, [r3]
 8002a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a14:	eef0 7ae7 	vabs.f32	s15, s15
 8002a18:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002a1c:	ed93 7a00 	vldr	s14, [r3]
 8002a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a28:	d819      	bhi.n	8002a5e <main+0x65e>
					sprintf(message, "Change in temperature detected\n Change = %0.4f\r\n", t_data);
 8002a2a:	4bbb      	ldr	r3, [pc, #748]	; (8002d18 <main+0x918>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fd fd8a 	bl	8000548 <__aeabi_f2d>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	f107 0014 	add.w	r0, r7, #20
 8002a3c:	49b8      	ldr	r1, [pc, #736]	; (8002d20 <main+0x920>)
 8002a3e:	f006 fb31 	bl	80090a4 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),HAL_MAX_DELAY);
 8002a42:	f107 0314 	add.w	r3, r7, #20
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fbc2 	bl	80001d0 <strlen>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	f107 0114 	add.w	r1, r7, #20
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295
 8002a58:	48b2      	ldr	r0, [pc, #712]	; (8002d24 <main+0x924>)
 8002a5a:	f004 fb13 	bl	8007084 <HAL_UART_Transmit>
				}
				if(fabs(h_data-h_config)>=streshold_h){
 8002a5e:	4bb2      	ldr	r3, [pc, #712]	; (8002d28 <main+0x928>)
 8002a60:	ed93 7a00 	vldr	s14, [r3]
 8002a64:	4bb1      	ldr	r3, [pc, #708]	; (8002d2c <main+0x92c>)
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a6e:	eef0 7ae7 	vabs.f32	s15, s15
 8002a72:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8002a76:	ed93 7a00 	vldr	s14, [r3]
 8002a7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a82:	d820      	bhi.n	8002ac6 <main+0x6c6>
					sprintf(message, "Change in humidity detected\n Change = %0.4f\r\n", h_data-h_config);
 8002a84:	4ba8      	ldr	r3, [pc, #672]	; (8002d28 <main+0x928>)
 8002a86:	ed93 7a00 	vldr	s14, [r3]
 8002a8a:	4ba8      	ldr	r3, [pc, #672]	; (8002d2c <main+0x92c>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a94:	ee17 0a90 	vmov	r0, s15
 8002a98:	f7fd fd56 	bl	8000548 <__aeabi_f2d>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	f107 0014 	add.w	r0, r7, #20
 8002aa4:	49a2      	ldr	r1, [pc, #648]	; (8002d30 <main+0x930>)
 8002aa6:	f006 fafd 	bl	80090a4 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),HAL_MAX_DELAY);
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fd fb8e 	bl	80001d0 <strlen>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	f107 0114 	add.w	r1, r7, #20
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	4898      	ldr	r0, [pc, #608]	; (8002d24 <main+0x924>)
 8002ac2:	f004 fadf 	bl	8007084 <HAL_UART_Transmit>
				}
				if(fabs(accel_data[0]-accel_config[0])>=streshold_accel[0] || fabs(accel_data[1]-accel_config[1])>=streshold_accel[1] || fabs(accel_data[2]-accel_config[2])>=streshold_accel[2]){
 8002ac6:	4b9b      	ldr	r3, [pc, #620]	; (8002d34 <main+0x934>)
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	4b9a      	ldr	r3, [pc, #616]	; (8002d38 <main+0x938>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad6:	eeb0 7ae7 	vabs.f32	s14, s15
 8002ada:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002ade:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aee:	da2a      	bge.n	8002b46 <main+0x746>
 8002af0:	4b90      	ldr	r3, [pc, #576]	; (8002d34 <main+0x934>)
 8002af2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002af6:	4b90      	ldr	r3, [pc, #576]	; (8002d38 <main+0x938>)
 8002af8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b00:	eeb0 7ae7 	vabs.f32	s14, s15
 8002b04:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002b08:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8002b0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b18:	da15      	bge.n	8002b46 <main+0x746>
 8002b1a:	4b86      	ldr	r3, [pc, #536]	; (8002d34 <main+0x934>)
 8002b1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b20:	4b85      	ldr	r3, [pc, #532]	; (8002d38 <main+0x938>)
 8002b22:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b2a:	eeb0 7ae7 	vabs.f32	s14, s15
 8002b2e:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002b32:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8002b36:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b42:	f2c0 80b6 	blt.w	8002cb2 <main+0x8b2>
					sprintf(message, "Device orientation compromised!!\r\n");
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	497c      	ldr	r1, [pc, #496]	; (8002d3c <main+0x93c>)
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f006 faa9 	bl	80090a4 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),HAL_MAX_DELAY);
 8002b52:	f107 0314 	add.w	r3, r7, #20
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fb3a 	bl	80001d0 <strlen>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	f107 0114 	add.w	r1, r7, #20
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
 8002b68:	486e      	ldr	r0, [pc, #440]	; (8002d24 <main+0x924>)
 8002b6a:	f004 fa8b 	bl	8007084 <HAL_UART_Transmit>
					if(fabs(accel_data[0]-accel_config[0])>=streshold_accel[0]){
 8002b6e:	4b71      	ldr	r3, [pc, #452]	; (8002d34 <main+0x934>)
 8002b70:	ed93 7a00 	vldr	s14, [r3]
 8002b74:	4b70      	ldr	r3, [pc, #448]	; (8002d38 <main+0x938>)
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b7e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002b82:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002b86:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b96:	db20      	blt.n	8002bda <main+0x7da>
						sprintf(message, "Accelerometer Change in X = %0.4f\r\n", accel_data[0]-accel_config[0]);
 8002b98:	4b66      	ldr	r3, [pc, #408]	; (8002d34 <main+0x934>)
 8002b9a:	ed93 7a00 	vldr	s14, [r3]
 8002b9e:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <main+0x938>)
 8002ba0:	edd3 7a00 	vldr	s15, [r3]
 8002ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba8:	ee17 0a90 	vmov	r0, s15
 8002bac:	f7fd fccc 	bl	8000548 <__aeabi_f2d>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	f107 0014 	add.w	r0, r7, #20
 8002bb8:	4961      	ldr	r1, [pc, #388]	; (8002d40 <main+0x940>)
 8002bba:	f006 fa73 	bl	80090a4 <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),HAL_MAX_DELAY);
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fb04 	bl	80001d0 <strlen>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	f107 0114 	add.w	r1, r7, #20
 8002bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd4:	4853      	ldr	r0, [pc, #332]	; (8002d24 <main+0x924>)
 8002bd6:	f004 fa55 	bl	8007084 <HAL_UART_Transmit>
					}
					if(fabs(accel_data[1]-accel_config[1])>=streshold_accel[0]){
 8002bda:	4b56      	ldr	r3, [pc, #344]	; (8002d34 <main+0x934>)
 8002bdc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002be0:	4b55      	ldr	r3, [pc, #340]	; (8002d38 <main+0x938>)
 8002be2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bea:	eeb0 7ae7 	vabs.f32	s14, s15
 8002bee:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002bf2:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c02:	db20      	blt.n	8002c46 <main+0x846>
						sprintf(message, "Accelerometer Change in Y = %0.4f\r\n", accel_data[1]-accel_config[1]);
 8002c04:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <main+0x934>)
 8002c06:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c0a:	4b4b      	ldr	r3, [pc, #300]	; (8002d38 <main+0x938>)
 8002c0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c14:	ee17 0a90 	vmov	r0, s15
 8002c18:	f7fd fc96 	bl	8000548 <__aeabi_f2d>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	f107 0014 	add.w	r0, r7, #20
 8002c24:	4947      	ldr	r1, [pc, #284]	; (8002d44 <main+0x944>)
 8002c26:	f006 fa3d 	bl	80090a4 <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),HAL_MAX_DELAY);
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd face 	bl	80001d0 <strlen>
 8002c34:	4603      	mov	r3, r0
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	f107 0114 	add.w	r1, r7, #20
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c40:	4838      	ldr	r0, [pc, #224]	; (8002d24 <main+0x924>)
 8002c42:	f004 fa1f 	bl	8007084 <HAL_UART_Transmit>
					}
					if(fabs(accel_data[2]-accel_config[2])>=streshold_accel[0]){
 8002c46:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <main+0x934>)
 8002c48:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c4c:	4b3a      	ldr	r3, [pc, #232]	; (8002d38 <main+0x938>)
 8002c4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c56:	eeb0 7ae7 	vabs.f32	s14, s15
 8002c5a:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002c5e:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6e:	db20      	blt.n	8002cb2 <main+0x8b2>
						sprintf(message, "Accelerometer Change in Z = %0.4f\r\n", accel_data[2]-accel_config[2]);
 8002c70:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <main+0x934>)
 8002c72:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c76:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <main+0x938>)
 8002c78:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c80:	ee17 0a90 	vmov	r0, s15
 8002c84:	f7fd fc60 	bl	8000548 <__aeabi_f2d>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	f107 0014 	add.w	r0, r7, #20
 8002c90:	492d      	ldr	r1, [pc, #180]	; (8002d48 <main+0x948>)
 8002c92:	f006 fa07 	bl	80090a4 <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),HAL_MAX_DELAY);
 8002c96:	f107 0314 	add.w	r3, r7, #20
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fa98 	bl	80001d0 <strlen>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	f107 0114 	add.w	r1, r7, #20
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	481d      	ldr	r0, [pc, #116]	; (8002d24 <main+0x924>)
 8002cae:	f004 f9e9 	bl	8007084 <HAL_UART_Transmit>
					}
				}

				if (fabs(gyro_data[0] - gyro_config[0]) >= streshold_gyro[0] || fabs(gyro_data[1] - gyro_config[1]) >= streshold_gyro[1] || fabs(gyro_data[2] - gyro_config[2]) >= streshold_gyro[2]) {
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <main+0x94c>)
 8002cb4:	ed93 7a00 	vldr	s14, [r3]
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <main+0x950>)
 8002cba:	edd3 7a00 	vldr	s15, [r3]
 8002cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc2:	eeb0 7ae7 	vabs.f32	s14, s15
 8002cc6:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002cca:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cda:	da52      	bge.n	8002d82 <main+0x982>
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <main+0x94c>)
 8002cde:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <main+0x950>)
 8002ce4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cec:	eeb0 7ae7 	vabs.f32	s14, s15
 8002cf0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002cf4:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8002cf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d04:	e026      	b.n	8002d54 <main+0x954>
 8002d06:	bf00      	nop
 8002d08:	20000018 	.word	0x20000018
 8002d0c:	20000370 	.word	0x20000370
 8002d10:	20000364 	.word	0x20000364
 8002d14:	200003a0 	.word	0x200003a0
 8002d18:	2000000c 	.word	0x2000000c
 8002d1c:	200003a4 	.word	0x200003a4
 8002d20:	0800bacc 	.word	0x0800bacc
 8002d24:	20000434 	.word	0x20000434
 8002d28:	20000010 	.word	0x20000010
 8002d2c:	200003a8 	.word	0x200003a8
 8002d30:	0800bb00 	.word	0x0800bb00
 8002d34:	20000378 	.word	0x20000378
 8002d38:	200003ac 	.word	0x200003ac
 8002d3c:	0800bb30 	.word	0x0800bb30
 8002d40:	0800bb54 	.word	0x0800bb54
 8002d44:	0800bb78 	.word	0x0800bb78
 8002d48:	0800bb9c 	.word	0x0800bb9c
 8002d4c:	2000038c 	.word	0x2000038c
 8002d50:	200003bc 	.word	0x200003bc
 8002d54:	da15      	bge.n	8002d82 <main+0x982>
 8002d56:	4b99      	ldr	r3, [pc, #612]	; (8002fbc <main+0xbbc>)
 8002d58:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d5c:	4b98      	ldr	r3, [pc, #608]	; (8002fc0 <main+0xbc0>)
 8002d5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d66:	eeb0 7ae7 	vabs.f32	s14, s15
 8002d6a:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002d6e:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8002d72:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7e:	f2c0 80b6 	blt.w	8002eee <main+0xaee>
					sprintf(message, "Device orientation compromised!!\r\n");
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	498f      	ldr	r1, [pc, #572]	; (8002fc4 <main+0xbc4>)
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f006 f98b 	bl	80090a4 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8002d8e:	f107 0314 	add.w	r3, r7, #20
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd fa1c 	bl	80001d0 <strlen>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	f107 0114 	add.w	r1, r7, #20
 8002da0:	f04f 33ff 	mov.w	r3, #4294967295
 8002da4:	4888      	ldr	r0, [pc, #544]	; (8002fc8 <main+0xbc8>)
 8002da6:	f004 f96d 	bl	8007084 <HAL_UART_Transmit>

					if (fabs(gyro_data[0] - gyro_config[0]) >= streshold_gyro[0]) {
 8002daa:	4b84      	ldr	r3, [pc, #528]	; (8002fbc <main+0xbbc>)
 8002dac:	ed93 7a00 	vldr	s14, [r3]
 8002db0:	4b83      	ldr	r3, [pc, #524]	; (8002fc0 <main+0xbc0>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dba:	eeb0 7ae7 	vabs.f32	s14, s15
 8002dbe:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002dc2:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	db20      	blt.n	8002e16 <main+0xa16>
						sprintf(message, "Gyroscope Change in X = %0.4f\r\n", gyro_data[0] - gyro_config[0]);
 8002dd4:	4b79      	ldr	r3, [pc, #484]	; (8002fbc <main+0xbbc>)
 8002dd6:	ed93 7a00 	vldr	s14, [r3]
 8002dda:	4b79      	ldr	r3, [pc, #484]	; (8002fc0 <main+0xbc0>)
 8002ddc:	edd3 7a00 	vldr	s15, [r3]
 8002de0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de4:	ee17 0a90 	vmov	r0, s15
 8002de8:	f7fd fbae 	bl	8000548 <__aeabi_f2d>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	f107 0014 	add.w	r0, r7, #20
 8002df4:	4975      	ldr	r1, [pc, #468]	; (8002fcc <main+0xbcc>)
 8002df6:	f006 f955 	bl	80090a4 <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd f9e6 	bl	80001d0 <strlen>
 8002e04:	4603      	mov	r3, r0
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	f107 0114 	add.w	r1, r7, #20
 8002e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e10:	486d      	ldr	r0, [pc, #436]	; (8002fc8 <main+0xbc8>)
 8002e12:	f004 f937 	bl	8007084 <HAL_UART_Transmit>
					}
					if (fabs(gyro_data[1] - gyro_config[1]) >= streshold_gyro[1]) {
 8002e16:	4b69      	ldr	r3, [pc, #420]	; (8002fbc <main+0xbbc>)
 8002e18:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e1c:	4b68      	ldr	r3, [pc, #416]	; (8002fc0 <main+0xbc0>)
 8002e1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e26:	eeb0 7ae7 	vabs.f32	s14, s15
 8002e2a:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002e2e:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8002e32:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3e:	db20      	blt.n	8002e82 <main+0xa82>
						sprintf(message, "Gyroscope Change in Y = %0.4f\r\n", gyro_data[1] - gyro_config[1]);
 8002e40:	4b5e      	ldr	r3, [pc, #376]	; (8002fbc <main+0xbbc>)
 8002e42:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e46:	4b5e      	ldr	r3, [pc, #376]	; (8002fc0 <main+0xbc0>)
 8002e48:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e50:	ee17 0a90 	vmov	r0, s15
 8002e54:	f7fd fb78 	bl	8000548 <__aeabi_f2d>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	f107 0014 	add.w	r0, r7, #20
 8002e60:	495b      	ldr	r1, [pc, #364]	; (8002fd0 <main+0xbd0>)
 8002e62:	f006 f91f 	bl	80090a4 <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd f9b0 	bl	80001d0 <strlen>
 8002e70:	4603      	mov	r3, r0
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	f107 0114 	add.w	r1, r7, #20
 8002e78:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7c:	4852      	ldr	r0, [pc, #328]	; (8002fc8 <main+0xbc8>)
 8002e7e:	f004 f901 	bl	8007084 <HAL_UART_Transmit>
					}
					if (fabs(gyro_data[2] - gyro_config[2]) >= streshold_gyro[2]) {
 8002e82:	4b4e      	ldr	r3, [pc, #312]	; (8002fbc <main+0xbbc>)
 8002e84:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e88:	4b4d      	ldr	r3, [pc, #308]	; (8002fc0 <main+0xbc0>)
 8002e8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e92:	eeb0 7ae7 	vabs.f32	s14, s15
 8002e96:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002e9a:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8002e9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eaa:	db20      	blt.n	8002eee <main+0xaee>
						sprintf(message, "Gyroscope Change in Z = %0.4f\r\n", gyro_data[2] - gyro_config[2]);
 8002eac:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <main+0xbbc>)
 8002eae:	ed93 7a02 	vldr	s14, [r3, #8]
 8002eb2:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <main+0xbc0>)
 8002eb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ebc:	ee17 0a90 	vmov	r0, s15
 8002ec0:	f7fd fb42 	bl	8000548 <__aeabi_f2d>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	f107 0014 	add.w	r0, r7, #20
 8002ecc:	4941      	ldr	r1, [pc, #260]	; (8002fd4 <main+0xbd4>)
 8002ece:	f006 f8e9 	bl	80090a4 <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8002ed2:	f107 0314 	add.w	r3, r7, #20
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd f97a 	bl	80001d0 <strlen>
 8002edc:	4603      	mov	r3, r0
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	f107 0114 	add.w	r1, r7, #20
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	4837      	ldr	r0, [pc, #220]	; (8002fc8 <main+0xbc8>)
 8002eea:	f004 f8cb 	bl	8007084 <HAL_UART_Transmit>
					}
				}


				if(fabs(p_data-p_config)>=streshold_p){
 8002eee:	4b3a      	ldr	r3, [pc, #232]	; (8002fd8 <main+0xbd8>)
 8002ef0:	ed93 7a00 	vldr	s14, [r3]
 8002ef4:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <main+0xbdc>)
 8002ef6:	edd3 7a00 	vldr	s15, [r3]
 8002efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efe:	eef0 7ae7 	vabs.f32	s15, s15
 8002f02:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002f06:	ed93 7a00 	vldr	s14, [r3]
 8002f0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f12:	d820      	bhi.n	8002f56 <main+0xb56>
					sprintf(message, "Change in pressure detected\r\nChange = %0.4f\r\n", p_data-p_config);
 8002f14:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <main+0xbd8>)
 8002f16:	ed93 7a00 	vldr	s14, [r3]
 8002f1a:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <main+0xbdc>)
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f24:	ee17 0a90 	vmov	r0, s15
 8002f28:	f7fd fb0e 	bl	8000548 <__aeabi_f2d>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	f107 0014 	add.w	r0, r7, #20
 8002f34:	492a      	ldr	r1, [pc, #168]	; (8002fe0 <main+0xbe0>)
 8002f36:	f006 f8b5 	bl	80090a4 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),HAL_MAX_DELAY);
 8002f3a:	f107 0314 	add.w	r3, r7, #20
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd f946 	bl	80001d0 <strlen>
 8002f44:	4603      	mov	r3, r0
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	f107 0114 	add.w	r1, r7, #20
 8002f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f50:	481d      	ldr	r0, [pc, #116]	; (8002fc8 <main+0xbc8>)
 8002f52:	f004 f897 	bl	8007084 <HAL_UART_Transmit>
				}
		        temp_config = t_data;
 8002f56:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <main+0xbe4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a23      	ldr	r2, [pc, #140]	; (8002fe8 <main+0xbe8>)
 8002f5c:	6013      	str	r3, [r2, #0]
		        h_config = h_data;
 8002f5e:	4b23      	ldr	r3, [pc, #140]	; (8002fec <main+0xbec>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a23      	ldr	r2, [pc, #140]	; (8002ff0 <main+0xbf0>)
 8002f64:	6013      	str	r3, [r2, #0]
		        p_config = p_data;
 8002f66:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <main+0xbd8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1c      	ldr	r2, [pc, #112]	; (8002fdc <main+0xbdc>)
 8002f6c:	6013      	str	r3, [r2, #0]
		        for (int i=0; i<3; i++){
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002f74:	e01c      	b.n	8002fb0 <main+0xbb0>
		        	accel_config[i] = accel_data[i];
 8002f76:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <main+0xbf4>)
 8002f78:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	491d      	ldr	r1, [pc, #116]	; (8002ff8 <main+0xbf8>)
 8002f84:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	601a      	str	r2, [r3, #0]
		        	gyro_config[i] = gyro_data[i];
 8002f8e:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <main+0xbbc>)
 8002f90:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4909      	ldr	r1, [pc, #36]	; (8002fc0 <main+0xbc0>)
 8002f9c:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	601a      	str	r2, [r3, #0]
		        for (int i=0; i<3; i++){
 8002fa6:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002faa:	3301      	adds	r3, #1
 8002fac:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002fb0:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	ddde      	ble.n	8002f76 <main+0xb76>
	while (1) {
 8002fb8:	f7ff ba39 	b.w	800242e <main+0x2e>
 8002fbc:	2000038c 	.word	0x2000038c
 8002fc0:	200003bc 	.word	0x200003bc
 8002fc4:	0800bb30 	.word	0x0800bb30
 8002fc8:	20000434 	.word	0x20000434
 8002fcc:	0800bbc0 	.word	0x0800bbc0
 8002fd0:	0800bbe0 	.word	0x0800bbe0
 8002fd4:	0800bc00 	.word	0x0800bc00
 8002fd8:	20000014 	.word	0x20000014
 8002fdc:	200003b8 	.word	0x200003b8
 8002fe0:	0800bc20 	.word	0x0800bc20
 8002fe4:	2000000c 	.word	0x2000000c
 8002fe8:	200003a4 	.word	0x200003a4
 8002fec:	20000010 	.word	0x20000010
 8002ff0:	200003a8 	.word	0x200003a8
 8002ff4:	20000378 	.word	0x20000378
 8002ff8:	200003ac 	.word	0x200003ac

08002ffc <Switch_Mode>:
		}
    }
}


void Switch_Mode() {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b0a2      	sub	sp, #136	; 0x88
 8003000:	af02      	add	r7, sp, #8
	char message[UART_BUFFER_SIZE];
	if (normal_mode) {
 8003002:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <Switch_Mode+0xcc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d047      	beq.n	800309a <Switch_Mode+0x9e>
		snprintf(message, UART_BUFFER_SIZE, "Entering Normal Mode...\nTotal ghosts captured: %d\r\n", ghosts_captured);
 800300a:	4b30      	ldr	r3, [pc, #192]	; (80030cc <Switch_Mode+0xd0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4638      	mov	r0, r7
 8003010:	4a2f      	ldr	r2, [pc, #188]	; (80030d0 <Switch_Mode+0xd4>)
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	f006 f812 	bl	800903c <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8003018:	463b      	mov	r3, r7
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd f8d8 	bl	80001d0 <strlen>
 8003020:	4603      	mov	r3, r0
 8003022:	b29a      	uxth	r2, r3
 8003024:	4639      	mov	r1, r7
 8003026:	f04f 33ff 	mov.w	r3, #4294967295
 800302a:	482a      	ldr	r0, [pc, #168]	; (80030d4 <Switch_Mode+0xd8>)
 800302c:	f004 f82a 	bl	8007084 <HAL_UART_Transmit>
		WiFi_Stat = WIFI_Init();  // if it gets stuck here, you likely did not include EXTI1_IRQHandler() in stm32l4xx_it.c as mentioned above
 8003030:	f000 fb86 	bl	8003740 <WIFI_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	461a      	mov	r2, r3
 8003038:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <Switch_Mode+0xdc>)
 800303a:	701a      	strb	r2, [r3, #0]
		WiFi_Stat &= WIFI_Connect(WiFi_SSID, WiFi_password, WiFi_security); // joining a WiFi network takes several seconds. Don't be too quick to judge that your program has 'hung' :)
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <Switch_Mode+0xe0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a27      	ldr	r2, [pc, #156]	; (80030e0 <Switch_Mode+0xe4>)
 8003042:	6811      	ldr	r1, [r2, #0]
 8003044:	2203      	movs	r2, #3
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fba6 	bl	8003798 <WIFI_Connect>
 800304c:	4603      	mov	r3, r0
 800304e:	461a      	mov	r2, r3
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <Switch_Mode+0xdc>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	4013      	ands	r3, r2
 8003056:	b2da      	uxtb	r2, r3
 8003058:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <Switch_Mode+0xdc>)
 800305a:	701a      	strb	r2, [r3, #0]
		if(WiFi_Stat==WIFI_STATUS_OK)wifi = 1;
 800305c:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <Switch_Mode+0xdc>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <Switch_Mode+0x6e>
 8003064:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <Switch_Mode+0xe8>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]
		WiFi_Stat = WIFI_OpenClientConnection(1, WIFI_TCP_PROTOCOL, "conn", ipaddr, DEST_PORT, SOURCE_PORT); // Make a TCP connection.
 800306a:	f240 73ec 	movw	r3, #2028	; 0x7ec
 800306e:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8003072:	9201      	str	r2, [sp, #4]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <Switch_Mode+0xec>)
 8003078:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <Switch_Mode+0xf0>)
 800307a:	2100      	movs	r1, #0
 800307c:	2001      	movs	r0, #1
 800307e:	f000 fbad 	bl	80037dc <WIFI_OpenClientConnection>
 8003082:	4603      	mov	r3, r0
 8003084:	461a      	mov	r2, r3
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <Switch_Mode+0xdc>)
 8003088:	701a      	strb	r2, [r3, #0]
		if(WiFi_Stat!=WIFI_STATUS_OK)wifi = 0;
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <Switch_Mode+0xdc>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d015      	beq.n	80030be <Switch_Mode+0xc2>
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <Switch_Mode+0xe8>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
	}
	else {
		snprintf(message, UART_BUFFER_SIZE, "Entering Ghost Busting Mode...\r\n");
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
	}
}
 8003098:	e011      	b.n	80030be <Switch_Mode+0xc2>
		snprintf(message, UART_BUFFER_SIZE, "Entering Ghost Busting Mode...\r\n");
 800309a:	463b      	mov	r3, r7
 800309c:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <Switch_Mode+0xf4>)
 800309e:	2180      	movs	r1, #128	; 0x80
 80030a0:	4618      	mov	r0, r3
 80030a2:	f005 ffcb 	bl	800903c <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80030a6:	463b      	mov	r3, r7
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd f891 	bl	80001d0 <strlen>
 80030ae:	4603      	mov	r3, r0
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	4639      	mov	r1, r7
 80030b4:	f04f 33ff 	mov.w	r3, #4294967295
 80030b8:	4806      	ldr	r0, [pc, #24]	; (80030d4 <Switch_Mode+0xd8>)
 80030ba:	f003 ffe3 	bl	8007084 <HAL_UART_Transmit>
}
 80030be:	bf00      	nop
 80030c0:	3780      	adds	r7, #128	; 0x80
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000004 	.word	0x20000004
 80030cc:	20000360 	.word	0x20000360
 80030d0:	0800bc68 	.word	0x0800bc68
 80030d4:	20000434 	.word	0x20000434
 80030d8:	200003cc 	.word	0x200003cc
 80030dc:	2000001c 	.word	0x2000001c
 80030e0:	20000020 	.word	0x20000020
 80030e4:	200003c8 	.word	0x200003c8
 80030e8:	20000024 	.word	0x20000024
 80030ec:	0800bc9c 	.word	0x0800bc9c
 80030f0:	0800bca4 	.word	0x0800bca4

080030f4 <Print_Sensor_Data>:

void Print_Sensor_Data() {
 80030f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f8:	b0b4      	sub	sp, #208	; 0xd0
 80030fa:	af0c      	add	r7, sp, #48	; 0x30
	char buffer[UART_BUFFER_SIZE];
	float mag_magnitude = vec_magnitude(mag_data);
 80030fc:	482f      	ldr	r0, [pc, #188]	; (80031bc <Print_Sensor_Data+0xc8>)
 80030fe:	f7ff f8df 	bl	80022c0 <vec_magnitude>
 8003102:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c
	float accel_magnitude = vec_magnitude(accel_data);
 8003106:	482e      	ldr	r0, [pc, #184]	; (80031c0 <Print_Sensor_Data+0xcc>)
 8003108:	f7ff f8da 	bl	80022c0 <vec_magnitude>
 800310c:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
	float gyro_magnitude = vec_magnitude(gyro_data);
 8003110:	482c      	ldr	r0, [pc, #176]	; (80031c4 <Print_Sensor_Data+0xd0>)
 8003112:	f7ff f8d5 	bl	80022c0 <vec_magnitude>
 8003116:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94

	snprintf(buffer, UART_BUFFER_SIZE,"T: %.2f C, P: %.2f hPa, H: %.2f %% RH, A: %.2f m/s^2, G: %.2f mdeg/s, M: %.2f gauss\r\n\n",t_data, p_data, h_data, accel_magnitude, gyro_magnitude, mag_magnitude);
 800311a:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <Print_Sensor_Data+0xd4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fa12 	bl	8000548 <__aeabi_f2d>
 8003124:	4604      	mov	r4, r0
 8003126:	460d      	mov	r5, r1
 8003128:	4b28      	ldr	r3, [pc, #160]	; (80031cc <Print_Sensor_Data+0xd8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd fa0b 	bl	8000548 <__aeabi_f2d>
 8003132:	4680      	mov	r8, r0
 8003134:	4689      	mov	r9, r1
 8003136:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <Print_Sensor_Data+0xdc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fa04 	bl	8000548 <__aeabi_f2d>
 8003140:	4682      	mov	sl, r0
 8003142:	468b      	mov	fp, r1
 8003144:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003148:	f7fd f9fe 	bl	8000548 <__aeabi_f2d>
 800314c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003150:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003154:	f7fd f9f8 	bl	8000548 <__aeabi_f2d>
 8003158:	e9c7 0100 	strd	r0, r1, [r7]
 800315c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003160:	f7fd f9f2 	bl	8000548 <__aeabi_f2d>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	f107 0014 	add.w	r0, r7, #20
 800316c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003170:	ed97 7b00 	vldr	d7, [r7]
 8003174:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003178:	ed97 7b02 	vldr	d7, [r7, #8]
 800317c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003180:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003184:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003188:	e9cd 4500 	strd	r4, r5, [sp]
 800318c:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <Print_Sensor_Data+0xe0>)
 800318e:	2180      	movs	r1, #128	; 0x80
 8003190:	f005 ff54 	bl	800903c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	4618      	mov	r0, r3
 800319a:	f7fd f819 	bl	80001d0 <strlen>
 800319e:	4603      	mov	r3, r0
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	f107 0114 	add.w	r1, r7, #20
 80031a6:	f04f 33ff 	mov.w	r3, #4294967295
 80031aa:	480b      	ldr	r0, [pc, #44]	; (80031d8 <Print_Sensor_Data+0xe4>)
 80031ac:	f003 ff6a 	bl	8007084 <HAL_UART_Transmit>
}
 80031b0:	bf00      	nop
 80031b2:	37a0      	adds	r7, #160	; 0xa0
 80031b4:	46bd      	mov	sp, r7
 80031b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ba:	bf00      	nop
 80031bc:	20000364 	.word	0x20000364
 80031c0:	20000378 	.word	0x20000378
 80031c4:	2000038c 	.word	0x2000038c
 80031c8:	2000000c 	.word	0x2000000c
 80031cc:	20000014 	.word	0x20000014
 80031d0:	20000010 	.word	0x20000010
 80031d4:	0800b8ec 	.word	0x0800b8ec
 80031d8:	20000434 	.word	0x20000434

080031dc <UART1_Init>:

static void UART1_Init(void){
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
	/* Pin configuration for UART. BSP_COM_Init() can do this automatically */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80031e2:	4b27      	ldr	r3, [pc, #156]	; (8003280 <UART1_Init+0xa4>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	4a26      	ldr	r2, [pc, #152]	; (8003280 <UART1_Init+0xa4>)
 80031e8:	f043 0302 	orr.w	r3, r3, #2
 80031ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <UART1_Init+0xa4>)
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fa:	1d3b      	adds	r3, r7, #4
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003208:	2307      	movs	r3, #7
 800320a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800320c:	23c0      	movs	r3, #192	; 0xc0
 800320e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003218:	2303      	movs	r3, #3
 800321a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	4619      	mov	r1, r3
 8003220:	4818      	ldr	r0, [pc, #96]	; (8003284 <UART1_Init+0xa8>)
 8003222:	f001 fde1 	bl	8004de8 <HAL_GPIO_Init>

	/* Configuring UART1 */
	huart1.Instance = USART1;
 8003226:	4b18      	ldr	r3, [pc, #96]	; (8003288 <UART1_Init+0xac>)
 8003228:	4a18      	ldr	r2, [pc, #96]	; (800328c <UART1_Init+0xb0>)
 800322a:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800322c:	4b16      	ldr	r3, [pc, #88]	; (8003288 <UART1_Init+0xac>)
 800322e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003232:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003234:	4b14      	ldr	r3, [pc, #80]	; (8003288 <UART1_Init+0xac>)
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800323a:	4b13      	ldr	r3, [pc, #76]	; (8003288 <UART1_Init+0xac>)
 800323c:	2200      	movs	r2, #0
 800323e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003240:	4b11      	ldr	r3, [pc, #68]	; (8003288 <UART1_Init+0xac>)
 8003242:	2200      	movs	r2, #0
 8003244:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <UART1_Init+0xac>)
 8003248:	220c      	movs	r2, #12
 800324a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <UART1_Init+0xac>)
 800324e:	2200      	movs	r2, #0
 8003250:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003252:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <UART1_Init+0xac>)
 8003254:	2200      	movs	r2, #0
 8003256:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <UART1_Init+0xac>)
 800325a:	2200      	movs	r2, #0
 800325c:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <UART1_Init+0xac>)
 8003260:	2200      	movs	r2, #0
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_UART_Init(&huart1) != HAL_OK){
 8003264:	e000      	b.n	8003268 <UART1_Init+0x8c>
		continue;
 8003266:	bf00      	nop
	while (HAL_UART_Init(&huart1) != HAL_OK){
 8003268:	4807      	ldr	r0, [pc, #28]	; (8003288 <UART1_Init+0xac>)
 800326a:	f003 febd 	bl	8006fe8 <HAL_UART_Init>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f8      	bne.n	8003266 <UART1_Init+0x8a>
	}
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	48000400 	.word	0x48000400
 8003288:	20000434 	.word	0x20000434
 800328c:	40013800 	.word	0x40013800

08003290 <MX_GPIO_Init>:

static void MX_GPIO_Init(void){
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();  // Enable AHB2 Bus for GPIOC
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <MX_GPIO_Init+0x54>)
 8003298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329a:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <MX_GPIO_Init+0x54>)
 800329c:	f043 0304 	orr.w	r3, r3, #4
 80032a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <MX_GPIO_Init+0x54>)
 80032a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ae:	1d3b      	adds	r3, r7, #4
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]

	// Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF,
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80032bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032c2:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <MX_GPIO_Init+0x58>)
 80032c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	4619      	mov	r1, r3
 80032ce:	4807      	ldr	r0, [pc, #28]	; (80032ec <MX_GPIO_Init+0x5c>)
 80032d0:	f001 fd8a 	bl	8004de8 <HAL_GPIO_Init>

	// Enable NVIC EXTI line 13
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032d4:	2028      	movs	r0, #40	; 0x28
 80032d6:	f001 fd2c 	bl	8004d32 <HAL_NVIC_EnableIRQ>
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000
 80032e8:	10210000 	.word	0x10210000
 80032ec:	48000800 	.word	0x48000800

080032f0 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi3);
 80032f4:	4802      	ldr	r0, [pc, #8]	; (8003300 <SPI3_IRQHandler+0x10>)
 80032f6:	f003 fbe3 	bl	8006ac0 <HAL_SPI_IRQHandler>
}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	200003d0 	.word	0x200003d0

08003304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_MspInit+0x44>)
 800330c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330e:	4a0e      	ldr	r2, [pc, #56]	; (8003348 <HAL_MspInit+0x44>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6613      	str	r3, [r2, #96]	; 0x60
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_MspInit+0x44>)
 8003318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_MspInit+0x44>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	4a08      	ldr	r2, [pc, #32]	; (8003348 <HAL_MspInit+0x44>)
 8003328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332c:	6593      	str	r3, [r2, #88]	; 0x58
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_MspInit+0x44>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000

0800334c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <HAL_I2C_MspInit+0x7c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d128      	bne.n	80033c0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <HAL_I2C_MspInit+0x80>)
 8003370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003372:	4a16      	ldr	r2, [pc, #88]	; (80033cc <HAL_I2C_MspInit+0x80>)
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800337a:	4b14      	ldr	r3, [pc, #80]	; (80033cc <HAL_I2C_MspInit+0x80>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003386:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800338a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800338c:	2312      	movs	r3, #18
 800338e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003390:	2301      	movs	r3, #1
 8003392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003394:	2303      	movs	r3, #3
 8003396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003398:	2304      	movs	r3, #4
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800339c:	f107 0314 	add.w	r3, r7, #20
 80033a0:	4619      	mov	r1, r3
 80033a2:	480b      	ldr	r0, [pc, #44]	; (80033d0 <HAL_I2C_MspInit+0x84>)
 80033a4:	f001 fd20 	bl	8004de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_I2C_MspInit+0x80>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	4a07      	ldr	r2, [pc, #28]	; (80033cc <HAL_I2C_MspInit+0x80>)
 80033ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033b2:	6593      	str	r3, [r2, #88]	; 0x58
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_I2C_MspInit+0x80>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80033c0:	bf00      	nop
 80033c2:	3728      	adds	r7, #40	; 0x28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40005800 	.word	0x40005800
 80033cc:	40021000 	.word	0x40021000
 80033d0:	48000400 	.word	0x48000400

080033d4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a08      	ldr	r2, [pc, #32]	; (8003404 <HAL_I2C_MspDeInit+0x30>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10a      	bne.n	80033fc <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <HAL_I2C_MspDeInit+0x34>)
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ea:	4a07      	ldr	r2, [pc, #28]	; (8003408 <HAL_I2C_MspDeInit+0x34>)
 80033ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80033f0:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80033f2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80033f6:	4805      	ldr	r0, [pc, #20]	; (800340c <HAL_I2C_MspDeInit+0x38>)
 80033f8:	f001 fea0 	bl	800513c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40005800 	.word	0x40005800
 8003408:	40021000 	.word	0x40021000
 800340c:	48000400 	.word	0x48000400

08003410 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003418:	f107 0314 	add.w	r3, r7, #20
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a17      	ldr	r2, [pc, #92]	; (800348c <HAL_SPI_MspInit+0x7c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d128      	bne.n	8003484 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <HAL_SPI_MspInit+0x80>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	4a16      	ldr	r2, [pc, #88]	; (8003490 <HAL_SPI_MspInit+0x80>)
 8003438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800343c:	6593      	str	r3, [r2, #88]	; 0x58
 800343e:	4b14      	ldr	r3, [pc, #80]	; (8003490 <HAL_SPI_MspInit+0x80>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <HAL_SPI_MspInit+0x80>)
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	4a10      	ldr	r2, [pc, #64]	; (8003490 <HAL_SPI_MspInit+0x80>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003456:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <HAL_SPI_MspInit+0x80>)
 8003458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003462:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003468:	2302      	movs	r3, #2
 800346a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003470:	2303      	movs	r3, #3
 8003472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003474:	2306      	movs	r3, #6
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	4619      	mov	r1, r3
 800347e:	4805      	ldr	r0, [pc, #20]	; (8003494 <HAL_SPI_MspInit+0x84>)
 8003480:	f001 fcb2 	bl	8004de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003484:	bf00      	nop
 8003486:	3728      	adds	r7, #40	; 0x28
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40003c00 	.word	0x40003c00
 8003490:	40021000 	.word	0x40021000
 8003494:	48000800 	.word	0x48000800

08003498 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a08      	ldr	r2, [pc, #32]	; (80034c8 <HAL_SPI_MspDeInit+0x30>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d10a      	bne.n	80034c0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <HAL_SPI_MspDeInit+0x34>)
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	4a07      	ldr	r2, [pc, #28]	; (80034cc <HAL_SPI_MspDeInit+0x34>)
 80034b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80034b4:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80034b6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80034ba:	4805      	ldr	r0, [pc, #20]	; (80034d0 <HAL_SPI_MspDeInit+0x38>)
 80034bc:	f001 fe3e 	bl	800513c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40003c00 	.word	0x40003c00
 80034cc:	40021000 	.word	0x40021000
 80034d0:	48000800 	.word	0x48000800

080034d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	; 0x30
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 031c 	add.w	r3, r7, #28
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a2e      	ldr	r2, [pc, #184]	; (80035ac <HAL_UART_MspInit+0xd8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d128      	bne.n	8003548 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034f6:	4b2e      	ldr	r3, [pc, #184]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 80034f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fa:	4a2d      	ldr	r2, [pc, #180]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 80034fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003500:	6613      	str	r3, [r2, #96]	; 0x60
 8003502:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800350e:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	4a27      	ldr	r2, [pc, #156]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800351a:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003526:	23c0      	movs	r3, #192	; 0xc0
 8003528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	2302      	movs	r3, #2
 800352c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003532:	2303      	movs	r3, #3
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003536:	2307      	movs	r3, #7
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800353a:	f107 031c 	add.w	r3, r7, #28
 800353e:	4619      	mov	r1, r3
 8003540:	481c      	ldr	r0, [pc, #112]	; (80035b4 <HAL_UART_MspInit+0xe0>)
 8003542:	f001 fc51 	bl	8004de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003546:	e02d      	b.n	80035a4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1a      	ldr	r2, [pc, #104]	; (80035b8 <HAL_UART_MspInit+0xe4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d128      	bne.n	80035a4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003552:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	4a16      	ldr	r2, [pc, #88]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800355c:	6593      	str	r3, [r2, #88]	; 0x58
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800356a:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356e:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003570:	f043 0308 	orr.w	r3, r3, #8
 8003574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003582:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003588:	2302      	movs	r3, #2
 800358a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003590:	2303      	movs	r3, #3
 8003592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003594:	2307      	movs	r3, #7
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003598:	f107 031c 	add.w	r3, r7, #28
 800359c:	4619      	mov	r1, r3
 800359e:	4807      	ldr	r0, [pc, #28]	; (80035bc <HAL_UART_MspInit+0xe8>)
 80035a0:	f001 fc22 	bl	8004de8 <HAL_GPIO_Init>
}
 80035a4:	bf00      	nop
 80035a6:	3730      	adds	r7, #48	; 0x30
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40013800 	.word	0x40013800
 80035b0:	40021000 	.word	0x40021000
 80035b4:	48000400 	.word	0x48000400
 80035b8:	40004800 	.word	0x40004800
 80035bc:	48000c00 	.word	0x48000c00

080035c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ce:	b480      	push	{r7}
 80035d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035d2:	e7fe      	b.n	80035d2 <HardFault_Handler+0x4>

080035d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035d8:	e7fe      	b.n	80035d8 <MemManage_Handler+0x4>

080035da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035da:	b480      	push	{r7}
 80035dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035de:	e7fe      	b.n	80035de <BusFault_Handler+0x4>

080035e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035e4:	e7fe      	b.n	80035e4 <UsageFault_Handler+0x4>

080035e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003602:	b480      	push	{r7}
 8003604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003614:	f001 fa56 	bl	8004ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003618:	bf00      	nop
 800361a:	bd80      	pop	{r7, pc}

0800361c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003620:	2020      	movs	r0, #32
 8003622:	f001 fec9 	bl	80053b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003626:	2040      	movs	r0, #64	; 0x40
 8003628:	f001 fec6 	bl	80053b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800362c:	2080      	movs	r0, #128	; 0x80
 800362e:	f001 fec3 	bl	80053b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003632:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003636:	f001 febf 	bl	80053b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}

0800363e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003642:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003646:	f001 feb7 	bl	80053b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800364a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800364e:	f001 feb3 	bl	80053b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003652:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003656:	f001 feaf 	bl	80053b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800365a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800365e:	f001 feab 	bl	80053b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003662:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003666:	f001 fea7 	bl	80053b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}

0800366e <EXTI1_IRQHandler>:
/* USER CODE END 1 */
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

void EXTI1_IRQHandler(void)

{
 800366e:	b580      	push	{r7, lr}
 8003670:	af00      	add	r7, sp, #0

        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003672:	2002      	movs	r0, #2
 8003674:	f001 fea0 	bl	80053b8 <HAL_GPIO_EXTI_IRQHandler>

}
 8003678:	bf00      	nop
 800367a:	bd80      	pop	{r7, pc}

0800367c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <_sbrk+0x50>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <_sbrk+0x16>
		heap_end = &end;
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <_sbrk+0x50>)
 800368e:	4a10      	ldr	r2, [pc, #64]	; (80036d0 <_sbrk+0x54>)
 8003690:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003692:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <_sbrk+0x50>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <_sbrk+0x50>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4413      	add	r3, r2
 80036a0:	466a      	mov	r2, sp
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d907      	bls.n	80036b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80036a6:	f004 fdf3 	bl	8008290 <__errno>
 80036aa:	4603      	mov	r3, r0
 80036ac:	220c      	movs	r2, #12
 80036ae:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80036b0:	f04f 33ff 	mov.w	r3, #4294967295
 80036b4:	e006      	b.n	80036c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <_sbrk+0x50>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	4a03      	ldr	r2, [pc, #12]	; (80036cc <_sbrk+0x50>)
 80036c0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80036c2:	68fb      	ldr	r3, [r7, #12]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	200004b4 	.word	0x200004b4
 80036d0:	20000c88 	.word	0x20000c88

080036d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036d8:	4b17      	ldr	r3, [pc, #92]	; (8003738 <SystemInit+0x64>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	4a16      	ldr	r2, [pc, #88]	; (8003738 <SystemInit+0x64>)
 80036e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80036e8:	4b14      	ldr	r3, [pc, #80]	; (800373c <SystemInit+0x68>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a13      	ldr	r2, [pc, #76]	; (800373c <SystemInit+0x68>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <SystemInit+0x68>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <SystemInit+0x68>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a0f      	ldr	r2, [pc, #60]	; (800373c <SystemInit+0x68>)
 8003700:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003704:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003708:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800370a:	4b0c      	ldr	r3, [pc, #48]	; (800373c <SystemInit+0x68>)
 800370c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003710:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <SystemInit+0x68>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a09      	ldr	r2, [pc, #36]	; (800373c <SystemInit+0x68>)
 8003718:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800371e:	4b07      	ldr	r3, [pc, #28]	; (800373c <SystemInit+0x68>)
 8003720:	2200      	movs	r2, #0
 8003722:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <SystemInit+0x64>)
 8003726:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800372a:	609a      	str	r2, [r3, #8]
#endif
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	e000ed00 	.word	0xe000ed00
 800373c:	40021000 	.word	0x40021000

08003740 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <WIFI_Init+0x40>)
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <WIFI_Init+0x44>)
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <WIFI_Init+0x48>)
 8003754:	4a0d      	ldr	r2, [pc, #52]	; (800378c <WIFI_Init+0x4c>)
 8003756:	490e      	ldr	r1, [pc, #56]	; (8003790 <WIFI_Init+0x50>)
 8003758:	480e      	ldr	r0, [pc, #56]	; (8003794 <WIFI_Init+0x54>)
 800375a:	f7fd fe8b 	bl	8001474 <ES_WIFI_RegisterBusIO>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d107      	bne.n	8003774 <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003764:	480b      	ldr	r0, [pc, #44]	; (8003794 <WIFI_Init+0x54>)
 8003766:	f7fd fe57 	bl	8001418 <ES_WIFI_Init>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8003774:	79fb      	ldrb	r3, [r7, #7]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	08001c99 	.word	0x08001c99
 8003784:	08001d7d 	.word	0x08001d7d
 8003788:	08001e3d 	.word	0x08001e3d
 800378c:	08001c01 	.word	0x08001c01
 8003790:	08001a79 	.word	0x08001a79
 8003794:	200004b8 	.word	0x200004b8

08003798 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 80037a6:	2301      	movs	r3, #1
 80037a8:	75fb      	strb	r3, [r7, #23]
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	68f9      	ldr	r1, [r7, #12]
 80037b0:	4809      	ldr	r0, [pc, #36]	; (80037d8 <WIFI_Connect+0x40>)
 80037b2:	f7fd fe93 	bl	80014dc <ES_WIFI_Connect>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80037bc:	4806      	ldr	r0, [pc, #24]	; (80037d8 <WIFI_Connect+0x40>)
 80037be:	f7fd ff05 	bl	80015cc <ES_WIFI_GetNetworkSettings>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	75fb      	strb	r3, [r7, #23]
    }
    
  }
  return ret;
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200004b8 	.word	0x200004b8

080037dc <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	460b      	mov	r3, r1
 80037ea:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	757b      	strb	r3, [r7, #21]
  conn.RemotePort = port;
 80037f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80037fa:	82fb      	strh	r3, [r7, #22]
  conn.LocalPort = local_port;
 80037fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80037fe:	833b      	strh	r3, [r7, #24]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003800:	7afb      	ldrb	r3, [r7, #11]
 8003802:	2b00      	cmp	r3, #0
 8003804:	bf14      	ite	ne
 8003806:	2301      	movne	r3, #1
 8003808:	2300      	moveq	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	753b      	strb	r3, [r7, #20]
  conn.RemoteIP[0] = ipaddr[0];
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	76bb      	strb	r3, [r7, #26]
  conn.RemoteIP[1] = ipaddr[1];
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	785b      	ldrb	r3, [r3, #1]
 8003818:	76fb      	strb	r3, [r7, #27]
  conn.RemoteIP[2] = ipaddr[2];
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	789b      	ldrb	r3, [r3, #2]
 800381e:	773b      	strb	r3, [r7, #28]
  conn.RemoteIP[3] = ipaddr[3];
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	78db      	ldrb	r3, [r3, #3]
 8003824:	777b      	strb	r3, [r7, #29]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003826:	f107 0314 	add.w	r3, r7, #20
 800382a:	4619      	mov	r1, r3
 800382c:	4807      	ldr	r0, [pc, #28]	; (800384c <WIFI_OpenClientConnection+0x70>)
 800382e:	f7fd fef7 	bl	8001620 <ES_WIFI_StartClientConnection>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800383e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003842:	4618      	mov	r0, r3
 8003844:	3728      	adds	r7, #40	; 0x28
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	200004b8 	.word	0x200004b8

08003850 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af02      	add	r7, sp, #8
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	4603      	mov	r3, r0
 800385c:	73fb      	strb	r3, [r7, #15]
 800385e:	4613      	mov	r3, r2
 8003860:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003866:	89ba      	ldrh	r2, [r7, #12]
 8003868:	7bf9      	ldrb	r1, [r7, #15]
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	4613      	mov	r3, r2
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	4806      	ldr	r0, [pc, #24]	; (8003890 <WIFI_SendData+0x40>)
 8003878:	f7fd ff8e 	bl	8001798 <ES_WIFI_SendData>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8003886:	7dfb      	ldrb	r3, [r7, #23]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	200004b8 	.word	0x200004b8

08003894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003898:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800389a:	e003      	b.n	80038a4 <LoopCopyDataInit>

0800389c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800389e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80038a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80038a2:	3104      	adds	r1, #4

080038a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80038a4:	480b      	ldr	r0, [pc, #44]	; (80038d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80038a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80038aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80038ac:	d3f6      	bcc.n	800389c <CopyDataInit>
	ldr	r2, =_sbss
 80038ae:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80038b0:	e002      	b.n	80038b8 <LoopFillZerobss>

080038b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80038b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80038b4:	f842 3b04 	str.w	r3, [r2], #4

080038b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <LoopForever+0x16>)
	cmp	r2, r3
 80038ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80038bc:	d3f9      	bcc.n	80038b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038be:	f7ff ff09 	bl	80036d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038c2:	f004 fde1 	bl	8008488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038c6:	f7fe fd9b 	bl	8002400 <main>

080038ca <LoopForever>:

LoopForever:
    b LoopForever
 80038ca:	e7fe      	b.n	80038ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80038cc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80038d0:	0800c168 	.word	0x0800c168
	ldr	r0, =_sdata
 80038d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80038d8:	200002d4 	.word	0x200002d4
	ldr	r2, =_sbss
 80038dc:	200002d4 	.word	0x200002d4
	ldr	r3, = _ebss
 80038e0:	20000c84 	.word	0x20000c84

080038e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038e4:	e7fe      	b.n	80038e4 <ADC1_2_IRQHandler>
	...

080038e8 <BSP_LED_Init>:
  * @param  Led: LED to be configured. 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <BSP_LED_Init+0x28>
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <BSP_LED_Init+0x58>)
 80038fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fc:	4a10      	ldr	r2, [pc, #64]	; (8003940 <BSP_LED_Init+0x58>)
 80038fe:	f043 0302 	orr.w	r3, r3, #2
 8003902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <BSP_LED_Init+0x58>)
 8003906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8003910:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003914:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003916:	2301      	movs	r3, #1
 8003918:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800391e:	2302      	movs	r3, #2
 8003920:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	4a07      	ldr	r2, [pc, #28]	; (8003944 <BSP_LED_Init+0x5c>)
 8003926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392a:	f107 020c 	add.w	r2, r7, #12
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f001 fa59 	bl	8004de8 <HAL_GPIO_Init>
}
 8003936:	bf00      	nop
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
 8003944:	2000002c 	.word	0x2000002c

08003948 <BSP_LED_Off>:
  * @param  Led: LED to be set off
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	4a06      	ldr	r2, [pc, #24]	; (8003970 <BSP_LED_Off+0x28>)
 8003956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800395e:	b291      	uxth	r1, r2
 8003960:	2200      	movs	r2, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f001 fcf6 	bl	8005354 <HAL_GPIO_WritePin>
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	2000002c 	.word	0x2000002c

08003974 <BSP_LED_Toggle>:
  * @param  Led: LED to be toggled
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	4a06      	ldr	r2, [pc, #24]	; (800399c <BSP_LED_Toggle+0x28>)
 8003982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800398a:	b292      	uxth	r2, r2
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f001 fcf8 	bl	8005384 <HAL_GPIO_TogglePin>
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	2000002c 	.word	0x2000002c

080039a0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	; 0x28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80039a8:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <I2Cx_MspInit+0xa8>)
 80039aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ac:	4a26      	ldr	r2, [pc, #152]	; (8003a48 <I2Cx_MspInit+0xa8>)
 80039ae:	f043 0302 	orr.w	r3, r3, #2
 80039b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039b4:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <I2Cx_MspInit+0xa8>)
 80039b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80039c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80039c6:	2312      	movs	r3, #18
 80039c8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80039ca:	2301      	movs	r3, #1
 80039cc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ce:	2303      	movs	r3, #3
 80039d0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80039d2:	2304      	movs	r3, #4
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80039d6:	f107 0314 	add.w	r3, r7, #20
 80039da:	4619      	mov	r1, r3
 80039dc:	481b      	ldr	r0, [pc, #108]	; (8003a4c <I2Cx_MspInit+0xac>)
 80039de:	f001 fa03 	bl	8004de8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80039e2:	f107 0314 	add.w	r3, r7, #20
 80039e6:	4619      	mov	r1, r3
 80039e8:	4818      	ldr	r0, [pc, #96]	; (8003a4c <I2Cx_MspInit+0xac>)
 80039ea:	f001 f9fd 	bl	8004de8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <I2Cx_MspInit+0xa8>)
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <I2Cx_MspInit+0xa8>)
 80039f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039f8:	6593      	str	r3, [r2, #88]	; 0x58
 80039fa:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <I2Cx_MspInit+0xa8>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <I2Cx_MspInit+0xa8>)
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	4a0f      	ldr	r2, [pc, #60]	; (8003a48 <I2Cx_MspInit+0xa8>)
 8003a0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a10:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <I2Cx_MspInit+0xa8>)
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	4a0c      	ldr	r2, [pc, #48]	; (8003a48 <I2Cx_MspInit+0xa8>)
 8003a18:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003a1c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	210f      	movs	r1, #15
 8003a22:	2021      	movs	r0, #33	; 0x21
 8003a24:	f001 f969 	bl	8004cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003a28:	2021      	movs	r0, #33	; 0x21
 8003a2a:	f001 f982 	bl	8004d32 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	210f      	movs	r1, #15
 8003a32:	2022      	movs	r0, #34	; 0x22
 8003a34:	f001 f961 	bl	8004cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003a38:	2022      	movs	r0, #34	; 0x22
 8003a3a:	f001 f97a 	bl	8004d32 <HAL_NVIC_EnableIRQ>
}
 8003a3e:	bf00      	nop
 8003a40:	3728      	adds	r7, #40	; 0x28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	48000400 	.word	0x48000400

08003a50 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <I2Cx_Init+0x54>)
 8003a5c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a11      	ldr	r2, [pc, #68]	; (8003aa8 <I2Cx_Init+0x58>)
 8003a62:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ff89 	bl	80039a0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f001 fcaa 	bl	80053e8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003a94:	2100      	movs	r1, #0
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f002 f9ae 	bl	8005df8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40005800 	.word	0x40005800
 8003aa8:	00702681 	.word	0x00702681

08003aac <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af04      	add	r7, sp, #16
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4603      	mov	r3, r0
 8003abc:	72fb      	strb	r3, [r7, #11]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	813b      	strh	r3, [r7, #8]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003aca:	7afb      	ldrb	r3, [r7, #11]
 8003acc:	b299      	uxth	r1, r3
 8003ace:	88f8      	ldrh	r0, [r7, #6]
 8003ad0:	893a      	ldrh	r2, [r7, #8]
 8003ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ad6:	9302      	str	r3, [sp, #8]
 8003ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f001 fe52 	bl	800578c <HAL_I2C_Mem_Read>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	4619      	mov	r1, r3
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f832 	bl	8003b60 <I2Cx_Error>
  }
  return status;
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b08a      	sub	sp, #40	; 0x28
 8003b0a:	af04      	add	r7, sp, #16
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	4608      	mov	r0, r1
 8003b10:	4611      	mov	r1, r2
 8003b12:	461a      	mov	r2, r3
 8003b14:	4603      	mov	r3, r0
 8003b16:	72fb      	strb	r3, [r7, #11]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	813b      	strh	r3, [r7, #8]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b24:	7afb      	ldrb	r3, [r7, #11]
 8003b26:	b299      	uxth	r1, r3
 8003b28:	88f8      	ldrh	r0, [r7, #6]
 8003b2a:	893a      	ldrh	r2, [r7, #8]
 8003b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b30:	9302      	str	r3, [sp, #8]
 8003b32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f001 fd11 	bl	8005564 <HAL_I2C_Mem_Write>
 8003b42:	4603      	mov	r3, r0
 8003b44:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003b4c:	7afb      	ldrb	r3, [r7, #11]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f805 	bl	8003b60 <I2Cx_Error>
  }
  return status;
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f001 fcca 	bl	8005506 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff ff6c 	bl	8003a50 <I2Cx_Init>
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003b84:	4802      	ldr	r0, [pc, #8]	; (8003b90 <SENSOR_IO_Init+0x10>)
 8003b86:	f7ff ff63 	bl	8003a50 <I2Cx_Init>
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000b60 	.word	0x20000b60

08003b94 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	71bb      	strb	r3, [r7, #6]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003ba6:	79bb      	ldrb	r3, [r7, #6]
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	79f9      	ldrb	r1, [r7, #7]
 8003bac:	2301      	movs	r3, #1
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	1d7b      	adds	r3, r7, #5
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	4803      	ldr	r0, [pc, #12]	; (8003bc4 <SENSOR_IO_Write+0x30>)
 8003bb8:	f7ff ffa5 	bl	8003b06 <I2Cx_WriteMultiple>
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000b60 	.word	0x20000b60

08003bc8 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	4603      	mov	r3, r0
 8003bd0:	460a      	mov	r2, r1
 8003bd2:	71fb      	strb	r3, [r7, #7]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003bdc:	79bb      	ldrb	r3, [r7, #6]
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	79f9      	ldrb	r1, [r7, #7]
 8003be2:	2301      	movs	r3, #1
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	f107 030f 	add.w	r3, r7, #15
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2301      	movs	r3, #1
 8003bee:	4804      	ldr	r0, [pc, #16]	; (8003c00 <SENSOR_IO_Read+0x38>)
 8003bf0:	f7ff ff5c 	bl	8003aac <I2Cx_ReadMultiple>

  return read_value;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000b60 	.word	0x20000b60

08003c04 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	603a      	str	r2, [r7, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
 8003c12:	460b      	mov	r3, r1
 8003c14:	71bb      	strb	r3, [r7, #6]
 8003c16:	4613      	mov	r3, r2
 8003c18:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003c1a:	79bb      	ldrb	r3, [r7, #6]
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	79f9      	ldrb	r1, [r7, #7]
 8003c20:	88bb      	ldrh	r3, [r7, #4]
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	2301      	movs	r3, #1
 8003c2a:	4804      	ldr	r0, [pc, #16]	; (8003c3c <SENSOR_IO_ReadMultiple+0x38>)
 8003c2c:	f7ff ff3e 	bl	8003aac <I2Cx_ReadMultiple>
 8003c30:	4603      	mov	r3, r0
 8003c32:	b29b      	uxth	r3, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000b60 	.word	0x20000b60

08003c40 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003c4e:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <BSP_ACCELERO_Init+0x74>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	4798      	blx	r3
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b6a      	cmp	r3, #106	; 0x6a
 8003c58:	d002      	beq.n	8003c60 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
 8003c5e:	e024      	b.n	8003caa <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003c60:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <BSP_ACCELERO_Init+0x78>)
 8003c62:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <BSP_ACCELERO_Init+0x74>)
 8003c64:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8003c66:	2330      	movs	r3, #48	; 0x30
 8003c68:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003c72:	2340      	movs	r3, #64	; 0x40
 8003c74:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8003c7e:	797a      	ldrb	r2, [r7, #5]
 8003c80:	7abb      	ldrb	r3, [r7, #10]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003c88:	7a3b      	ldrb	r3, [r7, #8]
 8003c8a:	f043 0304 	orr.w	r3, r3, #4
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	b21a      	sxth	r2, r3
 8003c94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	b21b      	sxth	r3, r3
 8003c9c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <BSP_ACCELERO_Init+0x78>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	89ba      	ldrh	r2, [r7, #12]
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4798      	blx	r3
  }  

  return ret;
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	2000008c 	.word	0x2000008c
 8003cb8:	20000bac 	.word	0x20000bac

08003cbc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8003cc4:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d009      	beq.n	8003ce0 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8003cd6:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
    }
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20000bac 	.word	0x20000bac

08003cec <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003cfa:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <BSP_GYRO_Init+0x7c>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	4798      	blx	r3
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b6a      	cmp	r3, #106	; 0x6a
 8003d04:	d002      	beq.n	8003d0c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
 8003d0a:	e028      	b.n	8003d5e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8003d0c:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <BSP_GYRO_Init+0x80>)
 8003d0e:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <BSP_GYRO_Init+0x7c>)
 8003d10:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8003d16:	2330      	movs	r3, #48	; 0x30
 8003d18:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003d22:	2340      	movs	r3, #64	; 0x40
 8003d24:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8003d2a:	230c      	movs	r3, #12
 8003d2c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8003d2e:	7aba      	ldrb	r2, [r7, #10]
 8003d30:	797b      	ldrb	r3, [r7, #5]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003d38:	7a3b      	ldrb	r3, [r7, #8]
 8003d3a:	f043 0304 	orr.w	r3, r3, #4
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	b21a      	sxth	r2, r3
 8003d44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	b21b      	sxth	r3, r3
 8003d4c:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <BSP_GYRO_Init+0x80>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	89ba      	ldrh	r2, [r7, #12]
 8003d56:	4610      	mov	r0, r2
 8003d58:	4798      	blx	r3
    
    ret = GYRO_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	200000c0 	.word	0x200000c0
 8003d6c:	20000bb0 	.word	0x20000bb0

08003d70 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8003d78:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <BSP_GYRO_GetXYZ+0x2c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <BSP_GYRO_GetXYZ+0x2c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d004      	beq.n	8003d94 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8003d8a:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <BSP_GYRO_GetXYZ+0x2c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
    }
  }
}
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000bb0 	.word	0x20000bb0

08003da0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <BSP_HSENSOR_Init+0x38>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	20be      	movs	r0, #190	; 0xbe
 8003dac:	4798      	blx	r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	2bbc      	cmp	r3, #188	; 0xbc
 8003db2:	d002      	beq.n	8003dba <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	607b      	str	r3, [r7, #4]
 8003db8:	e009      	b.n	8003dce <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8003dba:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <BSP_HSENSOR_Init+0x3c>)
 8003dbc:	4a06      	ldr	r2, [pc, #24]	; (8003dd8 <BSP_HSENSOR_Init+0x38>)
 8003dbe:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <BSP_HSENSOR_Init+0x3c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	20be      	movs	r0, #190	; 0xbe
 8003dc8:	4798      	blx	r3
    ret = HSENSOR_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003dce:	687b      	ldr	r3, [r7, #4]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000030 	.word	0x20000030
 8003ddc:	20000bb4 	.word	0x20000bb4

08003de0 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <BSP_HSENSOR_ReadHumidity+0x18>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	20be      	movs	r0, #190	; 0xbe
 8003dec:	4798      	blx	r3
 8003dee:	eef0 7a40 	vmov.f32	s15, s0
}
 8003df2:	eeb0 0a67 	vmov.f32	s0, s15
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000bb4 	.word	0x20000bb4

08003dfc <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8003e06:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <BSP_MAGNETO_Init+0x50>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4798      	blx	r3
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b3d      	cmp	r3, #61	; 0x3d
 8003e10:	d002      	beq.n	8003e18 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	71fb      	strb	r3, [r7, #7]
 8003e16:	e013      	b.n	8003e40 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8003e18:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <BSP_MAGNETO_Init+0x54>)
 8003e1a:	4a0c      	ldr	r2, [pc, #48]	; (8003e4c <BSP_MAGNETO_Init+0x50>)
 8003e1c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8003e1e:	2358      	movs	r3, #88	; 0x58
 8003e20:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8003e22:	2300      	movs	r3, #0
 8003e24:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8003e2a:	2308      	movs	r3, #8
 8003e2c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8003e2e:	2340      	movs	r3, #64	; 0x40
 8003e30:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8003e32:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <BSP_MAGNETO_Init+0x54>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	463a      	mov	r2, r7
 8003e3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e3e:	4798      	blx	r3
  } 

  return ret;  
 8003e40:	79fb      	ldrb	r3, [r7, #7]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	2000004c 	.word	0x2000004c
 8003e50:	20000bb8 	.word	0x20000bb8

08003e54 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8003e5c:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d009      	beq.n	8003e78 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8003e6e:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4798      	blx	r3
    }
  }
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20000bb8 	.word	0x20000bb8

08003e84 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <BSP_PSENSOR_Init+0x38>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	20ba      	movs	r0, #186	; 0xba
 8003e90:	4798      	blx	r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	2bb1      	cmp	r3, #177	; 0xb1
 8003e96:	d002      	beq.n	8003e9e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	e009      	b.n	8003eb2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <BSP_PSENSOR_Init+0x3c>)
 8003ea0:	4a06      	ldr	r2, [pc, #24]	; (8003ebc <BSP_PSENSOR_Init+0x38>)
 8003ea2:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <BSP_PSENSOR_Init+0x3c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	20ba      	movs	r0, #186	; 0xba
 8003eac:	4798      	blx	r3
    ret = PSENSOR_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003eb2:	687b      	ldr	r3, [r7, #4]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000080 	.word	0x20000080
 8003ec0:	20000bbc 	.word	0x20000bbc

08003ec4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <BSP_PSENSOR_ReadPressure+0x18>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	20ba      	movs	r0, #186	; 0xba
 8003ed0:	4798      	blx	r3
 8003ed2:	eef0 7a40 	vmov.f32	s15, s0
}
 8003ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000bbc 	.word	0x20000bbc

08003ee0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <BSP_TSENSOR_Init+0x30>)
 8003eec:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <BSP_TSENSOR_Init+0x34>)
 8003eee:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003ef0:	f7ff fe46 	bl	8003b80 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <BSP_TSENSOR_Init+0x30>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2100      	movs	r1, #0
 8003efc:	20be      	movs	r0, #190	; 0xbe
 8003efe:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003f04:	79fb      	ldrb	r3, [r7, #7]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000bc0 	.word	0x20000bc0
 8003f14:	2000003c 	.word	0x2000003c

08003f18 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003f1c:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <BSP_TSENSOR_ReadTemp+0x18>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	20be      	movs	r0, #190	; 0xbe
 8003f24:	4798      	blx	r3
 8003f26:	eef0 7a40 	vmov.f32	s15, s0
}
 8003f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000bc0 	.word	0x20000bc0

08003f34 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2120      	movs	r1, #32
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fe3f 	bl	8003bc8 <SENSOR_IO_Read>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	f023 0304 	bic.w	r3, r3, #4
 8003f54:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	f043 0304 	orr.w	r3, r3, #4
 8003f5c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	f023 0303 	bic.w	r3, r3, #3
 8003f64:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f74:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	2120      	movs	r1, #32
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fe08 	bl	8003b94 <SENSOR_IO_Write>
}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003f96:	2300      	movs	r3, #0
 8003f98:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8003f9a:	f7ff fdf1 	bl	8003b80 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	210f      	movs	r1, #15
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fe0f 	bl	8003bc8 <SENSOR_IO_Read>
 8003faa:	4603      	mov	r3, r0
 8003fac:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	b2d8      	uxtb	r0, r3
 8003fc6:	f107 020c 	add.w	r2, r7, #12
 8003fca:	2302      	movs	r3, #2
 8003fcc:	21b0      	movs	r1, #176	; 0xb0
 8003fce:	f7ff fe19 	bl	8003c04 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8003fd2:	7b3b      	ldrb	r3, [r7, #12]
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8003fda:	7b7b      	ldrb	r3, [r7, #13]
 8003fdc:	085b      	lsrs	r3, r3, #1
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	b2d8      	uxtb	r0, r3
 8003fe6:	f107 020c 	add.w	r2, r7, #12
 8003fea:	2302      	movs	r3, #2
 8003fec:	21b6      	movs	r1, #182	; 0xb6
 8003fee:	f7ff fe09 	bl	8003c04 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003ff2:	7b7b      	ldrb	r3, [r7, #13]
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	b21a      	sxth	r2, r3
 8003ff8:	7b3b      	ldrb	r3, [r7, #12]
 8003ffa:	b21b      	sxth	r3, r3
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	b2d8      	uxtb	r0, r3
 8004004:	f107 020c 	add.w	r2, r7, #12
 8004008:	2302      	movs	r3, #2
 800400a:	21ba      	movs	r1, #186	; 0xba
 800400c:	f7ff fdfa 	bl	8003c04 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004010:	7b7b      	ldrb	r3, [r7, #13]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	b21a      	sxth	r2, r3
 8004016:	7b3b      	ldrb	r3, [r7, #12]
 8004018:	b21b      	sxth	r3, r3
 800401a:	4313      	orrs	r3, r2
 800401c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	b2d8      	uxtb	r0, r3
 8004022:	f107 020c 	add.w	r2, r7, #12
 8004026:	2302      	movs	r3, #2
 8004028:	21a8      	movs	r1, #168	; 0xa8
 800402a:	f7ff fdeb 	bl	8003c04 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800402e:	7b7b      	ldrb	r3, [r7, #13]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21a      	sxth	r2, r3
 8004034:	7b3b      	ldrb	r3, [r7, #12]
 8004036:	b21b      	sxth	r3, r3
 8004038:	4313      	orrs	r3, r2
 800403a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800403c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004040:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800404e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004052:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004060:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004064:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004068:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800408a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800408e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004092:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800409a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800409e:	edd7 7a04 	vldr	s15, [r7, #16]
 80040a2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80040e8 <HTS221_H_ReadHumidity+0x130>
 80040a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ae:	dd01      	ble.n	80040b4 <HTS221_H_ReadHumidity+0xfc>
 80040b0:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <HTS221_H_ReadHumidity+0x134>)
 80040b2:	e00a      	b.n	80040ca <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80040b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80040b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c0:	d502      	bpl.n	80040c8 <HTS221_H_ReadHumidity+0x110>
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e000      	b.n	80040ca <HTS221_H_ReadHumidity+0x112>
 80040c8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80040ca:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80040cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80040d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80040d8:	eef0 7a66 	vmov.f32	s15, s13
}
 80040dc:	eeb0 0a67 	vmov.f32	s0, s15
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	447a0000 	.word	0x447a0000
 80040ec:	447a0000 	.word	0x447a0000

080040f0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	6039      	str	r1, [r7, #0]
 80040fa:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2120      	movs	r1, #32
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fd60 	bl	8003bc8 <SENSOR_IO_Read>
 8004108:	4603      	mov	r3, r0
 800410a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	f023 0304 	bic.w	r3, r3, #4
 8004112:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	f043 0304 	orr.w	r3, r3, #4
 800411a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004132:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	7bfa      	ldrb	r2, [r7, #15]
 800413a:	2120      	movs	r1, #32
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fd29 	bl	8003b94 <SENSOR_IO_Write>
}
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b088      	sub	sp, #32
 800414e:	af00      	add	r7, sp, #0
 8004150:	4603      	mov	r3, r0
 8004152:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	b2d8      	uxtb	r0, r3
 8004158:	f107 0208 	add.w	r2, r7, #8
 800415c:	2302      	movs	r3, #2
 800415e:	21b2      	movs	r1, #178	; 0xb2
 8004160:	f7ff fd50 	bl	8003c04 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2135      	movs	r1, #53	; 0x35
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fd2c 	bl	8003bc8 <SENSOR_IO_Read>
 8004170:	4603      	mov	r3, r0
 8004172:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8004174:	7ffb      	ldrb	r3, [r7, #31]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	b21b      	sxth	r3, r3
 800417a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417e:	b21a      	sxth	r2, r3
 8004180:	7a3b      	ldrb	r3, [r7, #8]
 8004182:	b21b      	sxth	r3, r3
 8004184:	4313      	orrs	r3, r2
 8004186:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8004188:	7ffb      	ldrb	r3, [r7, #31]
 800418a:	019b      	lsls	r3, r3, #6
 800418c:	b21b      	sxth	r3, r3
 800418e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004192:	b21a      	sxth	r2, r3
 8004194:	7a7b      	ldrb	r3, [r7, #9]
 8004196:	b21b      	sxth	r3, r3
 8004198:	4313      	orrs	r3, r2
 800419a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800419c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80041a0:	10db      	asrs	r3, r3, #3
 80041a2:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80041a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041a8:	10db      	asrs	r3, r3, #3
 80041aa:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	b2d8      	uxtb	r0, r3
 80041b0:	f107 0208 	add.w	r2, r7, #8
 80041b4:	2304      	movs	r3, #4
 80041b6:	21bc      	movs	r1, #188	; 0xbc
 80041b8:	f7ff fd24 	bl	8003c04 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80041bc:	7a7b      	ldrb	r3, [r7, #9]
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	b21a      	sxth	r2, r3
 80041c2:	7a3b      	ldrb	r3, [r7, #8]
 80041c4:	b21b      	sxth	r3, r3
 80041c6:	4313      	orrs	r3, r2
 80041c8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80041ca:	7afb      	ldrb	r3, [r7, #11]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	b21a      	sxth	r2, r3
 80041d0:	7abb      	ldrb	r3, [r7, #10]
 80041d2:	b21b      	sxth	r3, r3
 80041d4:	4313      	orrs	r3, r2
 80041d6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	b2d8      	uxtb	r0, r3
 80041dc:	f107 0208 	add.w	r2, r7, #8
 80041e0:	2302      	movs	r3, #2
 80041e2:	21aa      	movs	r1, #170	; 0xaa
 80041e4:	f7ff fd0e 	bl	8003c04 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80041e8:	7a7b      	ldrb	r3, [r7, #9]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	b21a      	sxth	r2, r3
 80041ee:	7a3b      	ldrb	r3, [r7, #8]
 80041f0:	b21b      	sxth	r3, r3
 80041f2:	4313      	orrs	r3, r2
 80041f4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80041f6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80041fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004208:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800420c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800421a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800421e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004222:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	ee07 3a90 	vmov	s15, r3
 800422c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004234:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004244:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	ee07 3a90 	vmov	s15, r3
}
 800424e:	eeb0 0a67 	vmov.f32	s0, s15
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	463b      	mov	r3, r7
 8004260:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8004264:	783b      	ldrb	r3, [r7, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	2120      	movs	r1, #32
 800426a:	203c      	movs	r0, #60	; 0x3c
 800426c:	f7ff fc92 	bl	8003b94 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8004270:	787b      	ldrb	r3, [r7, #1]
 8004272:	461a      	mov	r2, r3
 8004274:	2121      	movs	r1, #33	; 0x21
 8004276:	203c      	movs	r0, #60	; 0x3c
 8004278:	f7ff fc8c 	bl	8003b94 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 800427c:	78bb      	ldrb	r3, [r7, #2]
 800427e:	461a      	mov	r2, r3
 8004280:	2122      	movs	r1, #34	; 0x22
 8004282:	203c      	movs	r0, #60	; 0x3c
 8004284:	f7ff fc86 	bl	8003b94 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	461a      	mov	r2, r3
 800428c:	2123      	movs	r1, #35	; 0x23
 800428e:	203c      	movs	r0, #60	; 0x3c
 8004290:	f7ff fc80 	bl	8003b94 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8004294:	793b      	ldrb	r3, [r7, #4]
 8004296:	461a      	mov	r2, r3
 8004298:	2124      	movs	r1, #36	; 0x24
 800429a:	203c      	movs	r0, #60	; 0x3c
 800429c:	f7ff fc7a 	bl	8003b94 <SENSOR_IO_Write>
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80042ae:	2300      	movs	r3, #0
 80042b0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80042b2:	2122      	movs	r1, #34	; 0x22
 80042b4:	203c      	movs	r0, #60	; 0x3c
 80042b6:	f7ff fc87 	bl	8003bc8 <SENSOR_IO_Read>
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	f023 0303 	bic.w	r3, r3, #3
 80042c4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	f043 0303 	orr.w	r3, r3, #3
 80042cc:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	461a      	mov	r2, r3
 80042d2:	2122      	movs	r1, #34	; 0x22
 80042d4:	203c      	movs	r0, #60	; 0x3c
 80042d6:	f7ff fc5d 	bl	8003b94 <SENSOR_IO_Write>
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80042e6:	f7ff fc4b 	bl	8003b80 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80042ea:	210f      	movs	r1, #15
 80042ec:	203c      	movs	r0, #60	; 0x3c
 80042ee:	f7ff fc6b 	bl	8003bc8 <SENSOR_IO_Read>
 80042f2:	4603      	mov	r3, r0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8004306:	2122      	movs	r1, #34	; 0x22
 8004308:	203c      	movs	r0, #60	; 0x3c
 800430a:	f7ff fc5d 	bl	8003bc8 <SENSOR_IO_Read>
 800430e:	4603      	mov	r3, r0
 8004310:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	f023 0320 	bic.w	r3, r3, #32
 8004318:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	f043 0320 	orr.w	r3, r3, #32
 8004326:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	461a      	mov	r2, r3
 800432c:	2122      	movs	r1, #34	; 0x22
 800432e:	203c      	movs	r0, #60	; 0x3c
 8004330:	f7ff fc30 	bl	8003b94 <SENSOR_IO_Write>
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8004344:	2300      	movs	r3, #0
 8004346:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8004352:	2121      	movs	r1, #33	; 0x21
 8004354:	203c      	movs	r0, #60	; 0x3c
 8004356:	f7ff fc37 	bl	8003bc8 <SENSOR_IO_Read>
 800435a:	4603      	mov	r3, r0
 800435c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800435e:	f107 0208 	add.w	r2, r7, #8
 8004362:	2306      	movs	r3, #6
 8004364:	21a8      	movs	r1, #168	; 0xa8
 8004366:	203c      	movs	r0, #60	; 0x3c
 8004368:	f7ff fc4c 	bl	8003c04 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800436c:	2300      	movs	r3, #0
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e01c      	b.n	80043ac <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004372:	7ffb      	ldrb	r3, [r7, #31]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	3301      	adds	r3, #1
 8004378:	3320      	adds	r3, #32
 800437a:	443b      	add	r3, r7
 800437c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004380:	b29b      	uxth	r3, r3
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	b29a      	uxth	r2, r3
 8004386:	7ffb      	ldrb	r3, [r7, #31]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	3320      	adds	r3, #32
 800438c:	443b      	add	r3, r7
 800438e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004392:	b29b      	uxth	r3, r3
 8004394:	4413      	add	r3, r2
 8004396:	b29a      	uxth	r2, r3
 8004398:	7ffb      	ldrb	r3, [r7, #31]
 800439a:	b212      	sxth	r2, r2
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	3320      	adds	r3, #32
 80043a0:	443b      	add	r3, r7
 80043a2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80043a6:	7ffb      	ldrb	r3, [r7, #31]
 80043a8:	3301      	adds	r3, #1
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	7ffb      	ldrb	r3, [r7, #31]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d9df      	bls.n	8004372 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80043b8:	2b60      	cmp	r3, #96	; 0x60
 80043ba:	d013      	beq.n	80043e4 <LIS3MDL_MagReadXYZ+0xa8>
 80043bc:	2b60      	cmp	r3, #96	; 0x60
 80043be:	dc14      	bgt.n	80043ea <LIS3MDL_MagReadXYZ+0xae>
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d00c      	beq.n	80043de <LIS3MDL_MagReadXYZ+0xa2>
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	dc10      	bgt.n	80043ea <LIS3MDL_MagReadXYZ+0xae>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <LIS3MDL_MagReadXYZ+0x96>
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d003      	beq.n	80043d8 <LIS3MDL_MagReadXYZ+0x9c>
 80043d0:	e00b      	b.n	80043ea <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80043d2:	4b19      	ldr	r3, [pc, #100]	; (8004438 <LIS3MDL_MagReadXYZ+0xfc>)
 80043d4:	61bb      	str	r3, [r7, #24]
    break;
 80043d6:	e008      	b.n	80043ea <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80043d8:	4b18      	ldr	r3, [pc, #96]	; (800443c <LIS3MDL_MagReadXYZ+0x100>)
 80043da:	61bb      	str	r3, [r7, #24]
    break;
 80043dc:	e005      	b.n	80043ea <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80043de:	4b18      	ldr	r3, [pc, #96]	; (8004440 <LIS3MDL_MagReadXYZ+0x104>)
 80043e0:	61bb      	str	r3, [r7, #24]
    break;
 80043e2:	e002      	b.n	80043ea <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80043e4:	4b17      	ldr	r3, [pc, #92]	; (8004444 <LIS3MDL_MagReadXYZ+0x108>)
 80043e6:	61bb      	str	r3, [r7, #24]
    break;    
 80043e8:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e01a      	b.n	8004426 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80043f0:	7ffb      	ldrb	r3, [r7, #31]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	3320      	adds	r3, #32
 80043f6:	443b      	add	r3, r7
 80043f8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80043fc:	ee07 3a90 	vmov	s15, r3
 8004400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004404:	edd7 7a06 	vldr	s15, [r7, #24]
 8004408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440c:	7ffb      	ldrb	r3, [r7, #31]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	4413      	add	r3, r2
 8004414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004418:	ee17 2a90 	vmov	r2, s15
 800441c:	b212      	sxth	r2, r2
 800441e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004420:	7ffb      	ldrb	r3, [r7, #31]
 8004422:	3301      	adds	r3, #1
 8004424:	77fb      	strb	r3, [r7, #31]
 8004426:	7ffb      	ldrb	r3, [r7, #31]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d9e1      	bls.n	80043f0 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	3e0f5c29 	.word	0x3e0f5c29
 800443c:	3e947ae1 	.word	0x3e947ae1
 8004440:	3edc28f6 	.word	0x3edc28f6
 8004444:	3f147ae1 	.word	0x3f147ae1

08004448 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 f879 	bl	800454c <LPS22HB_Init>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	4603      	mov	r3, r0
 800446a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800446c:	2300      	movs	r3, #0
 800446e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004470:	f7ff fb86 	bl	8003b80 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	210f      	movs	r1, #15
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff fba4 	bl	8003bc8 <SENSOR_IO_Read>
 8004480:	4603      	mov	r3, r0
 8004482:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800449e:	2300      	movs	r3, #0
 80044a0:	74fb      	strb	r3, [r7, #19]
 80044a2:	e013      	b.n	80044cc <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	7cfb      	ldrb	r3, [r7, #19]
 80044aa:	3328      	adds	r3, #40	; 0x28
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	7cfc      	ldrb	r4, [r7, #19]
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f7ff fb88 	bl	8003bc8 <SENSOR_IO_Read>
 80044b8:	4603      	mov	r3, r0
 80044ba:	461a      	mov	r2, r3
 80044bc:	f104 0318 	add.w	r3, r4, #24
 80044c0:	443b      	add	r3, r7
 80044c2:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80044c6:	7cfb      	ldrb	r3, [r7, #19]
 80044c8:	3301      	adds	r3, #1
 80044ca:	74fb      	strb	r3, [r7, #19]
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d9e8      	bls.n	80044a4 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80044d2:	2300      	movs	r3, #0
 80044d4:	74fb      	strb	r3, [r7, #19]
 80044d6:	e00f      	b.n	80044f8 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80044d8:	7cfb      	ldrb	r3, [r7, #19]
 80044da:	3318      	adds	r3, #24
 80044dc:	443b      	add	r3, r7
 80044de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80044e2:	461a      	mov	r2, r3
 80044e4:	7cfb      	ldrb	r3, [r7, #19]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80044f2:	7cfb      	ldrb	r3, [r7, #19]
 80044f4:	3301      	adds	r3, #1
 80044f6:	74fb      	strb	r3, [r7, #19]
 80044f8:	7cfb      	ldrb	r3, [r7, #19]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d9ec      	bls.n	80044d8 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450e:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2264      	movs	r2, #100	; 0x64
 8004518:	fb02 f303 	mul.w	r3, r2, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	da01      	bge.n	8004524 <LPS22HB_P_ReadPressure+0x94>
 8004520:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004524:	131b      	asrs	r3, r3, #12
 8004526:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004532:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004548 <LPS22HB_P_ReadPressure+0xb8>
 8004536:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800453a:	eef0 7a66 	vmov.f32	s15, s13
}
 800453e:	eeb0 0a67 	vmov.f32	s0, s15
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	bd90      	pop	{r4, r7, pc}
 8004548:	42c80000 	.word	0x42c80000

0800454c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	211a      	movs	r1, #26
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fb33 	bl	8003bc8 <SENSOR_IO_Read>
 8004562:	4603      	mov	r3, r0
 8004564:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	7bfa      	ldrb	r2, [r7, #15]
 800457c:	211a      	movs	r1, #26
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fb08 	bl	8003b94 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8004584:	88fb      	ldrh	r3, [r7, #6]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2110      	movs	r1, #16
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fb1c 	bl	8003bc8 <SENSOR_IO_Read>
 8004590:	4603      	mov	r3, r0
 8004592:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80045a2:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	f023 0302 	bic.w	r3, r3, #2
 80045aa:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	f043 0302 	orr.w	r3, r3, #2
 80045b2:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	7bfa      	ldrb	r2, [r7, #15]
 80045ba:	2110      	movs	r1, #16
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fae9 	bl	8003b94 <SENSOR_IO_Write>
}  
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	4603      	mov	r3, r0
 80045d2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80045d8:	2110      	movs	r1, #16
 80045da:	20d4      	movs	r0, #212	; 0xd4
 80045dc:	f7ff faf4 	bl	8003bc8 <SENSOR_IO_Read>
 80045e0:	4603      	mov	r3, r0
 80045e2:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80045e8:	7bbb      	ldrb	r3, [r7, #14]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80045f0:	7bba      	ldrb	r2, [r7, #14]
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80045f8:	7bbb      	ldrb	r3, [r7, #14]
 80045fa:	461a      	mov	r2, r3
 80045fc:	2110      	movs	r1, #16
 80045fe:	20d4      	movs	r0, #212	; 0xd4
 8004600:	f7ff fac8 	bl	8003b94 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004604:	2112      	movs	r1, #18
 8004606:	20d4      	movs	r0, #212	; 0xd4
 8004608:	f7ff fade 	bl	8003bc8 <SENSOR_IO_Read>
 800460c:	4603      	mov	r3, r0
 800460e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	0a1b      	lsrs	r3, r3, #8
 8004614:	b29b      	uxth	r3, r3
 8004616:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8004618:	7bbb      	ldrb	r3, [r7, #14]
 800461a:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800461e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8004620:	7bba      	ldrb	r2, [r7, #14]
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	4313      	orrs	r3, r2
 8004626:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004628:	7bbb      	ldrb	r3, [r7, #14]
 800462a:	461a      	mov	r2, r3
 800462c:	2112      	movs	r1, #18
 800462e:	20d4      	movs	r0, #212	; 0xd4
 8004630:	f7ff fab0 	bl	8003b94 <SENSOR_IO_Write>
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004642:	2300      	movs	r3, #0
 8004644:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004646:	2110      	movs	r1, #16
 8004648:	20d4      	movs	r0, #212	; 0xd4
 800464a:	f7ff fabd 	bl	8003bc8 <SENSOR_IO_Read>
 800464e:	4603      	mov	r3, r0
 8004650:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	461a      	mov	r2, r3
 800465e:	2110      	movs	r1, #16
 8004660:	20d4      	movs	r0, #212	; 0xd4
 8004662:	f7ff fa97 	bl	8003b94 <SENSOR_IO_Write>
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800466e:	b580      	push	{r7, lr}
 8004670:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8004672:	f7ff fa85 	bl	8003b80 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8004676:	210f      	movs	r1, #15
 8004678:	20d4      	movs	r0, #212	; 0xd4
 800467a:	f7ff faa5 	bl	8003bc8 <SENSOR_IO_Read>
 800467e:	4603      	mov	r3, r0
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}

08004684 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8004692:	2115      	movs	r1, #21
 8004694:	20d4      	movs	r0, #212	; 0xd4
 8004696:	f7ff fa97 	bl	8003bc8 <SENSOR_IO_Read>
 800469a:	4603      	mov	r3, r0
 800469c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	f023 0310 	bic.w	r3, r3, #16
 80046a4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	f043 0310 	orr.w	r3, r3, #16
 80046b2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	461a      	mov	r2, r3
 80046b8:	2115      	movs	r1, #21
 80046ba:	20d4      	movs	r0, #212	; 0xd4
 80046bc:	f7ff fa6a 	bl	8003b94 <SENSOR_IO_Write>
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80046de:	2110      	movs	r1, #16
 80046e0:	20d4      	movs	r0, #212	; 0xd4
 80046e2:	f7ff fa71 	bl	8003bc8 <SENSOR_IO_Read>
 80046e6:	4603      	mov	r3, r0
 80046e8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80046ea:	f107 0208 	add.w	r2, r7, #8
 80046ee:	2306      	movs	r3, #6
 80046f0:	2128      	movs	r1, #40	; 0x28
 80046f2:	20d4      	movs	r0, #212	; 0xd4
 80046f4:	f7ff fa86 	bl	8003c04 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e01c      	b.n	8004738 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80046fe:	7ffb      	ldrb	r3, [r7, #31]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	3301      	adds	r3, #1
 8004704:	3320      	adds	r3, #32
 8004706:	443b      	add	r3, r7
 8004708:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800470c:	b29b      	uxth	r3, r3
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	b29a      	uxth	r2, r3
 8004712:	7ffb      	ldrb	r3, [r7, #31]
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	3320      	adds	r3, #32
 8004718:	443b      	add	r3, r7
 800471a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800471e:	b29b      	uxth	r3, r3
 8004720:	4413      	add	r3, r2
 8004722:	b29a      	uxth	r2, r3
 8004724:	7ffb      	ldrb	r3, [r7, #31]
 8004726:	b212      	sxth	r2, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	3320      	adds	r3, #32
 800472c:	443b      	add	r3, r7
 800472e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8004732:	7ffb      	ldrb	r3, [r7, #31]
 8004734:	3301      	adds	r3, #1
 8004736:	77fb      	strb	r3, [r7, #31]
 8004738:	7ffb      	ldrb	r3, [r7, #31]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d9df      	bls.n	80046fe <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800473e:	7dfb      	ldrb	r3, [r7, #23]
 8004740:	f003 030c 	and.w	r3, r3, #12
 8004744:	2b0c      	cmp	r3, #12
 8004746:	d829      	bhi.n	800479c <LSM6DSL_AccReadXYZ+0xd4>
 8004748:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <LSM6DSL_AccReadXYZ+0x88>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	08004785 	.word	0x08004785
 8004754:	0800479d 	.word	0x0800479d
 8004758:	0800479d 	.word	0x0800479d
 800475c:	0800479d 	.word	0x0800479d
 8004760:	08004797 	.word	0x08004797
 8004764:	0800479d 	.word	0x0800479d
 8004768:	0800479d 	.word	0x0800479d
 800476c:	0800479d 	.word	0x0800479d
 8004770:	0800478b 	.word	0x0800478b
 8004774:	0800479d 	.word	0x0800479d
 8004778:	0800479d 	.word	0x0800479d
 800477c:	0800479d 	.word	0x0800479d
 8004780:	08004791 	.word	0x08004791
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8004784:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <LSM6DSL_AccReadXYZ+0x120>)
 8004786:	61bb      	str	r3, [r7, #24]
    break;
 8004788:	e008      	b.n	800479c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <LSM6DSL_AccReadXYZ+0x124>)
 800478c:	61bb      	str	r3, [r7, #24]
    break;
 800478e:	e005      	b.n	800479c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8004790:	4b17      	ldr	r3, [pc, #92]	; (80047f0 <LSM6DSL_AccReadXYZ+0x128>)
 8004792:	61bb      	str	r3, [r7, #24]
    break;
 8004794:	e002      	b.n	800479c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8004796:	4b17      	ldr	r3, [pc, #92]	; (80047f4 <LSM6DSL_AccReadXYZ+0x12c>)
 8004798:	61bb      	str	r3, [r7, #24]
    break;    
 800479a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800479c:	2300      	movs	r3, #0
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e01a      	b.n	80047d8 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80047a2:	7ffb      	ldrb	r3, [r7, #31]
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	3320      	adds	r3, #32
 80047a8:	443b      	add	r3, r7
 80047aa:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80047ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047be:	7ffb      	ldrb	r3, [r7, #31]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	4413      	add	r3, r2
 80047c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047ca:	ee17 2a90 	vmov	r2, s15
 80047ce:	b212      	sxth	r2, r2
 80047d0:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80047d2:	7ffb      	ldrb	r3, [r7, #31]
 80047d4:	3301      	adds	r3, #1
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	7ffb      	ldrb	r3, [r7, #31]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d9e1      	bls.n	80047a2 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80047de:	bf00      	nop
 80047e0:	bf00      	nop
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	3d79db23 	.word	0x3d79db23
 80047ec:	3df9db23 	.word	0x3df9db23
 80047f0:	3e79db23 	.word	0x3e79db23
 80047f4:	3ef9db23 	.word	0x3ef9db23

080047f8 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004802:	2300      	movs	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004806:	2111      	movs	r1, #17
 8004808:	20d4      	movs	r0, #212	; 0xd4
 800480a:	f7ff f9dd 	bl	8003bc8 <SENSOR_IO_Read>
 800480e:	4603      	mov	r3, r0
 8004810:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8004812:	88fb      	ldrh	r3, [r7, #6]
 8004814:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8004816:	7bbb      	ldrb	r3, [r7, #14]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800481e:	7bba      	ldrb	r2, [r7, #14]
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	4313      	orrs	r3, r2
 8004824:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8004826:	7bbb      	ldrb	r3, [r7, #14]
 8004828:	461a      	mov	r2, r3
 800482a:	2111      	movs	r1, #17
 800482c:	20d4      	movs	r0, #212	; 0xd4
 800482e:	f7ff f9b1 	bl	8003b94 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004832:	2112      	movs	r1, #18
 8004834:	20d4      	movs	r0, #212	; 0xd4
 8004836:	f7ff f9c7 	bl	8003bc8 <SENSOR_IO_Read>
 800483a:	4603      	mov	r3, r0
 800483c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	0a1b      	lsrs	r3, r3, #8
 8004842:	b29b      	uxth	r3, r3
 8004844:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8004846:	7bbb      	ldrb	r3, [r7, #14]
 8004848:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800484c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800484e:	7bba      	ldrb	r2, [r7, #14]
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	4313      	orrs	r3, r2
 8004854:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004856:	7bbb      	ldrb	r3, [r7, #14]
 8004858:	461a      	mov	r2, r3
 800485a:	2112      	movs	r1, #18
 800485c:	20d4      	movs	r0, #212	; 0xd4
 800485e:	f7ff f999 	bl	8003b94 <SENSOR_IO_Write>
}
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004870:	2300      	movs	r3, #0
 8004872:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004874:	2111      	movs	r1, #17
 8004876:	20d4      	movs	r0, #212	; 0xd4
 8004878:	f7ff f9a6 	bl	8003bc8 <SENSOR_IO_Read>
 800487c:	4603      	mov	r3, r0
 800487e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	461a      	mov	r2, r3
 800488c:	2111      	movs	r1, #17
 800488e:	20d4      	movs	r0, #212	; 0xd4
 8004890:	f7ff f980 	bl	8003b94 <SENSOR_IO_Write>
}
 8004894:	bf00      	nop
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80048a0:	f7ff f96e 	bl	8003b80 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80048a4:	210f      	movs	r1, #15
 80048a6:	20d4      	movs	r0, #212	; 0xd4
 80048a8:	f7ff f98e 	bl	8003bc8 <SENSOR_IO_Read>
 80048ac:	4603      	mov	r3, r0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	4603      	mov	r3, r0
 80048ba:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80048bc:	2300      	movs	r3, #0
 80048be:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80048c0:	2116      	movs	r1, #22
 80048c2:	20d4      	movs	r0, #212	; 0xd4
 80048c4:	f7ff f980 	bl	8003bc8 <SENSOR_IO_Read>
 80048c8:	4603      	mov	r3, r0
 80048ca:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048e0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	461a      	mov	r2, r3
 80048e6:	2116      	movs	r1, #22
 80048e8:	20d4      	movs	r0, #212	; 0xd4
 80048ea:	f7ff f953 	bl	8003b94 <SENSOR_IO_Write>
}
 80048ee:	bf00      	nop
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8004900:	2300      	movs	r3, #0
 8004902:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800490e:	2111      	movs	r1, #17
 8004910:	20d4      	movs	r0, #212	; 0xd4
 8004912:	f7ff f959 	bl	8003bc8 <SENSOR_IO_Read>
 8004916:	4603      	mov	r3, r0
 8004918:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800491a:	f107 0208 	add.w	r2, r7, #8
 800491e:	2306      	movs	r3, #6
 8004920:	2122      	movs	r1, #34	; 0x22
 8004922:	20d4      	movs	r0, #212	; 0xd4
 8004924:	f7ff f96e 	bl	8003c04 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004928:	2300      	movs	r3, #0
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e01c      	b.n	8004968 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800492e:	7ffb      	ldrb	r3, [r7, #31]
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	3301      	adds	r3, #1
 8004934:	3320      	adds	r3, #32
 8004936:	443b      	add	r3, r7
 8004938:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800493c:	b29b      	uxth	r3, r3
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	b29a      	uxth	r2, r3
 8004942:	7ffb      	ldrb	r3, [r7, #31]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	3320      	adds	r3, #32
 8004948:	443b      	add	r3, r7
 800494a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800494e:	b29b      	uxth	r3, r3
 8004950:	4413      	add	r3, r2
 8004952:	b29a      	uxth	r2, r3
 8004954:	7ffb      	ldrb	r3, [r7, #31]
 8004956:	b212      	sxth	r2, r2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	3320      	adds	r3, #32
 800495c:	443b      	add	r3, r7
 800495e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8004962:	7ffb      	ldrb	r3, [r7, #31]
 8004964:	3301      	adds	r3, #1
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	7ffb      	ldrb	r3, [r7, #31]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d9df      	bls.n	800492e <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800496e:	7dfb      	ldrb	r3, [r7, #23]
 8004970:	f003 030c 	and.w	r3, r3, #12
 8004974:	2b0c      	cmp	r3, #12
 8004976:	d829      	bhi.n	80049cc <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8004978:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	080049b5 	.word	0x080049b5
 8004984:	080049cd 	.word	0x080049cd
 8004988:	080049cd 	.word	0x080049cd
 800498c:	080049cd 	.word	0x080049cd
 8004990:	080049bb 	.word	0x080049bb
 8004994:	080049cd 	.word	0x080049cd
 8004998:	080049cd 	.word	0x080049cd
 800499c:	080049cd 	.word	0x080049cd
 80049a0:	080049c1 	.word	0x080049c1
 80049a4:	080049cd 	.word	0x080049cd
 80049a8:	080049cd 	.word	0x080049cd
 80049ac:	080049cd 	.word	0x080049cd
 80049b0:	080049c7 	.word	0x080049c7
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80049b4:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80049b6:	61bb      	str	r3, [r7, #24]
    break;
 80049b8:	e008      	b.n	80049cc <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80049ba:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80049bc:	61bb      	str	r3, [r7, #24]
    break;
 80049be:	e005      	b.n	80049cc <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80049c0:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80049c2:	61bb      	str	r3, [r7, #24]
    break;
 80049c4:	e002      	b.n	80049cc <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80049c8:	61bb      	str	r3, [r7, #24]
    break;    
 80049ca:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80049cc:	2300      	movs	r3, #0
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e016      	b.n	8004a00 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80049d2:	7ffb      	ldrb	r3, [r7, #31]
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	3320      	adds	r3, #32
 80049d8:	443b      	add	r3, r7
 80049da:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e6:	7ffb      	ldrb	r3, [r7, #31]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80049f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f6:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80049fa:	7ffb      	ldrb	r3, [r7, #31]
 80049fc:	3301      	adds	r3, #1
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	7ffb      	ldrb	r3, [r7, #31]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d9e5      	bls.n	80049d2 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	3720      	adds	r7, #32
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	410c0000 	.word	0x410c0000
 8004a14:	418c0000 	.word	0x418c0000
 8004a18:	420c0000 	.word	0x420c0000
 8004a1c:	428c0000 	.word	0x428c0000

08004a20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a2a:	2003      	movs	r0, #3
 8004a2c:	f000 f95a 	bl	8004ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a30:	2000      	movs	r0, #0
 8004a32:	f000 f80d 	bl	8004a50 <HAL_InitTick>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	71fb      	strb	r3, [r7, #7]
 8004a40:	e001      	b.n	8004a46 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a42:	f7fe fc5f 	bl	8003304 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a46:	79fb      	ldrb	r3, [r7, #7]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004a5c:	4b16      	ldr	r3, [pc, #88]	; (8004ab8 <HAL_InitTick+0x68>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d022      	beq.n	8004aaa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <HAL_InitTick+0x6c>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <HAL_InitTick+0x68>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 f968 	bl	8004d4e <HAL_SYSTICK_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10f      	bne.n	8004aa4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	d809      	bhi.n	8004a9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a92:	f000 f932 	bl	8004cfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a96:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <HAL_InitTick+0x70>)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	e007      	b.n	8004aae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	73fb      	strb	r3, [r7, #15]
 8004aa2:	e004      	b.n	8004aae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
 8004aa8:	e001      	b.n	8004aae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	200000f8 	.word	0x200000f8
 8004abc:	20000028 	.word	0x20000028
 8004ac0:	200000f4 	.word	0x200000f4

08004ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <HAL_IncTick+0x1c>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HAL_IncTick+0x20>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	4a03      	ldr	r2, [pc, #12]	; (8004ae0 <HAL_IncTick+0x1c>)
 8004ad4:	6013      	str	r3, [r2, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	20000bc4 	.word	0x20000bc4
 8004ae4:	200000f8 	.word	0x200000f8

08004ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return uwTick;
 8004aec:	4b03      	ldr	r3, [pc, #12]	; (8004afc <HAL_GetTick+0x14>)
 8004aee:	681b      	ldr	r3, [r3, #0]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000bc4 	.word	0x20000bc4

08004b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b08:	f7ff ffee 	bl	8004ae8 <HAL_GetTick>
 8004b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d004      	beq.n	8004b24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b1a:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <HAL_Delay+0x40>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b24:	bf00      	nop
 8004b26:	f7ff ffdf 	bl	8004ae8 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d8f7      	bhi.n	8004b26 <HAL_Delay+0x26>
  {
  }
}
 8004b36:	bf00      	nop
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	200000f8 	.word	0x200000f8

08004b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b54:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <__NVIC_SetPriorityGrouping+0x44>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b60:	4013      	ands	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b76:	4a04      	ldr	r2, [pc, #16]	; (8004b88 <__NVIC_SetPriorityGrouping+0x44>)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	60d3      	str	r3, [r2, #12]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b90:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	0a1b      	lsrs	r3, r3, #8
 8004b96:	f003 0307 	and.w	r3, r3, #7
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	db0b      	blt.n	8004bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	f003 021f 	and.w	r2, r3, #31
 8004bc0:	4907      	ldr	r1, [pc, #28]	; (8004be0 <__NVIC_EnableIRQ+0x38>)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	2001      	movs	r0, #1
 8004bca:	fa00 f202 	lsl.w	r2, r0, r2
 8004bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	e000e100 	.word	0xe000e100

08004be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	6039      	str	r1, [r7, #0]
 8004bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	db0a      	blt.n	8004c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	490c      	ldr	r1, [pc, #48]	; (8004c30 <__NVIC_SetPriority+0x4c>)
 8004bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c02:	0112      	lsls	r2, r2, #4
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	440b      	add	r3, r1
 8004c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c0c:	e00a      	b.n	8004c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	4908      	ldr	r1, [pc, #32]	; (8004c34 <__NVIC_SetPriority+0x50>)
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	3b04      	subs	r3, #4
 8004c1c:	0112      	lsls	r2, r2, #4
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	440b      	add	r3, r1
 8004c22:	761a      	strb	r2, [r3, #24]
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	e000e100 	.word	0xe000e100
 8004c34:	e000ed00 	.word	0xe000ed00

08004c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	; 0x24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f1c3 0307 	rsb	r3, r3, #7
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	bf28      	it	cs
 8004c56:	2304      	movcs	r3, #4
 8004c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	2b06      	cmp	r3, #6
 8004c60:	d902      	bls.n	8004c68 <NVIC_EncodePriority+0x30>
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3b03      	subs	r3, #3
 8004c66:	e000      	b.n	8004c6a <NVIC_EncodePriority+0x32>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43da      	mvns	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c80:	f04f 31ff 	mov.w	r1, #4294967295
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8a:	43d9      	mvns	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c90:	4313      	orrs	r3, r2
         );
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3724      	adds	r7, #36	; 0x24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cb0:	d301      	bcc.n	8004cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e00f      	b.n	8004cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	; (8004ce0 <SysTick_Config+0x40>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cbe:	210f      	movs	r1, #15
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	f7ff ff8e 	bl	8004be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <SysTick_Config+0x40>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cce:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <SysTick_Config+0x40>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	e000e010 	.word	0xe000e010

08004ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff ff29 	bl	8004b44 <__NVIC_SetPriorityGrouping>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b086      	sub	sp, #24
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	4603      	mov	r3, r0
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d0c:	f7ff ff3e 	bl	8004b8c <__NVIC_GetPriorityGrouping>
 8004d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	6978      	ldr	r0, [r7, #20]
 8004d18:	f7ff ff8e 	bl	8004c38 <NVIC_EncodePriority>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d22:	4611      	mov	r1, r2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff ff5d 	bl	8004be4 <__NVIC_SetPriority>
}
 8004d2a:	bf00      	nop
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff31 	bl	8004ba8 <__NVIC_EnableIRQ>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff ffa2 	bl	8004ca0 <SysTick_Config>
 8004d5c:	4603      	mov	r3, r0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d005      	beq.n	8004d8a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2204      	movs	r2, #4
 8004d82:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
 8004d88:	e029      	b.n	8004dde <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 020e 	bic.w	r2, r2, #14
 8004d98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0201 	bic.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f003 021c 	and.w	r2, r3, #28
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	2101      	movs	r1, #1
 8004db8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dbc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
    }
  }
  return status;
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004df6:	e17f      	b.n	80050f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	fa01 f303 	lsl.w	r3, r1, r3
 8004e04:	4013      	ands	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 8171 	beq.w	80050f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d00b      	beq.n	8004e30 <HAL_GPIO_Init+0x48>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d007      	beq.n	8004e30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e24:	2b11      	cmp	r3, #17
 8004e26:	d003      	beq.n	8004e30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b12      	cmp	r3, #18
 8004e2e:	d130      	bne.n	8004e92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	43db      	mvns	r3, r3
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4013      	ands	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e66:	2201      	movs	r2, #1
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4013      	ands	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	f003 0201 	and.w	r2, r3, #1
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d118      	bne.n	8004ed0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	43db      	mvns	r3, r3
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	08db      	lsrs	r3, r3, #3
 8004eba:	f003 0201 	and.w	r2, r3, #1
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	2203      	movs	r2, #3
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d003      	beq.n	8004f10 <HAL_GPIO_Init+0x128>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b12      	cmp	r3, #18
 8004f0e:	d123      	bne.n	8004f58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	08da      	lsrs	r2, r3, #3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3208      	adds	r2, #8
 8004f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	220f      	movs	r2, #15
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4013      	ands	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	08da      	lsrs	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3208      	adds	r2, #8
 8004f52:	6939      	ldr	r1, [r7, #16]
 8004f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	2203      	movs	r2, #3
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 0203 	and.w	r2, r3, #3
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80ac 	beq.w	80050f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f9a:	4b5f      	ldr	r3, [pc, #380]	; (8005118 <HAL_GPIO_Init+0x330>)
 8004f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9e:	4a5e      	ldr	r2, [pc, #376]	; (8005118 <HAL_GPIO_Init+0x330>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8004fa6:	4b5c      	ldr	r3, [pc, #368]	; (8005118 <HAL_GPIO_Init+0x330>)
 8004fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fb2:	4a5a      	ldr	r2, [pc, #360]	; (800511c <HAL_GPIO_Init+0x334>)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	089b      	lsrs	r3, r3, #2
 8004fb8:	3302      	adds	r3, #2
 8004fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	220f      	movs	r2, #15
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004fdc:	d025      	beq.n	800502a <HAL_GPIO_Init+0x242>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a4f      	ldr	r2, [pc, #316]	; (8005120 <HAL_GPIO_Init+0x338>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01f      	beq.n	8005026 <HAL_GPIO_Init+0x23e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a4e      	ldr	r2, [pc, #312]	; (8005124 <HAL_GPIO_Init+0x33c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d019      	beq.n	8005022 <HAL_GPIO_Init+0x23a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a4d      	ldr	r2, [pc, #308]	; (8005128 <HAL_GPIO_Init+0x340>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <HAL_GPIO_Init+0x236>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a4c      	ldr	r2, [pc, #304]	; (800512c <HAL_GPIO_Init+0x344>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00d      	beq.n	800501a <HAL_GPIO_Init+0x232>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a4b      	ldr	r2, [pc, #300]	; (8005130 <HAL_GPIO_Init+0x348>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d007      	beq.n	8005016 <HAL_GPIO_Init+0x22e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a4a      	ldr	r2, [pc, #296]	; (8005134 <HAL_GPIO_Init+0x34c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d101      	bne.n	8005012 <HAL_GPIO_Init+0x22a>
 800500e:	2306      	movs	r3, #6
 8005010:	e00c      	b.n	800502c <HAL_GPIO_Init+0x244>
 8005012:	2307      	movs	r3, #7
 8005014:	e00a      	b.n	800502c <HAL_GPIO_Init+0x244>
 8005016:	2305      	movs	r3, #5
 8005018:	e008      	b.n	800502c <HAL_GPIO_Init+0x244>
 800501a:	2304      	movs	r3, #4
 800501c:	e006      	b.n	800502c <HAL_GPIO_Init+0x244>
 800501e:	2303      	movs	r3, #3
 8005020:	e004      	b.n	800502c <HAL_GPIO_Init+0x244>
 8005022:	2302      	movs	r3, #2
 8005024:	e002      	b.n	800502c <HAL_GPIO_Init+0x244>
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <HAL_GPIO_Init+0x244>
 800502a:	2300      	movs	r3, #0
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	f002 0203 	and.w	r2, r2, #3
 8005032:	0092      	lsls	r2, r2, #2
 8005034:	4093      	lsls	r3, r2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800503c:	4937      	ldr	r1, [pc, #220]	; (800511c <HAL_GPIO_Init+0x334>)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	089b      	lsrs	r3, r3, #2
 8005042:	3302      	adds	r3, #2
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800504a:	4b3b      	ldr	r3, [pc, #236]	; (8005138 <HAL_GPIO_Init+0x350>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	43db      	mvns	r3, r3
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4013      	ands	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800506e:	4a32      	ldr	r2, [pc, #200]	; (8005138 <HAL_GPIO_Init+0x350>)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005074:	4b30      	ldr	r3, [pc, #192]	; (8005138 <HAL_GPIO_Init+0x350>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	43db      	mvns	r3, r3
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4013      	ands	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005098:	4a27      	ldr	r2, [pc, #156]	; (8005138 <HAL_GPIO_Init+0x350>)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800509e:	4b26      	ldr	r3, [pc, #152]	; (8005138 <HAL_GPIO_Init+0x350>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	43db      	mvns	r3, r3
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4013      	ands	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050c2:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <HAL_GPIO_Init+0x350>)
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80050c8:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <HAL_GPIO_Init+0x350>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4013      	ands	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050ec:	4a12      	ldr	r2, [pc, #72]	; (8005138 <HAL_GPIO_Init+0x350>)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	3301      	adds	r3, #1
 80050f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	f47f ae78 	bne.w	8004df8 <HAL_GPIO_Init+0x10>
  }
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40021000 	.word	0x40021000
 800511c:	40010000 	.word	0x40010000
 8005120:	48000400 	.word	0x48000400
 8005124:	48000800 	.word	0x48000800
 8005128:	48000c00 	.word	0x48000c00
 800512c:	48001000 	.word	0x48001000
 8005130:	48001400 	.word	0x48001400
 8005134:	48001800 	.word	0x48001800
 8005138:	40010400 	.word	0x40010400

0800513c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800514a:	e0cd      	b.n	80052e8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800514c:	2201      	movs	r2, #1
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	4013      	ands	r3, r2
 8005158:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 80c0 	beq.w	80052e2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005162:	4a68      	ldr	r2, [pc, #416]	; (8005304 <HAL_GPIO_DeInit+0x1c8>)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	089b      	lsrs	r3, r3, #2
 8005168:	3302      	adds	r3, #2
 800516a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	220f      	movs	r2, #15
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4013      	ands	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800518a:	d025      	beq.n	80051d8 <HAL_GPIO_DeInit+0x9c>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a5e      	ldr	r2, [pc, #376]	; (8005308 <HAL_GPIO_DeInit+0x1cc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d01f      	beq.n	80051d4 <HAL_GPIO_DeInit+0x98>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a5d      	ldr	r2, [pc, #372]	; (800530c <HAL_GPIO_DeInit+0x1d0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d019      	beq.n	80051d0 <HAL_GPIO_DeInit+0x94>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a5c      	ldr	r2, [pc, #368]	; (8005310 <HAL_GPIO_DeInit+0x1d4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d013      	beq.n	80051cc <HAL_GPIO_DeInit+0x90>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a5b      	ldr	r2, [pc, #364]	; (8005314 <HAL_GPIO_DeInit+0x1d8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00d      	beq.n	80051c8 <HAL_GPIO_DeInit+0x8c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a5a      	ldr	r2, [pc, #360]	; (8005318 <HAL_GPIO_DeInit+0x1dc>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d007      	beq.n	80051c4 <HAL_GPIO_DeInit+0x88>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a59      	ldr	r2, [pc, #356]	; (800531c <HAL_GPIO_DeInit+0x1e0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d101      	bne.n	80051c0 <HAL_GPIO_DeInit+0x84>
 80051bc:	2306      	movs	r3, #6
 80051be:	e00c      	b.n	80051da <HAL_GPIO_DeInit+0x9e>
 80051c0:	2307      	movs	r3, #7
 80051c2:	e00a      	b.n	80051da <HAL_GPIO_DeInit+0x9e>
 80051c4:	2305      	movs	r3, #5
 80051c6:	e008      	b.n	80051da <HAL_GPIO_DeInit+0x9e>
 80051c8:	2304      	movs	r3, #4
 80051ca:	e006      	b.n	80051da <HAL_GPIO_DeInit+0x9e>
 80051cc:	2303      	movs	r3, #3
 80051ce:	e004      	b.n	80051da <HAL_GPIO_DeInit+0x9e>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e002      	b.n	80051da <HAL_GPIO_DeInit+0x9e>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <HAL_GPIO_DeInit+0x9e>
 80051d8:	2300      	movs	r3, #0
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	f002 0203 	and.w	r2, r2, #3
 80051e0:	0092      	lsls	r2, r2, #2
 80051e2:	4093      	lsls	r3, r2
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d132      	bne.n	8005250 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80051ea:	4b4d      	ldr	r3, [pc, #308]	; (8005320 <HAL_GPIO_DeInit+0x1e4>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	494b      	ldr	r1, [pc, #300]	; (8005320 <HAL_GPIO_DeInit+0x1e4>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80051f8:	4b49      	ldr	r3, [pc, #292]	; (8005320 <HAL_GPIO_DeInit+0x1e4>)
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	43db      	mvns	r3, r3
 8005200:	4947      	ldr	r1, [pc, #284]	; (8005320 <HAL_GPIO_DeInit+0x1e4>)
 8005202:	4013      	ands	r3, r2
 8005204:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005206:	4b46      	ldr	r3, [pc, #280]	; (8005320 <HAL_GPIO_DeInit+0x1e4>)
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	43db      	mvns	r3, r3
 800520e:	4944      	ldr	r1, [pc, #272]	; (8005320 <HAL_GPIO_DeInit+0x1e4>)
 8005210:	4013      	ands	r3, r2
 8005212:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8005214:	4b42      	ldr	r3, [pc, #264]	; (8005320 <HAL_GPIO_DeInit+0x1e4>)
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	43db      	mvns	r3, r3
 800521c:	4940      	ldr	r1, [pc, #256]	; (8005320 <HAL_GPIO_DeInit+0x1e4>)
 800521e:	4013      	ands	r3, r2
 8005220:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	220f      	movs	r2, #15
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005232:	4a34      	ldr	r2, [pc, #208]	; (8005304 <HAL_GPIO_DeInit+0x1c8>)
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	089b      	lsrs	r3, r3, #2
 8005238:	3302      	adds	r3, #2
 800523a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	43da      	mvns	r2, r3
 8005242:	4830      	ldr	r0, [pc, #192]	; (8005304 <HAL_GPIO_DeInit+0x1c8>)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	089b      	lsrs	r3, r3, #2
 8005248:	400a      	ands	r2, r1
 800524a:	3302      	adds	r3, #2
 800524c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	2103      	movs	r1, #3
 800525a:	fa01 f303 	lsl.w	r3, r1, r3
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	08da      	lsrs	r2, r3, #3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3208      	adds	r2, #8
 800526c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	220f      	movs	r2, #15
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	08d2      	lsrs	r2, r2, #3
 8005284:	4019      	ands	r1, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3208      	adds	r2, #8
 800528a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	2103      	movs	r1, #3
 8005298:	fa01 f303 	lsl.w	r3, r1, r3
 800529c:	43db      	mvns	r3, r3
 800529e:	401a      	ands	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	2101      	movs	r1, #1
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	fa01 f303 	lsl.w	r3, r1, r3
 80052b0:	43db      	mvns	r3, r3
 80052b2:	401a      	ands	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	2103      	movs	r1, #3
 80052c2:	fa01 f303 	lsl.w	r3, r1, r3
 80052c6:	43db      	mvns	r3, r3
 80052c8:	401a      	ands	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d2:	2101      	movs	r1, #1
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	fa01 f303 	lsl.w	r3, r1, r3
 80052da:	43db      	mvns	r3, r3
 80052dc:	401a      	ands	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	3301      	adds	r3, #1
 80052e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f47f af2b 	bne.w	800514c <HAL_GPIO_DeInit+0x10>
  }
}
 80052f6:	bf00      	nop
 80052f8:	bf00      	nop
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	40010000 	.word	0x40010000
 8005308:	48000400 	.word	0x48000400
 800530c:	48000800 	.word	0x48000800
 8005310:	48000c00 	.word	0x48000c00
 8005314:	48001000 	.word	0x48001000
 8005318:	48001400 	.word	0x48001400
 800531c:	48001800 	.word	0x48001800
 8005320:	40010400 	.word	0x40010400

08005324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	887b      	ldrh	r3, [r7, #2]
 8005336:	4013      	ands	r3, r2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800533c:	2301      	movs	r3, #1
 800533e:	73fb      	strb	r3, [r7, #15]
 8005340:	e001      	b.n	8005346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005342:	2300      	movs	r3, #0
 8005344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005346:	7bfb      	ldrb	r3, [r7, #15]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	807b      	strh	r3, [r7, #2]
 8005360:	4613      	mov	r3, r2
 8005362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005364:	787b      	ldrb	r3, [r7, #1]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800536a:	887a      	ldrh	r2, [r7, #2]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005370:	e002      	b.n	8005378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005372:	887a      	ldrh	r2, [r7, #2]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	695a      	ldr	r2, [r3, #20]
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	4013      	ands	r3, r2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800539c:	887a      	ldrh	r2, [r7, #2]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80053a2:	e002      	b.n	80053aa <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053a4:	887a      	ldrh	r2, [r7, #2]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	619a      	str	r2, [r3, #24]
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	4603      	mov	r3, r0
 80053c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053c2:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053c4:	695a      	ldr	r2, [r3, #20]
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	4013      	ands	r3, r2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d006      	beq.n	80053dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053ce:	4a05      	ldr	r2, [pc, #20]	; (80053e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053d0:	88fb      	ldrh	r3, [r7, #6]
 80053d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fc ff20 	bl	800221c <HAL_GPIO_EXTI_Callback>
  }
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40010400 	.word	0x40010400

080053e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e081      	b.n	80054fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fd ff9c 	bl	800334c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2224      	movs	r2, #36	; 0x24
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0201 	bic.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005438:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005448:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d107      	bne.n	8005462 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800545e:	609a      	str	r2, [r3, #8]
 8005460:	e006      	b.n	8005470 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800546e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	2b02      	cmp	r3, #2
 8005476:	d104      	bne.n	8005482 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005480:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005494:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691a      	ldr	r2, [r3, #16]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	ea42 0103 	orr.w	r1, r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	021a      	lsls	r2, r3, #8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69d9      	ldr	r1, [r3, #28]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1a      	ldr	r2, [r3, #32]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e021      	b.n	800555c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2224      	movs	r2, #36	; 0x24
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0201 	bic.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7fd ff4f 	bl	80033d4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	4608      	mov	r0, r1
 800556e:	4611      	mov	r1, r2
 8005570:	461a      	mov	r2, r3
 8005572:	4603      	mov	r3, r0
 8005574:	817b      	strh	r3, [r7, #10]
 8005576:	460b      	mov	r3, r1
 8005578:	813b      	strh	r3, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b20      	cmp	r3, #32
 8005588:	f040 80f9 	bne.w	800577e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_I2C_Mem_Write+0x34>
 8005592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005594:	2b00      	cmp	r3, #0
 8005596:	d105      	bne.n	80055a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800559e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0ed      	b.n	8005780 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <HAL_I2C_Mem_Write+0x4e>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e0e6      	b.n	8005780 <HAL_I2C_Mem_Write+0x21c>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055ba:	f7ff fa95 	bl	8004ae8 <HAL_GetTick>
 80055be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	2319      	movs	r3, #25
 80055c6:	2201      	movs	r2, #1
 80055c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fac3 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0d1      	b.n	8005780 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2221      	movs	r2, #33	; 0x21
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2240      	movs	r2, #64	; 0x40
 80055e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a3a      	ldr	r2, [r7, #32]
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005604:	88f8      	ldrh	r0, [r7, #6]
 8005606:	893a      	ldrh	r2, [r7, #8]
 8005608:	8979      	ldrh	r1, [r7, #10]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	4603      	mov	r3, r0
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f9d3 	bl	80059c0 <I2C_RequestMemoryWrite>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0a9      	b.n	8005780 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005630:	b29b      	uxth	r3, r3
 8005632:	2bff      	cmp	r3, #255	; 0xff
 8005634:	d90e      	bls.n	8005654 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	22ff      	movs	r2, #255	; 0xff
 800563a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005640:	b2da      	uxtb	r2, r3
 8005642:	8979      	ldrh	r1, [r7, #10]
 8005644:	2300      	movs	r3, #0
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 fba5 	bl	8005d9c <I2C_TransferConfig>
 8005652:	e00f      	b.n	8005674 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29a      	uxth	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	b2da      	uxtb	r2, r3
 8005664:	8979      	ldrh	r1, [r7, #10]
 8005666:	2300      	movs	r3, #0
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 fb94 	bl	8005d9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 faad 	bl	8005bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e07b      	b.n	8005780 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	781a      	ldrb	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d034      	beq.n	800572c <HAL_I2C_Mem_Write+0x1c8>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d130      	bne.n	800572c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	2200      	movs	r2, #0
 80056d2:	2180      	movs	r1, #128	; 0x80
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 fa3f 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e04d      	b.n	8005780 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2bff      	cmp	r3, #255	; 0xff
 80056ec:	d90e      	bls.n	800570c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	22ff      	movs	r2, #255	; 0xff
 80056f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	8979      	ldrh	r1, [r7, #10]
 80056fc:	2300      	movs	r3, #0
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fb49 	bl	8005d9c <I2C_TransferConfig>
 800570a:	e00f      	b.n	800572c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	b2da      	uxtb	r2, r3
 800571c:	8979      	ldrh	r1, [r7, #10]
 800571e:	2300      	movs	r3, #0
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 fb38 	bl	8005d9c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d19e      	bne.n	8005674 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 fa8c 	bl	8005c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e01a      	b.n	8005780 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2220      	movs	r2, #32
 8005750:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6859      	ldr	r1, [r3, #4]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <HAL_I2C_Mem_Write+0x224>)
 800575e:	400b      	ands	r3, r1
 8005760:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	e000      	b.n	8005780 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800577e:	2302      	movs	r3, #2
  }
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	fe00e800 	.word	0xfe00e800

0800578c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	4608      	mov	r0, r1
 8005796:	4611      	mov	r1, r2
 8005798:	461a      	mov	r2, r3
 800579a:	4603      	mov	r3, r0
 800579c:	817b      	strh	r3, [r7, #10]
 800579e:	460b      	mov	r3, r1
 80057a0:	813b      	strh	r3, [r7, #8]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	f040 80fd 	bne.w	80059ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_I2C_Mem_Read+0x34>
 80057ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0f1      	b.n	80059b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_I2C_Mem_Read+0x4e>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e0ea      	b.n	80059b0 <HAL_I2C_Mem_Read+0x224>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057e2:	f7ff f981 	bl	8004ae8 <HAL_GetTick>
 80057e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	2319      	movs	r3, #25
 80057ee:	2201      	movs	r2, #1
 80057f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f9af 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e0d5      	b.n	80059b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2222      	movs	r2, #34	; 0x22
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2240      	movs	r2, #64	; 0x40
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a3a      	ldr	r2, [r7, #32]
 800581e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800582c:	88f8      	ldrh	r0, [r7, #6]
 800582e:	893a      	ldrh	r2, [r7, #8]
 8005830:	8979      	ldrh	r1, [r7, #10]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	4603      	mov	r3, r0
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f913 	bl	8005a68 <I2C_RequestMemoryRead>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0ad      	b.n	80059b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005858:	b29b      	uxth	r3, r3
 800585a:	2bff      	cmp	r3, #255	; 0xff
 800585c:	d90e      	bls.n	800587c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	22ff      	movs	r2, #255	; 0xff
 8005862:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005868:	b2da      	uxtb	r2, r3
 800586a:	8979      	ldrh	r1, [r7, #10]
 800586c:	4b52      	ldr	r3, [pc, #328]	; (80059b8 <HAL_I2C_Mem_Read+0x22c>)
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 fa91 	bl	8005d9c <I2C_TransferConfig>
 800587a:	e00f      	b.n	800589c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588a:	b2da      	uxtb	r2, r3
 800588c:	8979      	ldrh	r1, [r7, #10]
 800588e:	4b4a      	ldr	r3, [pc, #296]	; (80059b8 <HAL_I2C_Mem_Read+0x22c>)
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fa80 	bl	8005d9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	2200      	movs	r2, #0
 80058a4:	2104      	movs	r1, #4
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f956 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e07c      	b.n	80059b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d034      	beq.n	800595c <HAL_I2C_Mem_Read+0x1d0>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d130      	bne.n	800595c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	2200      	movs	r2, #0
 8005902:	2180      	movs	r1, #128	; 0x80
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f927 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e04d      	b.n	80059b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2bff      	cmp	r3, #255	; 0xff
 800591c:	d90e      	bls.n	800593c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	22ff      	movs	r2, #255	; 0xff
 8005922:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005928:	b2da      	uxtb	r2, r3
 800592a:	8979      	ldrh	r1, [r7, #10]
 800592c:	2300      	movs	r3, #0
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 fa31 	bl	8005d9c <I2C_TransferConfig>
 800593a:	e00f      	b.n	800595c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594a:	b2da      	uxtb	r2, r3
 800594c:	8979      	ldrh	r1, [r7, #10]
 800594e:	2300      	movs	r3, #0
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fa20 	bl	8005d9c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d19a      	bne.n	800589c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 f974 	bl	8005c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e01a      	b.n	80059b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2220      	movs	r2, #32
 8005980:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6859      	ldr	r1, [r3, #4]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <HAL_I2C_Mem_Read+0x230>)
 800598e:	400b      	ands	r3, r1
 8005990:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e000      	b.n	80059b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80059ae:	2302      	movs	r3, #2
  }
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	80002400 	.word	0x80002400
 80059bc:	fe00e800 	.word	0xfe00e800

080059c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	4608      	mov	r0, r1
 80059ca:	4611      	mov	r1, r2
 80059cc:	461a      	mov	r2, r3
 80059ce:	4603      	mov	r3, r0
 80059d0:	817b      	strh	r3, [r7, #10]
 80059d2:	460b      	mov	r3, r1
 80059d4:	813b      	strh	r3, [r7, #8]
 80059d6:	4613      	mov	r3, r2
 80059d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80059da:	88fb      	ldrh	r3, [r7, #6]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	8979      	ldrh	r1, [r7, #10]
 80059e0:	4b20      	ldr	r3, [pc, #128]	; (8005a64 <I2C_RequestMemoryWrite+0xa4>)
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f9d7 	bl	8005d9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f8f0 	bl	8005bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e02c      	b.n	8005a5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d105      	bne.n	8005a14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a08:	893b      	ldrh	r3, [r7, #8]
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	629a      	str	r2, [r3, #40]	; 0x28
 8005a12:	e015      	b.n	8005a40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a14:	893b      	ldrh	r3, [r7, #8]
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	69b9      	ldr	r1, [r7, #24]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f8d6 	bl	8005bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e012      	b.n	8005a5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a36:	893b      	ldrh	r3, [r7, #8]
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	2200      	movs	r2, #0
 8005a48:	2180      	movs	r1, #128	; 0x80
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 f884 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	80002000 	.word	0x80002000

08005a68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	4608      	mov	r0, r1
 8005a72:	4611      	mov	r1, r2
 8005a74:	461a      	mov	r2, r3
 8005a76:	4603      	mov	r3, r0
 8005a78:	817b      	strh	r3, [r7, #10]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	813b      	strh	r3, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005a82:	88fb      	ldrh	r3, [r7, #6]
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	8979      	ldrh	r1, [r7, #10]
 8005a88:	4b20      	ldr	r3, [pc, #128]	; (8005b0c <I2C_RequestMemoryRead+0xa4>)
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f984 	bl	8005d9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	69b9      	ldr	r1, [r7, #24]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f89d 	bl	8005bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e02c      	b.n	8005b02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aa8:	88fb      	ldrh	r3, [r7, #6]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d105      	bne.n	8005aba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005aae:	893b      	ldrh	r3, [r7, #8]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ab8:	e015      	b.n	8005ae6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005aba:	893b      	ldrh	r3, [r7, #8]
 8005abc:	0a1b      	lsrs	r3, r3, #8
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	69b9      	ldr	r1, [r7, #24]
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f883 	bl	8005bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e012      	b.n	8005b02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005adc:	893b      	ldrh	r3, [r7, #8]
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	2200      	movs	r2, #0
 8005aee:	2140      	movs	r1, #64	; 0x40
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f831 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	80002000 	.word	0x80002000

08005b10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d103      	bne.n	8005b2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d007      	beq.n	8005b4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	619a      	str	r2, [r3, #24]
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	4613      	mov	r3, r2
 8005b66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b68:	e022      	b.n	8005bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b70:	d01e      	beq.n	8005bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b72:	f7fe ffb9 	bl	8004ae8 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d302      	bcc.n	8005b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d113      	bne.n	8005bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	f043 0220 	orr.w	r2, r3, #32
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e00f      	b.n	8005bd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	bf0c      	ite	eq
 8005bc0:	2301      	moveq	r3, #1
 8005bc2:	2300      	movne	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d0cd      	beq.n	8005b6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005be4:	e02c      	b.n	8005c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f870 	bl	8005cd0 <I2C_IsAcknowledgeFailed>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e02a      	b.n	8005c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c00:	d01e      	beq.n	8005c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c02:	f7fe ff71 	bl	8004ae8 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d302      	bcc.n	8005c18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d113      	bne.n	8005c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1c:	f043 0220 	orr.w	r2, r3, #32
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e007      	b.n	8005c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d1cb      	bne.n	8005be6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c64:	e028      	b.n	8005cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f830 	bl	8005cd0 <I2C_IsAcknowledgeFailed>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e026      	b.n	8005cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7a:	f7fe ff35 	bl	8004ae8 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d302      	bcc.n	8005c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d113      	bne.n	8005cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c94:	f043 0220 	orr.w	r2, r3, #32
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e007      	b.n	8005cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d1cf      	bne.n	8005c66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	2b10      	cmp	r3, #16
 8005ce8:	d151      	bne.n	8005d8e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cea:	e022      	b.n	8005d32 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf2:	d01e      	beq.n	8005d32 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf4:	f7fe fef8 	bl	8004ae8 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d302      	bcc.n	8005d0a <I2C_IsAcknowledgeFailed+0x3a>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d113      	bne.n	8005d32 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0e:	f043 0220 	orr.w	r2, r3, #32
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e02e      	b.n	8005d90 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d1d5      	bne.n	8005cec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2210      	movs	r2, #16
 8005d46:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f7ff fedd 	bl	8005b10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4b0d      	ldr	r3, [pc, #52]	; (8005d98 <I2C_IsAcknowledgeFailed+0xc8>)
 8005d62:	400b      	ands	r3, r1
 8005d64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6a:	f043 0204 	orr.w	r2, r3, #4
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	fe00e800 	.word	0xfe00e800

08005d9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	607b      	str	r3, [r7, #4]
 8005da6:	460b      	mov	r3, r1
 8005da8:	817b      	strh	r3, [r7, #10]
 8005daa:	4613      	mov	r3, r2
 8005dac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	0d5b      	lsrs	r3, r3, #21
 8005db8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <I2C_TransferConfig+0x58>)
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	ea02 0103 	and.w	r1, r2, r3
 8005dc6:	897b      	ldrh	r3, [r7, #10]
 8005dc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005dcc:	7a7b      	ldrb	r3, [r7, #9]
 8005dce:	041b      	lsls	r3, r3, #16
 8005dd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	03ff63ff 	.word	0x03ff63ff

08005df8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d138      	bne.n	8005e80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e032      	b.n	8005e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2224      	movs	r2, #36	; 0x24
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6819      	ldr	r1, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e000      	b.n	8005e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e80:	2302      	movs	r3, #2
  }
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b089      	sub	sp, #36	; 0x24
 8005e94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e9e:	4b3e      	ldr	r3, [pc, #248]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 030c 	and.w	r3, r3, #12
 8005ea6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ea8:	4b3b      	ldr	r3, [pc, #236]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0303 	and.w	r3, r3, #3
 8005eb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	2b0c      	cmp	r3, #12
 8005ebc:	d121      	bne.n	8005f02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d11e      	bne.n	8005f02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ec4:	4b34      	ldr	r3, [pc, #208]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d107      	bne.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ed0:	4b31      	ldr	r3, [pc, #196]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ed6:	0a1b      	lsrs	r3, r3, #8
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	61fb      	str	r3, [r7, #28]
 8005ede:	e005      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ee0:	4b2d      	ldr	r3, [pc, #180]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005eec:	4a2b      	ldr	r2, [pc, #172]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10d      	bne.n	8005f18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f00:	e00a      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d102      	bne.n	8005f0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f08:	4b25      	ldr	r3, [pc, #148]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	e004      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d101      	bne.n	8005f18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f14:	4b23      	ldr	r3, [pc, #140]	; (8005fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b0c      	cmp	r3, #12
 8005f1c:	d134      	bne.n	8005f88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f1e:	4b1e      	ldr	r3, [pc, #120]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d003      	beq.n	8005f36 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d003      	beq.n	8005f3c <HAL_RCC_GetSysClockFreq+0xac>
 8005f34:	e005      	b.n	8005f42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f36:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f38:	617b      	str	r3, [r7, #20]
      break;
 8005f3a:	e005      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f3c:	4b19      	ldr	r3, [pc, #100]	; (8005fa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f3e:	617b      	str	r3, [r7, #20]
      break;
 8005f40:	e002      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	617b      	str	r3, [r7, #20]
      break;
 8005f46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	091b      	lsrs	r3, r3, #4
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	3301      	adds	r3, #1
 8005f54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f56:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	0a1b      	lsrs	r3, r3, #8
 8005f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	fb03 f202 	mul.w	r2, r3, r2
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f6e:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	0e5b      	lsrs	r3, r3, #25
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	3301      	adds	r3, #1
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f88:	69bb      	ldr	r3, [r7, #24]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3724      	adds	r7, #36	; 0x24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	0800bcd0 	.word	0x0800bcd0
 8005fa0:	00f42400 	.word	0x00f42400
 8005fa4:	007a1200 	.word	0x007a1200

08005fa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fac:	4b03      	ldr	r3, [pc, #12]	; (8005fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8005fae:	681b      	ldr	r3, [r3, #0]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20000028 	.word	0x20000028

08005fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fc4:	f7ff fff0 	bl	8005fa8 <HAL_RCC_GetHCLKFreq>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	0a1b      	lsrs	r3, r3, #8
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	4904      	ldr	r1, [pc, #16]	; (8005fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fd6:	5ccb      	ldrb	r3, [r1, r3]
 8005fd8:	f003 031f 	and.w	r3, r3, #31
 8005fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	0800bcc8 	.word	0x0800bcc8

08005fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ff0:	f7ff ffda 	bl	8005fa8 <HAL_RCC_GetHCLKFreq>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	4b06      	ldr	r3, [pc, #24]	; (8006010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	0adb      	lsrs	r3, r3, #11
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	4904      	ldr	r1, [pc, #16]	; (8006014 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006002:	5ccb      	ldrb	r3, [r1, r3]
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800600c:	4618      	mov	r0, r3
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40021000 	.word	0x40021000
 8006014:	0800bcc8 	.word	0x0800bcc8

08006018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e07c      	b.n	8006124 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d106      	bne.n	800604a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7fd f9e3 	bl	8003410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2202      	movs	r2, #2
 800604e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006060:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800606a:	d902      	bls.n	8006072 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	e002      	b.n	8006078 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006076:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006080:	d007      	beq.n	8006092 <HAL_SPI_Init+0x7a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800608a:	d002      	beq.n	8006092 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10b      	bne.n	80060b2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060a2:	d903      	bls.n	80060ac <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
 80060aa:	e002      	b.n	80060b2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	ea42 0103 	orr.w	r1, r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	0c1b      	lsrs	r3, r3, #16
 80060f2:	f003 0204 	and.w	r2, r3, #4
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	ea42 0103 	orr.w	r1, r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	430a      	orrs	r2, r1
 8006112:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e01a      	b.n	8006174 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006154:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fd f99e 	bl	8003498 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	4613      	mov	r3, r2
 800618a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006196:	2b01      	cmp	r3, #1
 8006198:	d101      	bne.n	800619e <HAL_SPI_Transmit+0x22>
 800619a:	2302      	movs	r3, #2
 800619c:	e150      	b.n	8006440 <HAL_SPI_Transmit+0x2c4>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061a6:	f7fe fc9f 	bl	8004ae8 <HAL_GetTick>
 80061aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80061ac:	88fb      	ldrh	r3, [r7, #6]
 80061ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d002      	beq.n	80061c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80061bc:	2302      	movs	r3, #2
 80061be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061c0:	e135      	b.n	800642e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <HAL_SPI_Transmit+0x52>
 80061c8:	88fb      	ldrh	r3, [r7, #6]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d102      	bne.n	80061d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061d2:	e12c      	b.n	800642e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2203      	movs	r2, #3
 80061d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	88fa      	ldrh	r2, [r7, #6]
 80061ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	88fa      	ldrh	r2, [r7, #6]
 80061f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621e:	d107      	bne.n	8006230 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800622e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	d007      	beq.n	800624e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800624c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006256:	d94b      	bls.n	80062f0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <HAL_SPI_Transmit+0xea>
 8006260:	8afb      	ldrh	r3, [r7, #22]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d13e      	bne.n	80062e4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	881a      	ldrh	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	1c9a      	adds	r2, r3, #2
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006280:	b29b      	uxth	r3, r3
 8006282:	3b01      	subs	r3, #1
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800628a:	e02b      	b.n	80062e4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b02      	cmp	r3, #2
 8006298:	d112      	bne.n	80062c0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	881a      	ldrh	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062aa:	1c9a      	adds	r2, r3, #2
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062be:	e011      	b.n	80062e4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062c0:	f7fe fc12 	bl	8004ae8 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d803      	bhi.n	80062d8 <HAL_SPI_Transmit+0x15c>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d6:	d102      	bne.n	80062de <HAL_SPI_Transmit+0x162>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062e2:	e0a4      	b.n	800642e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1ce      	bne.n	800628c <HAL_SPI_Transmit+0x110>
 80062ee:	e07c      	b.n	80063ea <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <HAL_SPI_Transmit+0x182>
 80062f8:	8afb      	ldrh	r3, [r7, #22]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d170      	bne.n	80063e0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b01      	cmp	r3, #1
 8006306:	d912      	bls.n	800632e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	881a      	ldrh	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	1c9a      	adds	r2, r3, #2
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b02      	subs	r3, #2
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800632c:	e058      	b.n	80063e0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	330c      	adds	r3, #12
 8006338:	7812      	ldrb	r2, [r2, #0]
 800633a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006354:	e044      	b.n	80063e0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b02      	cmp	r3, #2
 8006362:	d12b      	bne.n	80063bc <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b01      	cmp	r3, #1
 800636c:	d912      	bls.n	8006394 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	881a      	ldrh	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	1c9a      	adds	r2, r3, #2
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b02      	subs	r3, #2
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006392:	e025      	b.n	80063e0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ba:	e011      	b.n	80063e0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063bc:	f7fe fb94 	bl	8004ae8 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d803      	bhi.n	80063d4 <HAL_SPI_Transmit+0x258>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d2:	d102      	bne.n	80063da <HAL_SPI_Transmit+0x25e>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d102      	bne.n	80063e0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063de:	e026      	b.n	800642e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1b5      	bne.n	8006356 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 fdb4 	bl	8006f5c <SPI_EndRxTxTransaction>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2220      	movs	r2, #32
 80063fe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006408:	2300      	movs	r3, #0
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	613b      	str	r3, [r7, #16]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e000      	b.n	800642e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800642c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800643e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3720      	adds	r7, #32
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af02      	add	r7, sp, #8
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	4613      	mov	r3, r2
 8006456:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006464:	d112      	bne.n	800648c <HAL_SPI_Receive+0x44>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10e      	bne.n	800648c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2204      	movs	r2, #4
 8006472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006476:	88fa      	ldrh	r2, [r7, #6]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 f908 	bl	8006698 <HAL_SPI_TransmitReceive>
 8006488:	4603      	mov	r3, r0
 800648a:	e101      	b.n	8006690 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <HAL_SPI_Receive+0x52>
 8006496:	2302      	movs	r3, #2
 8006498:	e0fa      	b.n	8006690 <HAL_SPI_Receive+0x248>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064a2:	f7fe fb21 	bl	8004ae8 <HAL_GetTick>
 80064a6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d002      	beq.n	80064ba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
 80064b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064b8:	e0e1      	b.n	800667e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_SPI_Receive+0x7e>
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064ca:	e0d8      	b.n	800667e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2204      	movs	r2, #4
 80064d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	88fa      	ldrh	r2, [r7, #6]
 80064e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	88fa      	ldrh	r2, [r7, #6]
 80064ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006516:	d908      	bls.n	800652a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006526:	605a      	str	r2, [r3, #4]
 8006528:	e007      	b.n	800653a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006538:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006542:	d107      	bne.n	8006554 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006552:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b40      	cmp	r3, #64	; 0x40
 8006560:	d007      	beq.n	8006572 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006570:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800657a:	d867      	bhi.n	800664c <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800657c:	e030      	b.n	80065e0 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b01      	cmp	r3, #1
 800658a:	d117      	bne.n	80065bc <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f103 020c 	add.w	r2, r3, #12
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	7812      	ldrb	r2, [r2, #0]
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80065ba:	e011      	b.n	80065e0 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065bc:	f7fe fa94 	bl	8004ae8 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d803      	bhi.n	80065d4 <HAL_SPI_Receive+0x18c>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d2:	d102      	bne.n	80065da <HAL_SPI_Receive+0x192>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d102      	bne.n	80065e0 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80065de:	e04e      	b.n	800667e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1c8      	bne.n	800657e <HAL_SPI_Receive+0x136>
 80065ec:	e034      	b.n	8006658 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d115      	bne.n	8006628 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	b292      	uxth	r2, r2
 8006608:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	1c9a      	adds	r2, r3, #2
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006626:	e011      	b.n	800664c <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006628:	f7fe fa5e 	bl	8004ae8 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d803      	bhi.n	8006640 <HAL_SPI_Receive+0x1f8>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663e:	d102      	bne.n	8006646 <HAL_SPI_Receive+0x1fe>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d102      	bne.n	800664c <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	75fb      	strb	r3, [r7, #23]
          goto error;
 800664a:	e018      	b.n	800667e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1ca      	bne.n	80065ee <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fc25 	bl	8006eac <SPI_EndRxTransaction>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2220      	movs	r2, #32
 800666c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
 800667a:	e000      	b.n	800667e <HAL_SPI_Receive+0x236>
  }

error :
 800667c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800668e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08a      	sub	sp, #40	; 0x28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066a6:	2301      	movs	r3, #1
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_SPI_TransmitReceive+0x26>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e1fb      	b.n	8006ab6 <HAL_SPI_TransmitReceive+0x41e>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066c6:	f7fe fa0f 	bl	8004ae8 <HAL_GetTick>
 80066ca:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066d2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80066da:	887b      	ldrh	r3, [r7, #2]
 80066dc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80066de:	887b      	ldrh	r3, [r7, #2]
 80066e0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066e2:	7efb      	ldrb	r3, [r7, #27]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d00e      	beq.n	8006706 <HAL_SPI_TransmitReceive+0x6e>
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ee:	d106      	bne.n	80066fe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <HAL_SPI_TransmitReceive+0x66>
 80066f8:	7efb      	ldrb	r3, [r7, #27]
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d003      	beq.n	8006706 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80066fe:	2302      	movs	r3, #2
 8006700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006704:	e1cd      	b.n	8006aa2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_SPI_TransmitReceive+0x80>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_SPI_TransmitReceive+0x80>
 8006712:	887b      	ldrh	r3, [r7, #2]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d103      	bne.n	8006720 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800671e:	e1c0      	b.n	8006aa2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b04      	cmp	r3, #4
 800672a:	d003      	beq.n	8006734 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2205      	movs	r2, #5
 8006730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	887a      	ldrh	r2, [r7, #2]
 8006744:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	887a      	ldrh	r2, [r7, #2]
 800674c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	887a      	ldrh	r2, [r7, #2]
 800675a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	887a      	ldrh	r2, [r7, #2]
 8006760:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006776:	d802      	bhi.n	800677e <HAL_SPI_TransmitReceive+0xe6>
 8006778:	8a3b      	ldrh	r3, [r7, #16]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d908      	bls.n	8006790 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800678c:	605a      	str	r2, [r3, #4]
 800678e:	e007      	b.n	80067a0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800679e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067aa:	2b40      	cmp	r3, #64	; 0x40
 80067ac:	d007      	beq.n	80067be <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067c6:	d97c      	bls.n	80068c2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <HAL_SPI_TransmitReceive+0x13e>
 80067d0:	8a7b      	ldrh	r3, [r7, #18]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d169      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	881a      	ldrh	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	1c9a      	adds	r2, r3, #2
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067fa:	e056      	b.n	80068aa <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b02      	cmp	r3, #2
 8006808:	d11b      	bne.n	8006842 <HAL_SPI_TransmitReceive+0x1aa>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d016      	beq.n	8006842 <HAL_SPI_TransmitReceive+0x1aa>
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	2b01      	cmp	r3, #1
 8006818:	d113      	bne.n	8006842 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	881a      	ldrh	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	1c9a      	adds	r2, r3, #2
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b01      	cmp	r3, #1
 800684e:	d11c      	bne.n	800688a <HAL_SPI_TransmitReceive+0x1f2>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006856:	b29b      	uxth	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d016      	beq.n	800688a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	b292      	uxth	r2, r2
 8006868:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	1c9a      	adds	r2, r3, #2
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006886:	2301      	movs	r3, #1
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800688a:	f7fe f92d 	bl	8004ae8 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006896:	429a      	cmp	r2, r3
 8006898:	d807      	bhi.n	80068aa <HAL_SPI_TransmitReceive+0x212>
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a0:	d003      	beq.n	80068aa <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80068a8:	e0fb      	b.n	8006aa2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1a3      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x164>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d19d      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x164>
 80068c0:	e0df      	b.n	8006a82 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_SPI_TransmitReceive+0x23a>
 80068ca:	8a7b      	ldrh	r3, [r7, #18]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	f040 80cb 	bne.w	8006a68 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d912      	bls.n	8006902 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	881a      	ldrh	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	1c9a      	adds	r2, r3, #2
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	3b02      	subs	r3, #2
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006900:	e0b2      	b.n	8006a68 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	330c      	adds	r3, #12
 800690c:	7812      	ldrb	r2, [r2, #0]
 800690e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006928:	e09e      	b.n	8006a68 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b02      	cmp	r3, #2
 8006936:	d134      	bne.n	80069a2 <HAL_SPI_TransmitReceive+0x30a>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d02f      	beq.n	80069a2 <HAL_SPI_TransmitReceive+0x30a>
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	2b01      	cmp	r3, #1
 8006946:	d12c      	bne.n	80069a2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800694c:	b29b      	uxth	r3, r3
 800694e:	2b01      	cmp	r3, #1
 8006950:	d912      	bls.n	8006978 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	881a      	ldrh	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006962:	1c9a      	adds	r2, r3, #2
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696c:	b29b      	uxth	r3, r3
 800696e:	3b02      	subs	r3, #2
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006976:	e012      	b.n	800699e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	330c      	adds	r3, #12
 8006982:	7812      	ldrb	r2, [r2, #0]
 8006984:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d148      	bne.n	8006a42 <HAL_SPI_TransmitReceive+0x3aa>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d042      	beq.n	8006a42 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d923      	bls.n	8006a10 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	b292      	uxth	r2, r2
 80069d4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	1c9a      	adds	r2, r3, #2
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b02      	subs	r3, #2
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d81f      	bhi.n	8006a3e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a0c:	605a      	str	r2, [r3, #4]
 8006a0e:	e016      	b.n	8006a3e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f103 020c 	add.w	r2, r3, #12
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	7812      	ldrb	r2, [r2, #0]
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a42:	f7fe f851 	bl	8004ae8 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d803      	bhi.n	8006a5a <HAL_SPI_TransmitReceive+0x3c2>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a58:	d102      	bne.n	8006a60 <HAL_SPI_TransmitReceive+0x3c8>
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d103      	bne.n	8006a68 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006a66:	e01c      	b.n	8006aa2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f47f af5b 	bne.w	800692a <HAL_SPI_TransmitReceive+0x292>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f47f af54 	bne.w	800692a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a82:	69fa      	ldr	r2, [r7, #28]
 8006a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 fa68 	bl	8006f5c <SPI_EndRxTxTransaction>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d006      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	661a      	str	r2, [r3, #96]	; 0x60
 8006a9e:	e000      	b.n	8006aa2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006aa0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3728      	adds	r7, #40	; 0x28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	099b      	lsrs	r3, r3, #6
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10f      	bne.n	8006b04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	099b      	lsrs	r3, r3, #6
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d004      	beq.n	8006b04 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	4798      	blx	r3
    return;
 8006b02:	e0d7      	b.n	8006cb4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00a      	beq.n	8006b26 <HAL_SPI_IRQHandler+0x66>
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	09db      	lsrs	r3, r3, #7
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d004      	beq.n	8006b26 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4798      	blx	r3
    return;
 8006b24:	e0c6      	b.n	8006cb4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10c      	bne.n	8006b4c <HAL_SPI_IRQHandler+0x8c>
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	099b      	lsrs	r3, r3, #6
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_SPI_IRQHandler+0x8c>
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	0a1b      	lsrs	r3, r3, #8
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 80b4 	beq.w	8006cb4 <HAL_SPI_IRQHandler+0x1f4>
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	095b      	lsrs	r3, r3, #5
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80ad 	beq.w	8006cb4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	099b      	lsrs	r3, r3, #6
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d023      	beq.n	8006bae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d011      	beq.n	8006b96 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b76:	f043 0204 	orr.w	r2, r3, #4
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b7e:	2300      	movs	r3, #0
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	e00b      	b.n	8006bae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b96:	2300      	movs	r3, #0
 8006b98:	613b      	str	r3, [r7, #16]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	613b      	str	r3, [r7, #16]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	613b      	str	r3, [r7, #16]
 8006baa:	693b      	ldr	r3, [r7, #16]
        return;
 8006bac:	e082      	b.n	8006cb4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d014      	beq.n	8006be4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bbe:	f043 0201 	orr.w	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	0a1b      	lsrs	r3, r3, #8
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00c      	beq.n	8006c0a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf4:	f043 0208 	orr.w	r2, r3, #8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60bb      	str	r3, [r7, #8]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	60bb      	str	r3, [r7, #8]
 8006c08:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d04f      	beq.n	8006cb2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c20:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d104      	bne.n	8006c3e <HAL_SPI_IRQHandler+0x17e>
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d034      	beq.n	8006ca8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0203 	bic.w	r2, r2, #3
 8006c4c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d011      	beq.n	8006c7a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5a:	4a18      	ldr	r2, [pc, #96]	; (8006cbc <HAL_SPI_IRQHandler+0x1fc>)
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe f87f 	bl	8004d66 <HAL_DMA_Abort_IT>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d016      	beq.n	8006cb0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c86:	4a0d      	ldr	r2, [pc, #52]	; (8006cbc <HAL_SPI_IRQHandler+0x1fc>)
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fe f869 	bl	8004d66 <HAL_DMA_Abort_IT>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006ca6:	e003      	b.n	8006cb0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f809 	bl	8006cc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006cae:	e000      	b.n	8006cb2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006cb0:	bf00      	nop
    return;
 8006cb2:	bf00      	nop
  }
}
 8006cb4:	3720      	adds	r7, #32
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	08006cd5 	.word	0x08006cd5

08006cc0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f7ff ffe5 	bl	8006cc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006cf6:	bf00      	nop
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	603b      	str	r3, [r7, #0]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d0e:	e04c      	b.n	8006daa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d16:	d048      	beq.n	8006daa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006d18:	f7fd fee6 	bl	8004ae8 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d902      	bls.n	8006d2e <SPI_WaitFlagStateUntilTimeout+0x30>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d13d      	bne.n	8006daa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d46:	d111      	bne.n	8006d6c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d50:	d004      	beq.n	8006d5c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d5a:	d107      	bne.n	8006d6c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d74:	d10f      	bne.n	8006d96 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e00f      	b.n	8006dca <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	4013      	ands	r3, r2
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	bf0c      	ite	eq
 8006dba:	2301      	moveq	r3, #1
 8006dbc:	2300      	movne	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d1a3      	bne.n	8006d10 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	60f8      	str	r0, [r7, #12]
 8006dda:	60b9      	str	r1, [r7, #8]
 8006ddc:	607a      	str	r2, [r7, #4]
 8006dde:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006de0:	e057      	b.n	8006e92 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006de8:	d106      	bne.n	8006df8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	330c      	adds	r3, #12
 8006df6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfe:	d048      	beq.n	8006e92 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006e00:	f7fd fe72 	bl	8004ae8 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d902      	bls.n	8006e16 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d13d      	bne.n	8006e92 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e2e:	d111      	bne.n	8006e54 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e38:	d004      	beq.n	8006e44 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e42:	d107      	bne.n	8006e54 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e5c:	d10f      	bne.n	8006e7e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e008      	b.n	8006ea4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d19f      	bne.n	8006de2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ec0:	d111      	bne.n	8006ee6 <SPI_EndRxTransaction+0x3a>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eca:	d004      	beq.n	8006ed6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed4:	d107      	bne.n	8006ee6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2200      	movs	r2, #0
 8006eee:	2180      	movs	r1, #128	; 0x80
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f7ff ff04 	bl	8006cfe <SPI_WaitFlagStateUntilTimeout>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f00:	f043 0220 	orr.w	r2, r3, #32
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e023      	b.n	8006f54 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f14:	d11d      	bne.n	8006f52 <SPI_EndRxTransaction+0xa6>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f1e:	d004      	beq.n	8006f2a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f28:	d113      	bne.n	8006f52 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f7ff ff4b 	bl	8006dd2 <SPI_WaitFifoStateUntilTimeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d007      	beq.n	8006f52 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f46:	f043 0220 	orr.w	r2, r3, #32
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e000      	b.n	8006f54 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f7ff ff2c 	bl	8006dd2 <SPI_WaitFifoStateUntilTimeout>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d007      	beq.n	8006f90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f84:	f043 0220 	orr.w	r2, r3, #32
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e027      	b.n	8006fe0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2200      	movs	r2, #0
 8006f98:	2180      	movs	r1, #128	; 0x80
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7ff feaf 	bl	8006cfe <SPI_WaitFlagStateUntilTimeout>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006faa:	f043 0220 	orr.w	r2, r3, #32
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e014      	b.n	8006fe0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7ff ff05 	bl	8006dd2 <SPI_WaitFifoStateUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fd2:	f043 0220 	orr.w	r2, r3, #32
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e000      	b.n	8006fe0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e040      	b.n	800707c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d106      	bne.n	8007010 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7fc fa62 	bl	80034d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2224      	movs	r2, #36	; 0x24
 8007014:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0201 	bic.w	r2, r2, #1
 8007024:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f98c 	bl	8007344 <UART_SetConfig>
 800702c:	4603      	mov	r3, r0
 800702e:	2b01      	cmp	r3, #1
 8007030:	d101      	bne.n	8007036 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e022      	b.n	800707c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fd20 	bl	8007a84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689a      	ldr	r2, [r3, #8]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007062:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0201 	orr.w	r2, r2, #1
 8007072:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fda7 	bl	8007bc8 <UART_CheckIdleState>
 800707a:	4603      	mov	r3, r0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08a      	sub	sp, #40	; 0x28
 8007088:	af02      	add	r7, sp, #8
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	4613      	mov	r3, r2
 8007092:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007098:	2b20      	cmp	r3, #32
 800709a:	f040 8081 	bne.w	80071a0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_UART_Transmit+0x26>
 80070a4:	88fb      	ldrh	r3, [r7, #6]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e079      	b.n	80071a2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d101      	bne.n	80070bc <HAL_UART_Transmit+0x38>
 80070b8:	2302      	movs	r3, #2
 80070ba:	e072      	b.n	80071a2 <HAL_UART_Transmit+0x11e>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2221      	movs	r2, #33	; 0x21
 80070ce:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80070d0:	f7fd fd0a 	bl	8004ae8 <HAL_GetTick>
 80070d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	88fa      	ldrh	r2, [r7, #6]
 80070da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	88fa      	ldrh	r2, [r7, #6]
 80070e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ee:	d108      	bne.n	8007102 <HAL_UART_Transmit+0x7e>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	61bb      	str	r3, [r7, #24]
 8007100:	e003      	b.n	800710a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007106:	2300      	movs	r3, #0
 8007108:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007112:	e02d      	b.n	8007170 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2200      	movs	r2, #0
 800711c:	2180      	movs	r1, #128	; 0x80
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 fd97 	bl	8007c52 <UART_WaitOnFlagUntilTimeout>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e039      	b.n	80071a2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10b      	bne.n	800714c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	881a      	ldrh	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007140:	b292      	uxth	r2, r2
 8007142:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	3302      	adds	r3, #2
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	e008      	b.n	800715e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	781a      	ldrb	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	b292      	uxth	r2, r2
 8007156:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	3301      	adds	r3, #1
 800715c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007176:	b29b      	uxth	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1cb      	bne.n	8007114 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2200      	movs	r2, #0
 8007184:	2140      	movs	r1, #64	; 0x40
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 fd63 	bl	8007c52 <UART_WaitOnFlagUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e005      	b.n	80071a2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2220      	movs	r2, #32
 800719a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	e000      	b.n	80071a2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80071a0:	2302      	movs	r3, #2
  }
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3720      	adds	r7, #32
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b08a      	sub	sp, #40	; 0x28
 80071ae:	af02      	add	r7, sp, #8
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	603b      	str	r3, [r7, #0]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071be:	2b20      	cmp	r3, #32
 80071c0:	f040 80bb 	bne.w	800733a <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <HAL_UART_Receive+0x26>
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e0b3      	b.n	800733c <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_UART_Receive+0x38>
 80071de:	2302      	movs	r3, #2
 80071e0:	e0ac      	b.n	800733c <HAL_UART_Receive+0x192>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2222      	movs	r2, #34	; 0x22
 80071f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80071f6:	f7fd fc77 	bl	8004ae8 <HAL_GetTick>
 80071fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	88fa      	ldrh	r2, [r7, #6]
 8007200:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007214:	d10e      	bne.n	8007234 <HAL_UART_Receive+0x8a>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d105      	bne.n	800722a <HAL_UART_Receive+0x80>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007224:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007228:	e02d      	b.n	8007286 <HAL_UART_Receive+0xdc>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	22ff      	movs	r2, #255	; 0xff
 800722e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007232:	e028      	b.n	8007286 <HAL_UART_Receive+0xdc>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10d      	bne.n	8007258 <HAL_UART_Receive+0xae>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <HAL_UART_Receive+0xa4>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	22ff      	movs	r2, #255	; 0xff
 8007248:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800724c:	e01b      	b.n	8007286 <HAL_UART_Receive+0xdc>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	227f      	movs	r2, #127	; 0x7f
 8007252:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007256:	e016      	b.n	8007286 <HAL_UART_Receive+0xdc>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007260:	d10d      	bne.n	800727e <HAL_UART_Receive+0xd4>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d104      	bne.n	8007274 <HAL_UART_Receive+0xca>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	227f      	movs	r2, #127	; 0x7f
 800726e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007272:	e008      	b.n	8007286 <HAL_UART_Receive+0xdc>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	223f      	movs	r2, #63	; 0x3f
 8007278:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800727c:	e003      	b.n	8007286 <HAL_UART_Receive+0xdc>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800728c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007296:	d108      	bne.n	80072aa <HAL_UART_Receive+0x100>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	61bb      	str	r3, [r7, #24]
 80072a8:	e003      	b.n	80072b2 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80072ba:	e033      	b.n	8007324 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2200      	movs	r2, #0
 80072c4:	2120      	movs	r1, #32
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fcc3 	bl	8007c52 <UART_WaitOnFlagUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e032      	b.n	800733c <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10c      	bne.n	80072f6 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	8a7b      	ldrh	r3, [r7, #18]
 80072e6:	4013      	ands	r3, r2
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	3302      	adds	r3, #2
 80072f2:	61bb      	str	r3, [r7, #24]
 80072f4:	e00d      	b.n	8007312 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	8a7b      	ldrh	r3, [r7, #18]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	4013      	ands	r3, r2
 8007306:	b2da      	uxtb	r2, r3
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	3301      	adds	r3, #1
 8007310:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007318:	b29b      	uxth	r3, r3
 800731a:	3b01      	subs	r3, #1
 800731c:	b29a      	uxth	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800732a:	b29b      	uxth	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1c5      	bne.n	80072bc <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2220      	movs	r2, #32
 8007334:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	e000      	b.n	800733c <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800733a:	2302      	movs	r3, #2
  }
}
 800733c:	4618      	mov	r0, r3
 800733e:	3720      	adds	r7, #32
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007348:	b0a0      	sub	sp, #128	; 0x80
 800734a:	af00      	add	r7, sp, #0
 800734c:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800734e:	2300      	movs	r3, #0
 8007350:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007358:	2300      	movs	r3, #0
 800735a:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800735c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	431a      	orrs	r2, r3
 8007366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	431a      	orrs	r2, r3
 800736c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	4313      	orrs	r3, r2
 8007372:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	49a4      	ldr	r1, [pc, #656]	; (800760c <UART_SetConfig+0x2c8>)
 800737c:	4019      	ands	r1, r3
 800737e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007384:	430b      	orrs	r3, r1
 8007386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007394:	68d9      	ldr	r1, [r3, #12]
 8007396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	ea40 0301 	orr.w	r3, r0, r1
 800739e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	4b99      	ldr	r3, [pc, #612]	; (8007610 <UART_SetConfig+0x2cc>)
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d004      	beq.n	80073ba <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b2:	6a1a      	ldr	r2, [r3, #32]
 80073b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073b6:	4313      	orrs	r3, r2
 80073b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073ca:	430b      	orrs	r3, r1
 80073cc:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b90      	ldr	r3, [pc, #576]	; (8007614 <UART_SetConfig+0x2d0>)
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d125      	bne.n	8007424 <UART_SetConfig+0xe0>
 80073d8:	4b8f      	ldr	r3, [pc, #572]	; (8007618 <UART_SetConfig+0x2d4>)
 80073da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d81a      	bhi.n	800741c <UART_SetConfig+0xd8>
 80073e6:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <UART_SetConfig+0xa8>)
 80073e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ec:	080073fd 	.word	0x080073fd
 80073f0:	0800740d 	.word	0x0800740d
 80073f4:	08007405 	.word	0x08007405
 80073f8:	08007415 	.word	0x08007415
 80073fc:	2301      	movs	r3, #1
 80073fe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007402:	e116      	b.n	8007632 <UART_SetConfig+0x2ee>
 8007404:	2302      	movs	r3, #2
 8007406:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800740a:	e112      	b.n	8007632 <UART_SetConfig+0x2ee>
 800740c:	2304      	movs	r3, #4
 800740e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007412:	e10e      	b.n	8007632 <UART_SetConfig+0x2ee>
 8007414:	2308      	movs	r3, #8
 8007416:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800741a:	e10a      	b.n	8007632 <UART_SetConfig+0x2ee>
 800741c:	2310      	movs	r3, #16
 800741e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007422:	e106      	b.n	8007632 <UART_SetConfig+0x2ee>
 8007424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	4b7c      	ldr	r3, [pc, #496]	; (800761c <UART_SetConfig+0x2d8>)
 800742a:	429a      	cmp	r2, r3
 800742c:	d138      	bne.n	80074a0 <UART_SetConfig+0x15c>
 800742e:	4b7a      	ldr	r3, [pc, #488]	; (8007618 <UART_SetConfig+0x2d4>)
 8007430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007434:	f003 030c 	and.w	r3, r3, #12
 8007438:	2b0c      	cmp	r3, #12
 800743a:	d82d      	bhi.n	8007498 <UART_SetConfig+0x154>
 800743c:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <UART_SetConfig+0x100>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	08007479 	.word	0x08007479
 8007448:	08007499 	.word	0x08007499
 800744c:	08007499 	.word	0x08007499
 8007450:	08007499 	.word	0x08007499
 8007454:	08007489 	.word	0x08007489
 8007458:	08007499 	.word	0x08007499
 800745c:	08007499 	.word	0x08007499
 8007460:	08007499 	.word	0x08007499
 8007464:	08007481 	.word	0x08007481
 8007468:	08007499 	.word	0x08007499
 800746c:	08007499 	.word	0x08007499
 8007470:	08007499 	.word	0x08007499
 8007474:	08007491 	.word	0x08007491
 8007478:	2300      	movs	r3, #0
 800747a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800747e:	e0d8      	b.n	8007632 <UART_SetConfig+0x2ee>
 8007480:	2302      	movs	r3, #2
 8007482:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007486:	e0d4      	b.n	8007632 <UART_SetConfig+0x2ee>
 8007488:	2304      	movs	r3, #4
 800748a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800748e:	e0d0      	b.n	8007632 <UART_SetConfig+0x2ee>
 8007490:	2308      	movs	r3, #8
 8007492:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007496:	e0cc      	b.n	8007632 <UART_SetConfig+0x2ee>
 8007498:	2310      	movs	r3, #16
 800749a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800749e:	e0c8      	b.n	8007632 <UART_SetConfig+0x2ee>
 80074a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	4b5e      	ldr	r3, [pc, #376]	; (8007620 <UART_SetConfig+0x2dc>)
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d125      	bne.n	80074f6 <UART_SetConfig+0x1b2>
 80074aa:	4b5b      	ldr	r3, [pc, #364]	; (8007618 <UART_SetConfig+0x2d4>)
 80074ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074b4:	2b30      	cmp	r3, #48	; 0x30
 80074b6:	d016      	beq.n	80074e6 <UART_SetConfig+0x1a2>
 80074b8:	2b30      	cmp	r3, #48	; 0x30
 80074ba:	d818      	bhi.n	80074ee <UART_SetConfig+0x1aa>
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d00a      	beq.n	80074d6 <UART_SetConfig+0x192>
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d814      	bhi.n	80074ee <UART_SetConfig+0x1aa>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <UART_SetConfig+0x18a>
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d008      	beq.n	80074de <UART_SetConfig+0x19a>
 80074cc:	e00f      	b.n	80074ee <UART_SetConfig+0x1aa>
 80074ce:	2300      	movs	r3, #0
 80074d0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80074d4:	e0ad      	b.n	8007632 <UART_SetConfig+0x2ee>
 80074d6:	2302      	movs	r3, #2
 80074d8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80074dc:	e0a9      	b.n	8007632 <UART_SetConfig+0x2ee>
 80074de:	2304      	movs	r3, #4
 80074e0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80074e4:	e0a5      	b.n	8007632 <UART_SetConfig+0x2ee>
 80074e6:	2308      	movs	r3, #8
 80074e8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80074ec:	e0a1      	b.n	8007632 <UART_SetConfig+0x2ee>
 80074ee:	2310      	movs	r3, #16
 80074f0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80074f4:	e09d      	b.n	8007632 <UART_SetConfig+0x2ee>
 80074f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b4a      	ldr	r3, [pc, #296]	; (8007624 <UART_SetConfig+0x2e0>)
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d125      	bne.n	800754c <UART_SetConfig+0x208>
 8007500:	4b45      	ldr	r3, [pc, #276]	; (8007618 <UART_SetConfig+0x2d4>)
 8007502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007506:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800750a:	2bc0      	cmp	r3, #192	; 0xc0
 800750c:	d016      	beq.n	800753c <UART_SetConfig+0x1f8>
 800750e:	2bc0      	cmp	r3, #192	; 0xc0
 8007510:	d818      	bhi.n	8007544 <UART_SetConfig+0x200>
 8007512:	2b80      	cmp	r3, #128	; 0x80
 8007514:	d00a      	beq.n	800752c <UART_SetConfig+0x1e8>
 8007516:	2b80      	cmp	r3, #128	; 0x80
 8007518:	d814      	bhi.n	8007544 <UART_SetConfig+0x200>
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <UART_SetConfig+0x1e0>
 800751e:	2b40      	cmp	r3, #64	; 0x40
 8007520:	d008      	beq.n	8007534 <UART_SetConfig+0x1f0>
 8007522:	e00f      	b.n	8007544 <UART_SetConfig+0x200>
 8007524:	2300      	movs	r3, #0
 8007526:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800752a:	e082      	b.n	8007632 <UART_SetConfig+0x2ee>
 800752c:	2302      	movs	r3, #2
 800752e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007532:	e07e      	b.n	8007632 <UART_SetConfig+0x2ee>
 8007534:	2304      	movs	r3, #4
 8007536:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800753a:	e07a      	b.n	8007632 <UART_SetConfig+0x2ee>
 800753c:	2308      	movs	r3, #8
 800753e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007542:	e076      	b.n	8007632 <UART_SetConfig+0x2ee>
 8007544:	2310      	movs	r3, #16
 8007546:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800754a:	e072      	b.n	8007632 <UART_SetConfig+0x2ee>
 800754c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	4b35      	ldr	r3, [pc, #212]	; (8007628 <UART_SetConfig+0x2e4>)
 8007552:	429a      	cmp	r2, r3
 8007554:	d12a      	bne.n	80075ac <UART_SetConfig+0x268>
 8007556:	4b30      	ldr	r3, [pc, #192]	; (8007618 <UART_SetConfig+0x2d4>)
 8007558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800755c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007564:	d01a      	beq.n	800759c <UART_SetConfig+0x258>
 8007566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800756a:	d81b      	bhi.n	80075a4 <UART_SetConfig+0x260>
 800756c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007570:	d00c      	beq.n	800758c <UART_SetConfig+0x248>
 8007572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007576:	d815      	bhi.n	80075a4 <UART_SetConfig+0x260>
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <UART_SetConfig+0x240>
 800757c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007580:	d008      	beq.n	8007594 <UART_SetConfig+0x250>
 8007582:	e00f      	b.n	80075a4 <UART_SetConfig+0x260>
 8007584:	2300      	movs	r3, #0
 8007586:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800758a:	e052      	b.n	8007632 <UART_SetConfig+0x2ee>
 800758c:	2302      	movs	r3, #2
 800758e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007592:	e04e      	b.n	8007632 <UART_SetConfig+0x2ee>
 8007594:	2304      	movs	r3, #4
 8007596:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800759a:	e04a      	b.n	8007632 <UART_SetConfig+0x2ee>
 800759c:	2308      	movs	r3, #8
 800759e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80075a2:	e046      	b.n	8007632 <UART_SetConfig+0x2ee>
 80075a4:	2310      	movs	r3, #16
 80075a6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80075aa:	e042      	b.n	8007632 <UART_SetConfig+0x2ee>
 80075ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	4b17      	ldr	r3, [pc, #92]	; (8007610 <UART_SetConfig+0x2cc>)
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d13a      	bne.n	800762c <UART_SetConfig+0x2e8>
 80075b6:	4b18      	ldr	r3, [pc, #96]	; (8007618 <UART_SetConfig+0x2d4>)
 80075b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075c4:	d01a      	beq.n	80075fc <UART_SetConfig+0x2b8>
 80075c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075ca:	d81b      	bhi.n	8007604 <UART_SetConfig+0x2c0>
 80075cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d0:	d00c      	beq.n	80075ec <UART_SetConfig+0x2a8>
 80075d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d6:	d815      	bhi.n	8007604 <UART_SetConfig+0x2c0>
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <UART_SetConfig+0x2a0>
 80075dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e0:	d008      	beq.n	80075f4 <UART_SetConfig+0x2b0>
 80075e2:	e00f      	b.n	8007604 <UART_SetConfig+0x2c0>
 80075e4:	2300      	movs	r3, #0
 80075e6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80075ea:	e022      	b.n	8007632 <UART_SetConfig+0x2ee>
 80075ec:	2302      	movs	r3, #2
 80075ee:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80075f2:	e01e      	b.n	8007632 <UART_SetConfig+0x2ee>
 80075f4:	2304      	movs	r3, #4
 80075f6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80075fa:	e01a      	b.n	8007632 <UART_SetConfig+0x2ee>
 80075fc:	2308      	movs	r3, #8
 80075fe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8007602:	e016      	b.n	8007632 <UART_SetConfig+0x2ee>
 8007604:	2310      	movs	r3, #16
 8007606:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800760a:	e012      	b.n	8007632 <UART_SetConfig+0x2ee>
 800760c:	efff69f3 	.word	0xefff69f3
 8007610:	40008000 	.word	0x40008000
 8007614:	40013800 	.word	0x40013800
 8007618:	40021000 	.word	0x40021000
 800761c:	40004400 	.word	0x40004400
 8007620:	40004800 	.word	0x40004800
 8007624:	40004c00 	.word	0x40004c00
 8007628:	40005000 	.word	0x40005000
 800762c:	2310      	movs	r3, #16
 800762e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	4bb6      	ldr	r3, [pc, #728]	; (8007910 <UART_SetConfig+0x5cc>)
 8007638:	429a      	cmp	r2, r3
 800763a:	f040 810c 	bne.w	8007856 <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800763e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007642:	2b08      	cmp	r3, #8
 8007644:	d823      	bhi.n	800768e <UART_SetConfig+0x34a>
 8007646:	a201      	add	r2, pc, #4	; (adr r2, 800764c <UART_SetConfig+0x308>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	08007671 	.word	0x08007671
 8007650:	0800768f 	.word	0x0800768f
 8007654:	08007679 	.word	0x08007679
 8007658:	0800768f 	.word	0x0800768f
 800765c:	0800767f 	.word	0x0800767f
 8007660:	0800768f 	.word	0x0800768f
 8007664:	0800768f 	.word	0x0800768f
 8007668:	0800768f 	.word	0x0800768f
 800766c:	08007687 	.word	0x08007687
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007670:	f7fe fca6 	bl	8005fc0 <HAL_RCC_GetPCLK1Freq>
 8007674:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8007676:	e00e      	b.n	8007696 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007678:	4ba6      	ldr	r3, [pc, #664]	; (8007914 <UART_SetConfig+0x5d0>)
 800767a:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800767c:	e00b      	b.n	8007696 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800767e:	f7fe fc07 	bl	8005e90 <HAL_RCC_GetSysClockFreq>
 8007682:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8007684:	e007      	b.n	8007696 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768a:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800768c:	e003      	b.n	8007696 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8007694:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 81e5 	beq.w	8007a68 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800769e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	4613      	mov	r3, r2
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	441a      	add	r2, r3
 80076a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d305      	bcc.n	80076ba <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d903      	bls.n	80076c2 <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80076c0:	e1d2      	b.n	8007a68 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 80076c2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80076c6:	2b08      	cmp	r3, #8
 80076c8:	f200 80b0 	bhi.w	800782c <UART_SetConfig+0x4e8>
 80076cc:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <UART_SetConfig+0x390>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	080076f9 	.word	0x080076f9
 80076d8:	0800782d 	.word	0x0800782d
 80076dc:	08007759 	.word	0x08007759
 80076e0:	0800782d 	.word	0x0800782d
 80076e4:	08007799 	.word	0x08007799
 80076e8:	0800782d 	.word	0x0800782d
 80076ec:	0800782d 	.word	0x0800782d
 80076f0:	0800782d 	.word	0x0800782d
 80076f4:	080077f5 	.word	0x080077f5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80076f8:	f7fe fc62 	bl	8005fc0 <HAL_RCC_GetPCLK1Freq>
 80076fc:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007700:	2200      	movs	r2, #0
 8007702:	4698      	mov	r8, r3
 8007704:	4691      	mov	r9, r2
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	f04f 0300 	mov.w	r3, #0
 800770e:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8007712:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8007716:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800771a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800771c:	6849      	ldr	r1, [r1, #4]
 800771e:	0849      	lsrs	r1, r1, #1
 8007720:	2000      	movs	r0, #0
 8007722:	6539      	str	r1, [r7, #80]	; 0x50
 8007724:	6578      	str	r0, [r7, #84]	; 0x54
 8007726:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800772a:	4621      	mov	r1, r4
 800772c:	1851      	adds	r1, r2, r1
 800772e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007730:	4629      	mov	r1, r5
 8007732:	eb43 0101 	adc.w	r1, r3, r1
 8007736:	64f9      	str	r1, [r7, #76]	; 0x4c
 8007738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	643b      	str	r3, [r7, #64]	; 0x40
 8007740:	647a      	str	r2, [r7, #68]	; 0x44
 8007742:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007746:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800774a:	f7f9 fa7d 	bl	8000c48 <__aeabi_uldivmod>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4613      	mov	r3, r2
 8007754:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8007756:	e06d      	b.n	8007834 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	085b      	lsrs	r3, r3, #1
 800775e:	2200      	movs	r2, #0
 8007760:	63bb      	str	r3, [r7, #56]	; 0x38
 8007762:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007764:	4b6c      	ldr	r3, [pc, #432]	; (8007918 <UART_SetConfig+0x5d4>)
 8007766:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800776a:	4602      	mov	r2, r0
 800776c:	18d3      	adds	r3, r2, r3
 800776e:	633b      	str	r3, [r7, #48]	; 0x30
 8007770:	460b      	mov	r3, r1
 8007772:	f143 0300 	adc.w	r3, r3, #0
 8007776:	637b      	str	r3, [r7, #52]	; 0x34
 8007778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007780:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007786:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800778a:	f7f9 fa5d 	bl	8000c48 <__aeabi_uldivmod>
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	4613      	mov	r3, r2
 8007794:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8007796:	e04d      	b.n	8007834 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007798:	f7fe fb7a 	bl	8005e90 <HAL_RCC_GetSysClockFreq>
 800779c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800779e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077a0:	2200      	movs	r2, #0
 80077a2:	461c      	mov	r4, r3
 80077a4:	4615      	mov	r5, r2
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	f04f 0300 	mov.w	r3, #0
 80077ae:	022b      	lsls	r3, r5, #8
 80077b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80077b4:	0222      	lsls	r2, r4, #8
 80077b6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80077b8:	6849      	ldr	r1, [r1, #4]
 80077ba:	0849      	lsrs	r1, r1, #1
 80077bc:	2000      	movs	r0, #0
 80077be:	6239      	str	r1, [r7, #32]
 80077c0:	6278      	str	r0, [r7, #36]	; 0x24
 80077c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80077c6:	4621      	mov	r1, r4
 80077c8:	1851      	adds	r1, r2, r1
 80077ca:	61b9      	str	r1, [r7, #24]
 80077cc:	4629      	mov	r1, r5
 80077ce:	eb43 0101 	adc.w	r1, r3, r1
 80077d2:	61f9      	str	r1, [r7, #28]
 80077d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	613b      	str	r3, [r7, #16]
 80077dc:	617a      	str	r2, [r7, #20]
 80077de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80077e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80077e6:	f7f9 fa2f 	bl	8000c48 <__aeabi_uldivmod>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	4613      	mov	r3, r2
 80077f0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80077f2:	e01f      	b.n	8007834 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80077f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	085b      	lsrs	r3, r3, #1
 80077fa:	2200      	movs	r2, #0
 80077fc:	469a      	mov	sl, r3
 80077fe:	4693      	mov	fp, r2
 8007800:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8007804:	60bb      	str	r3, [r7, #8]
 8007806:	f14b 0300 	adc.w	r3, fp, #0
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	603b      	str	r3, [r7, #0]
 8007814:	607a      	str	r2, [r7, #4]
 8007816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800781a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800781e:	f7f9 fa13 	bl	8000c48 <__aeabi_uldivmod>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4613      	mov	r3, r2
 8007828:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800782a:	e003      	b.n	8007834 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 8007832:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800783a:	d308      	bcc.n	800784e <UART_SetConfig+0x50a>
 800783c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800783e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007842:	d204      	bcs.n	800784e <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 8007844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800784a:	60da      	str	r2, [r3, #12]
 800784c:	e10c      	b.n	8007a68 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007854:	e108      	b.n	8007a68 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800785e:	f040 808f 	bne.w	8007980 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 8007862:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007866:	2b08      	cmp	r3, #8
 8007868:	d864      	bhi.n	8007934 <UART_SetConfig+0x5f0>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <UART_SetConfig+0x52c>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	08007895 	.word	0x08007895
 8007874:	080078b5 	.word	0x080078b5
 8007878:	080078d5 	.word	0x080078d5
 800787c:	08007935 	.word	0x08007935
 8007880:	080078f1 	.word	0x080078f1
 8007884:	08007935 	.word	0x08007935
 8007888:	08007935 	.word	0x08007935
 800788c:	08007935 	.word	0x08007935
 8007890:	0800791d 	.word	0x0800791d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007894:	f7fe fb94 	bl	8005fc0 <HAL_RCC_GetPCLK1Freq>
 8007898:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800789a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800789c:	005a      	lsls	r2, r3, #1
 800789e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	441a      	add	r2, r3
 80078a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80078b2:	e043      	b.n	800793c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078b4:	f7fe fb9a 	bl	8005fec <HAL_RCC_GetPCLK2Freq>
 80078b8:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078bc:	005a      	lsls	r2, r3, #1
 80078be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	085b      	lsrs	r3, r3, #1
 80078c4:	441a      	add	r2, r3
 80078c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80078d2:	e033      	b.n	800793c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80078d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	085b      	lsrs	r3, r3, #1
 80078da:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80078de:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80078e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078e4:	6852      	ldr	r2, [r2, #4]
 80078e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80078ee:	e025      	b.n	800793c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078f0:	f7fe face 	bl	8005e90 <HAL_RCC_GetSysClockFreq>
 80078f4:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078f8:	005a      	lsls	r2, r3, #1
 80078fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	085b      	lsrs	r3, r3, #1
 8007900:	441a      	add	r2, r3
 8007902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	fbb2 f3f3 	udiv	r3, r2, r3
 800790a:	b29b      	uxth	r3, r3
 800790c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800790e:	e015      	b.n	800793c <UART_SetConfig+0x5f8>
 8007910:	40008000 	.word	0x40008000
 8007914:	00f42400 	.word	0x00f42400
 8007918:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800791c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	085b      	lsrs	r3, r3, #1
 8007922:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	fbb2 f3f3 	udiv	r3, r2, r3
 800792e:	b29b      	uxth	r3, r3
 8007930:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8007932:	e003      	b.n	800793c <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 800793a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800793c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800793e:	2b0f      	cmp	r3, #15
 8007940:	d91a      	bls.n	8007978 <UART_SetConfig+0x634>
 8007942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007948:	d216      	bcs.n	8007978 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800794a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800794c:	b29b      	uxth	r3, r3
 800794e:	f023 030f 	bic.w	r3, r3, #15
 8007952:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007958:	085b      	lsrs	r3, r3, #1
 800795a:	b29b      	uxth	r3, r3
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	b29a      	uxth	r2, r3
 8007962:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007966:	4313      	orrs	r3, r2
 8007968:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 800796c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8007974:	60da      	str	r2, [r3, #12]
 8007976:	e077      	b.n	8007a68 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800797e:	e073      	b.n	8007a68 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8007980:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007984:	2b08      	cmp	r3, #8
 8007986:	d85c      	bhi.n	8007a42 <UART_SetConfig+0x6fe>
 8007988:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <UART_SetConfig+0x64c>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079d3 	.word	0x080079d3
 8007998:	080079f1 	.word	0x080079f1
 800799c:	08007a43 	.word	0x08007a43
 80079a0:	08007a0d 	.word	0x08007a0d
 80079a4:	08007a43 	.word	0x08007a43
 80079a8:	08007a43 	.word	0x08007a43
 80079ac:	08007a43 	.word	0x08007a43
 80079b0:	08007a2b 	.word	0x08007a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079b4:	f7fe fb04 	bl	8005fc0 <HAL_RCC_GetPCLK1Freq>
 80079b8:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	085a      	lsrs	r2, r3, #1
 80079c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079c2:	441a      	add	r2, r3
 80079c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80079d0:	e03b      	b.n	8007a4a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079d2:	f7fe fb0b 	bl	8005fec <HAL_RCC_GetPCLK2Freq>
 80079d6:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	085a      	lsrs	r2, r3, #1
 80079de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079e0:	441a      	add	r2, r3
 80079e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80079ee:	e02c      	b.n	8007a4a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80079f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	085b      	lsrs	r3, r3, #1
 80079f6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80079fa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80079fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a00:	6852      	ldr	r2, [r2, #4]
 8007a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a0a:	e01e      	b.n	8007a4a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a0c:	f7fe fa40 	bl	8005e90 <HAL_RCC_GetSysClockFreq>
 8007a10:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	085a      	lsrs	r2, r3, #1
 8007a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a1a:	441a      	add	r2, r3
 8007a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a28:	e00f      	b.n	8007a4a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	085b      	lsrs	r3, r3, #1
 8007a30:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8007a40:	e003      	b.n	8007a4a <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8007a48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a4c:	2b0f      	cmp	r3, #15
 8007a4e:	d908      	bls.n	8007a62 <UART_SetConfig+0x71e>
 8007a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a56:	d204      	bcs.n	8007a62 <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 8007a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007a5e:	60da      	str	r2, [r3, #12]
 8007a60:	e002      	b.n	8007a68 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a70:	2200      	movs	r2, #0
 8007a72:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007a74:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3780      	adds	r7, #128	; 0x80
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a82:	bf00      	nop

08007a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	f003 0304 	and.w	r3, r3, #4
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00a      	beq.n	8007af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00a      	beq.n	8007b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	f003 0310 	and.w	r3, r3, #16
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00a      	beq.n	8007b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00a      	beq.n	8007b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	430a      	orrs	r2, r1
 8007b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01a      	beq.n	8007b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b82:	d10a      	bne.n	8007b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00a      	beq.n	8007bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	605a      	str	r2, [r3, #4]
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af02      	add	r7, sp, #8
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007bd6:	f7fc ff87 	bl	8004ae8 <HAL_GetTick>
 8007bda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d10e      	bne.n	8007c08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f82a 	bl	8007c52 <UART_WaitOnFlagUntilTimeout>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e020      	b.n	8007c4a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0304 	and.w	r3, r3, #4
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d10e      	bne.n	8007c34 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f814 	bl	8007c52 <UART_WaitOnFlagUntilTimeout>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e00a      	b.n	8007c4a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	603b      	str	r3, [r7, #0]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c62:	e05d      	b.n	8007d20 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6a:	d059      	beq.n	8007d20 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c6c:	f7fc ff3c 	bl	8004ae8 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d302      	bcc.n	8007c82 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d11b      	bne.n	8007cba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c90:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0201 	bic.w	r2, r2, #1
 8007ca0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2220      	movs	r2, #32
 8007cac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e042      	b.n	8007d40 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0304 	and.w	r3, r3, #4
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d02b      	beq.n	8007d20 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cd6:	d123      	bne.n	8007d20 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ce0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007cf0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f022 0201 	bic.w	r2, r2, #1
 8007d00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2220      	movs	r2, #32
 8007d06:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2220      	movs	r2, #32
 8007d12:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e00f      	b.n	8007d40 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	69da      	ldr	r2, [r3, #28]
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	bf0c      	ite	eq
 8007d30:	2301      	moveq	r3, #1
 8007d32:	2300      	movne	r3, #0
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	461a      	mov	r2, r3
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d092      	beq.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <findslot>:
 8007d48:	4b0a      	ldr	r3, [pc, #40]	; (8007d74 <findslot+0x2c>)
 8007d4a:	b510      	push	{r4, lr}
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	6818      	ldr	r0, [r3, #0]
 8007d50:	b118      	cbz	r0, 8007d5a <findslot+0x12>
 8007d52:	6983      	ldr	r3, [r0, #24]
 8007d54:	b90b      	cbnz	r3, 8007d5a <findslot+0x12>
 8007d56:	f000 faf9 	bl	800834c <__sinit>
 8007d5a:	2c13      	cmp	r4, #19
 8007d5c:	d807      	bhi.n	8007d6e <findslot+0x26>
 8007d5e:	4806      	ldr	r0, [pc, #24]	; (8007d78 <findslot+0x30>)
 8007d60:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007d64:	3201      	adds	r2, #1
 8007d66:	d002      	beq.n	8007d6e <findslot+0x26>
 8007d68:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007d6c:	bd10      	pop	{r4, pc}
 8007d6e:	2000      	movs	r0, #0
 8007d70:	e7fc      	b.n	8007d6c <findslot+0x24>
 8007d72:	bf00      	nop
 8007d74:	20000104 	.word	0x20000104
 8007d78:	20000bd4 	.word	0x20000bd4

08007d7c <error>:
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	4604      	mov	r4, r0
 8007d80:	f000 fa86 	bl	8008290 <__errno>
 8007d84:	2613      	movs	r6, #19
 8007d86:	4605      	mov	r5, r0
 8007d88:	2700      	movs	r7, #0
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	beab      	bkpt	0x00ab
 8007d90:	4606      	mov	r6, r0
 8007d92:	602e      	str	r6, [r5, #0]
 8007d94:	4620      	mov	r0, r4
 8007d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d98 <checkerror>:
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d101      	bne.n	8007da0 <checkerror+0x8>
 8007d9c:	f7ff bfee 	b.w	8007d7c <error>
 8007da0:	4770      	bx	lr

08007da2 <_swiread>:
 8007da2:	b530      	push	{r4, r5, lr}
 8007da4:	b085      	sub	sp, #20
 8007da6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007daa:	9203      	str	r2, [sp, #12]
 8007dac:	2406      	movs	r4, #6
 8007dae:	ad01      	add	r5, sp, #4
 8007db0:	4620      	mov	r0, r4
 8007db2:	4629      	mov	r1, r5
 8007db4:	beab      	bkpt	0x00ab
 8007db6:	4604      	mov	r4, r0
 8007db8:	4620      	mov	r0, r4
 8007dba:	f7ff ffed 	bl	8007d98 <checkerror>
 8007dbe:	b005      	add	sp, #20
 8007dc0:	bd30      	pop	{r4, r5, pc}

08007dc2 <_read>:
 8007dc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dc4:	4615      	mov	r5, r2
 8007dc6:	9101      	str	r1, [sp, #4]
 8007dc8:	f7ff ffbe 	bl	8007d48 <findslot>
 8007dcc:	9901      	ldr	r1, [sp, #4]
 8007dce:	4604      	mov	r4, r0
 8007dd0:	b938      	cbnz	r0, 8007de2 <_read+0x20>
 8007dd2:	f000 fa5d 	bl	8008290 <__errno>
 8007dd6:	2309      	movs	r3, #9
 8007dd8:	6003      	str	r3, [r0, #0]
 8007dda:	f04f 30ff 	mov.w	r0, #4294967295
 8007dde:	b003      	add	sp, #12
 8007de0:	bd30      	pop	{r4, r5, pc}
 8007de2:	6800      	ldr	r0, [r0, #0]
 8007de4:	462a      	mov	r2, r5
 8007de6:	f7ff ffdc 	bl	8007da2 <_swiread>
 8007dea:	1c43      	adds	r3, r0, #1
 8007dec:	d0f7      	beq.n	8007dde <_read+0x1c>
 8007dee:	6863      	ldr	r3, [r4, #4]
 8007df0:	1a2a      	subs	r2, r5, r0
 8007df2:	4413      	add	r3, r2
 8007df4:	6063      	str	r3, [r4, #4]
 8007df6:	4610      	mov	r0, r2
 8007df8:	e7f1      	b.n	8007dde <_read+0x1c>

08007dfa <_swilseek>:
 8007dfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	4616      	mov	r6, r2
 8007e00:	f7ff ffa2 	bl	8007d48 <findslot>
 8007e04:	4605      	mov	r5, r0
 8007e06:	b940      	cbnz	r0, 8007e1a <_swilseek+0x20>
 8007e08:	f000 fa42 	bl	8008290 <__errno>
 8007e0c:	2309      	movs	r3, #9
 8007e0e:	6003      	str	r3, [r0, #0]
 8007e10:	f04f 34ff 	mov.w	r4, #4294967295
 8007e14:	4620      	mov	r0, r4
 8007e16:	b003      	add	sp, #12
 8007e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e1a:	2e02      	cmp	r6, #2
 8007e1c:	d903      	bls.n	8007e26 <_swilseek+0x2c>
 8007e1e:	f000 fa37 	bl	8008290 <__errno>
 8007e22:	2316      	movs	r3, #22
 8007e24:	e7f3      	b.n	8007e0e <_swilseek+0x14>
 8007e26:	2e01      	cmp	r6, #1
 8007e28:	d112      	bne.n	8007e50 <_swilseek+0x56>
 8007e2a:	6843      	ldr	r3, [r0, #4]
 8007e2c:	18e4      	adds	r4, r4, r3
 8007e2e:	d4f6      	bmi.n	8007e1e <_swilseek+0x24>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	260a      	movs	r6, #10
 8007e34:	e9cd 3400 	strd	r3, r4, [sp]
 8007e38:	466f      	mov	r7, sp
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	beab      	bkpt	0x00ab
 8007e40:	4606      	mov	r6, r0
 8007e42:	4630      	mov	r0, r6
 8007e44:	f7ff ffa8 	bl	8007d98 <checkerror>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	dbe1      	blt.n	8007e10 <_swilseek+0x16>
 8007e4c:	606c      	str	r4, [r5, #4]
 8007e4e:	e7e1      	b.n	8007e14 <_swilseek+0x1a>
 8007e50:	2e02      	cmp	r6, #2
 8007e52:	d1ed      	bne.n	8007e30 <_swilseek+0x36>
 8007e54:	6803      	ldr	r3, [r0, #0]
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	260c      	movs	r6, #12
 8007e5a:	466f      	mov	r7, sp
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	4639      	mov	r1, r7
 8007e60:	beab      	bkpt	0x00ab
 8007e62:	4606      	mov	r6, r0
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7ff ff97 	bl	8007d98 <checkerror>
 8007e6a:	1c43      	adds	r3, r0, #1
 8007e6c:	d0d0      	beq.n	8007e10 <_swilseek+0x16>
 8007e6e:	4404      	add	r4, r0
 8007e70:	e7de      	b.n	8007e30 <_swilseek+0x36>

08007e72 <_lseek>:
 8007e72:	f7ff bfc2 	b.w	8007dfa <_swilseek>

08007e76 <_swiwrite>:
 8007e76:	b530      	push	{r4, r5, lr}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007e7e:	9203      	str	r2, [sp, #12]
 8007e80:	2405      	movs	r4, #5
 8007e82:	ad01      	add	r5, sp, #4
 8007e84:	4620      	mov	r0, r4
 8007e86:	4629      	mov	r1, r5
 8007e88:	beab      	bkpt	0x00ab
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f7ff ff83 	bl	8007d98 <checkerror>
 8007e92:	b005      	add	sp, #20
 8007e94:	bd30      	pop	{r4, r5, pc}

08007e96 <_write>:
 8007e96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e98:	4615      	mov	r5, r2
 8007e9a:	9101      	str	r1, [sp, #4]
 8007e9c:	f7ff ff54 	bl	8007d48 <findslot>
 8007ea0:	9901      	ldr	r1, [sp, #4]
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	b930      	cbnz	r0, 8007eb4 <_write+0x1e>
 8007ea6:	f000 f9f3 	bl	8008290 <__errno>
 8007eaa:	2309      	movs	r3, #9
 8007eac:	6003      	str	r3, [r0, #0]
 8007eae:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb2:	e012      	b.n	8007eda <_write+0x44>
 8007eb4:	6800      	ldr	r0, [r0, #0]
 8007eb6:	462a      	mov	r2, r5
 8007eb8:	f7ff ffdd 	bl	8007e76 <_swiwrite>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	dbf6      	blt.n	8007eae <_write+0x18>
 8007ec0:	6862      	ldr	r2, [r4, #4]
 8007ec2:	1a2b      	subs	r3, r5, r0
 8007ec4:	441a      	add	r2, r3
 8007ec6:	42a8      	cmp	r0, r5
 8007ec8:	6062      	str	r2, [r4, #4]
 8007eca:	d105      	bne.n	8007ed8 <_write+0x42>
 8007ecc:	2000      	movs	r0, #0
 8007ece:	b003      	add	sp, #12
 8007ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ed4:	f7ff bf52 	b.w	8007d7c <error>
 8007ed8:	4618      	mov	r0, r3
 8007eda:	b003      	add	sp, #12
 8007edc:	bd30      	pop	{r4, r5, pc}

08007ede <_swiclose>:
 8007ede:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ee0:	2402      	movs	r4, #2
 8007ee2:	9001      	str	r0, [sp, #4]
 8007ee4:	ad01      	add	r5, sp, #4
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	4629      	mov	r1, r5
 8007eea:	beab      	bkpt	0x00ab
 8007eec:	4604      	mov	r4, r0
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f7ff ff52 	bl	8007d98 <checkerror>
 8007ef4:	b003      	add	sp, #12
 8007ef6:	bd30      	pop	{r4, r5, pc}

08007ef8 <_close>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4605      	mov	r5, r0
 8007efc:	f7ff ff24 	bl	8007d48 <findslot>
 8007f00:	4604      	mov	r4, r0
 8007f02:	b930      	cbnz	r0, 8007f12 <_close+0x1a>
 8007f04:	f000 f9c4 	bl	8008290 <__errno>
 8007f08:	2309      	movs	r3, #9
 8007f0a:	6003      	str	r3, [r0, #0]
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f10:	bd38      	pop	{r3, r4, r5, pc}
 8007f12:	3d01      	subs	r5, #1
 8007f14:	2d01      	cmp	r5, #1
 8007f16:	d809      	bhi.n	8007f2c <_close+0x34>
 8007f18:	4b09      	ldr	r3, [pc, #36]	; (8007f40 <_close+0x48>)
 8007f1a:	689a      	ldr	r2, [r3, #8]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d104      	bne.n	8007f2c <_close+0x34>
 8007f22:	f04f 33ff 	mov.w	r3, #4294967295
 8007f26:	6003      	str	r3, [r0, #0]
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e7f1      	b.n	8007f10 <_close+0x18>
 8007f2c:	6820      	ldr	r0, [r4, #0]
 8007f2e:	f7ff ffd6 	bl	8007ede <_swiclose>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d1ec      	bne.n	8007f10 <_close+0x18>
 8007f36:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3a:	6023      	str	r3, [r4, #0]
 8007f3c:	e7e8      	b.n	8007f10 <_close+0x18>
 8007f3e:	bf00      	nop
 8007f40:	20000bd4 	.word	0x20000bd4

08007f44 <_getpid>:
 8007f44:	2001      	movs	r0, #1
 8007f46:	4770      	bx	lr

08007f48 <_swistat>:
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	f7ff fefc 	bl	8007d48 <findslot>
 8007f50:	4605      	mov	r5, r0
 8007f52:	b930      	cbnz	r0, 8007f62 <_swistat+0x1a>
 8007f54:	f000 f99c 	bl	8008290 <__errno>
 8007f58:	2309      	movs	r3, #9
 8007f5a:	6003      	str	r3, [r0, #0]
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f60:	bd70      	pop	{r4, r5, r6, pc}
 8007f62:	6863      	ldr	r3, [r4, #4]
 8007f64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f68:	6063      	str	r3, [r4, #4]
 8007f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f6e:	64a3      	str	r3, [r4, #72]	; 0x48
 8007f70:	260c      	movs	r6, #12
 8007f72:	4630      	mov	r0, r6
 8007f74:	4629      	mov	r1, r5
 8007f76:	beab      	bkpt	0x00ab
 8007f78:	4605      	mov	r5, r0
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f7ff ff0c 	bl	8007d98 <checkerror>
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	bf1c      	itt	ne
 8007f84:	6120      	strne	r0, [r4, #16]
 8007f86:	2000      	movne	r0, #0
 8007f88:	e7ea      	b.n	8007f60 <_swistat+0x18>

08007f8a <_fstat>:
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	2100      	movs	r1, #0
 8007f90:	4604      	mov	r4, r0
 8007f92:	2258      	movs	r2, #88	; 0x58
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 faac 	bl	80084f2 <memset>
 8007f9a:	4601      	mov	r1, r0
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa2:	f7ff bfd1 	b.w	8007f48 <_swistat>

08007fa6 <_stat>:
 8007fa6:	b538      	push	{r3, r4, r5, lr}
 8007fa8:	460d      	mov	r5, r1
 8007faa:	4604      	mov	r4, r0
 8007fac:	2258      	movs	r2, #88	; 0x58
 8007fae:	2100      	movs	r1, #0
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f000 fa9e 	bl	80084f2 <memset>
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	2100      	movs	r1, #0
 8007fba:	f000 f811 	bl	8007fe0 <_swiopen>
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	d00b      	beq.n	8007fdc <_stat+0x36>
 8007fc4:	686b      	ldr	r3, [r5, #4]
 8007fc6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007fca:	606b      	str	r3, [r5, #4]
 8007fcc:	4629      	mov	r1, r5
 8007fce:	f7ff ffbb 	bl	8007f48 <_swistat>
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f7ff ff8f 	bl	8007ef8 <_close>
 8007fda:	462c      	mov	r4, r5
 8007fdc:	4620      	mov	r0, r4
 8007fde:	bd38      	pop	{r3, r4, r5, pc}

08007fe0 <_swiopen>:
 8007fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fe4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8008090 <_swiopen+0xb0>
 8007fe8:	b097      	sub	sp, #92	; 0x5c
 8007fea:	4607      	mov	r7, r0
 8007fec:	460e      	mov	r6, r1
 8007fee:	2500      	movs	r5, #0
 8007ff0:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8007ff4:	1c61      	adds	r1, r4, #1
 8007ff6:	d037      	beq.n	8008068 <_swiopen+0x88>
 8007ff8:	3501      	adds	r5, #1
 8007ffa:	2d14      	cmp	r5, #20
 8007ffc:	d1f8      	bne.n	8007ff0 <_swiopen+0x10>
 8007ffe:	f000 f947 	bl	8008290 <__errno>
 8008002:	2318      	movs	r3, #24
 8008004:	6003      	str	r3, [r0, #0]
 8008006:	f04f 34ff 	mov.w	r4, #4294967295
 800800a:	e03d      	b.n	8008088 <_swiopen+0xa8>
 800800c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8008010:	f240 6301 	movw	r3, #1537	; 0x601
 8008014:	07b2      	lsls	r2, r6, #30
 8008016:	bf48      	it	mi
 8008018:	f044 0402 	orrmi.w	r4, r4, #2
 800801c:	421e      	tst	r6, r3
 800801e:	bf18      	it	ne
 8008020:	f044 0404 	orrne.w	r4, r4, #4
 8008024:	0733      	lsls	r3, r6, #28
 8008026:	bf48      	it	mi
 8008028:	f024 0404 	bicmi.w	r4, r4, #4
 800802c:	4638      	mov	r0, r7
 800802e:	bf48      	it	mi
 8008030:	f044 0408 	orrmi.w	r4, r4, #8
 8008034:	9700      	str	r7, [sp, #0]
 8008036:	f7f8 f8cb 	bl	80001d0 <strlen>
 800803a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800803e:	2401      	movs	r4, #1
 8008040:	4620      	mov	r0, r4
 8008042:	4649      	mov	r1, r9
 8008044:	beab      	bkpt	0x00ab
 8008046:	4604      	mov	r4, r0
 8008048:	2c00      	cmp	r4, #0
 800804a:	db08      	blt.n	800805e <_swiopen+0x7e>
 800804c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8008050:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8008054:	2300      	movs	r3, #0
 8008056:	f8c8 3004 	str.w	r3, [r8, #4]
 800805a:	462c      	mov	r4, r5
 800805c:	e014      	b.n	8008088 <_swiopen+0xa8>
 800805e:	4620      	mov	r0, r4
 8008060:	f7ff fe8c 	bl	8007d7c <error>
 8008064:	4604      	mov	r4, r0
 8008066:	e00f      	b.n	8008088 <_swiopen+0xa8>
 8008068:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800806c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008070:	46e9      	mov	r9, sp
 8008072:	d1cb      	bne.n	800800c <_swiopen+0x2c>
 8008074:	4649      	mov	r1, r9
 8008076:	4638      	mov	r0, r7
 8008078:	f7ff ff95 	bl	8007fa6 <_stat>
 800807c:	3001      	adds	r0, #1
 800807e:	d0c5      	beq.n	800800c <_swiopen+0x2c>
 8008080:	f000 f906 	bl	8008290 <__errno>
 8008084:	2311      	movs	r3, #17
 8008086:	6003      	str	r3, [r0, #0]
 8008088:	4620      	mov	r0, r4
 800808a:	b017      	add	sp, #92	; 0x5c
 800808c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008090:	20000bd4 	.word	0x20000bd4

08008094 <_get_semihosting_exts>:
 8008094:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008098:	4606      	mov	r6, r0
 800809a:	460f      	mov	r7, r1
 800809c:	482a      	ldr	r0, [pc, #168]	; (8008148 <_get_semihosting_exts+0xb4>)
 800809e:	2100      	movs	r1, #0
 80080a0:	4615      	mov	r5, r2
 80080a2:	f7ff ff9d 	bl	8007fe0 <_swiopen>
 80080a6:	462a      	mov	r2, r5
 80080a8:	4604      	mov	r4, r0
 80080aa:	2100      	movs	r1, #0
 80080ac:	4630      	mov	r0, r6
 80080ae:	f000 fa20 	bl	80084f2 <memset>
 80080b2:	1c63      	adds	r3, r4, #1
 80080b4:	d016      	beq.n	80080e4 <_get_semihosting_exts+0x50>
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7ff fe46 	bl	8007d48 <findslot>
 80080bc:	f04f 090c 	mov.w	r9, #12
 80080c0:	4680      	mov	r8, r0
 80080c2:	4648      	mov	r0, r9
 80080c4:	4641      	mov	r1, r8
 80080c6:	beab      	bkpt	0x00ab
 80080c8:	4680      	mov	r8, r0
 80080ca:	4640      	mov	r0, r8
 80080cc:	f7ff fe64 	bl	8007d98 <checkerror>
 80080d0:	2803      	cmp	r0, #3
 80080d2:	dd02      	ble.n	80080da <_get_semihosting_exts+0x46>
 80080d4:	1ec3      	subs	r3, r0, #3
 80080d6:	42ab      	cmp	r3, r5
 80080d8:	dc08      	bgt.n	80080ec <_get_semihosting_exts+0x58>
 80080da:	4620      	mov	r0, r4
 80080dc:	f7ff ff0c 	bl	8007ef8 <_close>
 80080e0:	f04f 34ff 	mov.w	r4, #4294967295
 80080e4:	4620      	mov	r0, r4
 80080e6:	b003      	add	sp, #12
 80080e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080ec:	2204      	movs	r2, #4
 80080ee:	eb0d 0102 	add.w	r1, sp, r2
 80080f2:	4620      	mov	r0, r4
 80080f4:	f7ff fe65 	bl	8007dc2 <_read>
 80080f8:	2803      	cmp	r0, #3
 80080fa:	ddee      	ble.n	80080da <_get_semihosting_exts+0x46>
 80080fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008100:	2b53      	cmp	r3, #83	; 0x53
 8008102:	d1ea      	bne.n	80080da <_get_semihosting_exts+0x46>
 8008104:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008108:	2b48      	cmp	r3, #72	; 0x48
 800810a:	d1e6      	bne.n	80080da <_get_semihosting_exts+0x46>
 800810c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008110:	2b46      	cmp	r3, #70	; 0x46
 8008112:	d1e2      	bne.n	80080da <_get_semihosting_exts+0x46>
 8008114:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008118:	2b42      	cmp	r3, #66	; 0x42
 800811a:	d1de      	bne.n	80080da <_get_semihosting_exts+0x46>
 800811c:	2201      	movs	r2, #1
 800811e:	4639      	mov	r1, r7
 8008120:	4620      	mov	r0, r4
 8008122:	f7ff fe6a 	bl	8007dfa <_swilseek>
 8008126:	2800      	cmp	r0, #0
 8008128:	dbd7      	blt.n	80080da <_get_semihosting_exts+0x46>
 800812a:	462a      	mov	r2, r5
 800812c:	4631      	mov	r1, r6
 800812e:	4620      	mov	r0, r4
 8008130:	f7ff fe47 	bl	8007dc2 <_read>
 8008134:	4605      	mov	r5, r0
 8008136:	4620      	mov	r0, r4
 8008138:	f7ff fede 	bl	8007ef8 <_close>
 800813c:	4628      	mov	r0, r5
 800813e:	f7ff fe2b 	bl	8007d98 <checkerror>
 8008142:	4604      	mov	r4, r0
 8008144:	e7ce      	b.n	80080e4 <_get_semihosting_exts+0x50>
 8008146:	bf00      	nop
 8008148:	0800bd00 	.word	0x0800bd00

0800814c <initialise_semihosting_exts>:
 800814c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800814e:	4d0a      	ldr	r5, [pc, #40]	; (8008178 <initialise_semihosting_exts+0x2c>)
 8008150:	4c0a      	ldr	r4, [pc, #40]	; (800817c <initialise_semihosting_exts+0x30>)
 8008152:	2100      	movs	r1, #0
 8008154:	2201      	movs	r2, #1
 8008156:	a801      	add	r0, sp, #4
 8008158:	6029      	str	r1, [r5, #0]
 800815a:	6022      	str	r2, [r4, #0]
 800815c:	f7ff ff9a 	bl	8008094 <_get_semihosting_exts>
 8008160:	2800      	cmp	r0, #0
 8008162:	dd07      	ble.n	8008174 <initialise_semihosting_exts+0x28>
 8008164:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008168:	f003 0201 	and.w	r2, r3, #1
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	602a      	str	r2, [r5, #0]
 8008172:	6023      	str	r3, [r4, #0]
 8008174:	b003      	add	sp, #12
 8008176:	bd30      	pop	{r4, r5, pc}
 8008178:	200000fc 	.word	0x200000fc
 800817c:	20000100 	.word	0x20000100

08008180 <_has_ext_stdout_stderr>:
 8008180:	b510      	push	{r4, lr}
 8008182:	4c04      	ldr	r4, [pc, #16]	; (8008194 <_has_ext_stdout_stderr+0x14>)
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	da01      	bge.n	800818e <_has_ext_stdout_stderr+0xe>
 800818a:	f7ff ffdf 	bl	800814c <initialise_semihosting_exts>
 800818e:	6820      	ldr	r0, [r4, #0]
 8008190:	bd10      	pop	{r4, pc}
 8008192:	bf00      	nop
 8008194:	20000100 	.word	0x20000100

08008198 <initialise_monitor_handles>:
 8008198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819c:	b085      	sub	sp, #20
 800819e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8008250 <initialise_monitor_handles+0xb8>
 80081a2:	f8cd 9004 	str.w	r9, [sp, #4]
 80081a6:	2303      	movs	r3, #3
 80081a8:	2400      	movs	r4, #0
 80081aa:	9303      	str	r3, [sp, #12]
 80081ac:	af01      	add	r7, sp, #4
 80081ae:	9402      	str	r4, [sp, #8]
 80081b0:	2501      	movs	r5, #1
 80081b2:	4628      	mov	r0, r5
 80081b4:	4639      	mov	r1, r7
 80081b6:	beab      	bkpt	0x00ab
 80081b8:	4605      	mov	r5, r0
 80081ba:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008254 <initialise_monitor_handles+0xbc>
 80081be:	4623      	mov	r3, r4
 80081c0:	4c20      	ldr	r4, [pc, #128]	; (8008244 <initialise_monitor_handles+0xac>)
 80081c2:	f8c8 5000 	str.w	r5, [r8]
 80081c6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ca:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80081ce:	3301      	adds	r3, #1
 80081d0:	2b14      	cmp	r3, #20
 80081d2:	d1fa      	bne.n	80081ca <initialise_monitor_handles+0x32>
 80081d4:	f7ff ffd4 	bl	8008180 <_has_ext_stdout_stderr>
 80081d8:	4d1b      	ldr	r5, [pc, #108]	; (8008248 <initialise_monitor_handles+0xb0>)
 80081da:	b1d0      	cbz	r0, 8008212 <initialise_monitor_handles+0x7a>
 80081dc:	f04f 0a03 	mov.w	sl, #3
 80081e0:	2304      	movs	r3, #4
 80081e2:	f8cd 9004 	str.w	r9, [sp, #4]
 80081e6:	2601      	movs	r6, #1
 80081e8:	f8cd a00c 	str.w	sl, [sp, #12]
 80081ec:	9302      	str	r3, [sp, #8]
 80081ee:	4630      	mov	r0, r6
 80081f0:	4639      	mov	r1, r7
 80081f2:	beab      	bkpt	0x00ab
 80081f4:	4683      	mov	fp, r0
 80081f6:	4b15      	ldr	r3, [pc, #84]	; (800824c <initialise_monitor_handles+0xb4>)
 80081f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80081fc:	f8c3 b000 	str.w	fp, [r3]
 8008200:	2308      	movs	r3, #8
 8008202:	f8cd a00c 	str.w	sl, [sp, #12]
 8008206:	9302      	str	r3, [sp, #8]
 8008208:	4630      	mov	r0, r6
 800820a:	4639      	mov	r1, r7
 800820c:	beab      	bkpt	0x00ab
 800820e:	4606      	mov	r6, r0
 8008210:	602e      	str	r6, [r5, #0]
 8008212:	682b      	ldr	r3, [r5, #0]
 8008214:	3301      	adds	r3, #1
 8008216:	bf02      	ittt	eq
 8008218:	4b0c      	ldreq	r3, [pc, #48]	; (800824c <initialise_monitor_handles+0xb4>)
 800821a:	681b      	ldreq	r3, [r3, #0]
 800821c:	602b      	streq	r3, [r5, #0]
 800821e:	2600      	movs	r6, #0
 8008220:	f8d8 3000 	ldr.w	r3, [r8]
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	6066      	str	r6, [r4, #4]
 8008228:	f7ff ffaa 	bl	8008180 <_has_ext_stdout_stderr>
 800822c:	b130      	cbz	r0, 800823c <initialise_monitor_handles+0xa4>
 800822e:	4b07      	ldr	r3, [pc, #28]	; (800824c <initialise_monitor_handles+0xb4>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8008236:	682b      	ldr	r3, [r5, #0]
 8008238:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800823c:	b005      	add	sp, #20
 800823e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008242:	bf00      	nop
 8008244:	20000bd4 	.word	0x20000bd4
 8008248:	20000bc8 	.word	0x20000bc8
 800824c:	20000bd0 	.word	0x20000bd0
 8008250:	0800bd16 	.word	0x0800bd16
 8008254:	20000bcc 	.word	0x20000bcc

08008258 <_isatty>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	f7ff fd75 	bl	8007d48 <findslot>
 800825e:	2509      	movs	r5, #9
 8008260:	4604      	mov	r4, r0
 8008262:	b920      	cbnz	r0, 800826e <_isatty+0x16>
 8008264:	f000 f814 	bl	8008290 <__errno>
 8008268:	6005      	str	r5, [r0, #0]
 800826a:	4620      	mov	r0, r4
 800826c:	bd70      	pop	{r4, r5, r6, pc}
 800826e:	4628      	mov	r0, r5
 8008270:	4621      	mov	r1, r4
 8008272:	beab      	bkpt	0x00ab
 8008274:	4604      	mov	r4, r0
 8008276:	2c01      	cmp	r4, #1
 8008278:	d0f7      	beq.n	800826a <_isatty+0x12>
 800827a:	f000 f809 	bl	8008290 <__errno>
 800827e:	2400      	movs	r4, #0
 8008280:	4605      	mov	r5, r0
 8008282:	2613      	movs	r6, #19
 8008284:	4630      	mov	r0, r6
 8008286:	4621      	mov	r1, r4
 8008288:	beab      	bkpt	0x00ab
 800828a:	4606      	mov	r6, r0
 800828c:	602e      	str	r6, [r5, #0]
 800828e:	e7ec      	b.n	800826a <_isatty+0x12>

08008290 <__errno>:
 8008290:	4b01      	ldr	r3, [pc, #4]	; (8008298 <__errno+0x8>)
 8008292:	6818      	ldr	r0, [r3, #0]
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	20000104 	.word	0x20000104

0800829c <std>:
 800829c:	2300      	movs	r3, #0
 800829e:	b510      	push	{r4, lr}
 80082a0:	4604      	mov	r4, r0
 80082a2:	e9c0 3300 	strd	r3, r3, [r0]
 80082a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082aa:	6083      	str	r3, [r0, #8]
 80082ac:	8181      	strh	r1, [r0, #12]
 80082ae:	6643      	str	r3, [r0, #100]	; 0x64
 80082b0:	81c2      	strh	r2, [r0, #14]
 80082b2:	6183      	str	r3, [r0, #24]
 80082b4:	4619      	mov	r1, r3
 80082b6:	2208      	movs	r2, #8
 80082b8:	305c      	adds	r0, #92	; 0x5c
 80082ba:	f000 f91a 	bl	80084f2 <memset>
 80082be:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <std+0x38>)
 80082c0:	6263      	str	r3, [r4, #36]	; 0x24
 80082c2:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <std+0x3c>)
 80082c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80082c6:	4b05      	ldr	r3, [pc, #20]	; (80082dc <std+0x40>)
 80082c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082ca:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <std+0x44>)
 80082cc:	6224      	str	r4, [r4, #32]
 80082ce:	6323      	str	r3, [r4, #48]	; 0x30
 80082d0:	bd10      	pop	{r4, pc}
 80082d2:	bf00      	nop
 80082d4:	080090e5 	.word	0x080090e5
 80082d8:	08009107 	.word	0x08009107
 80082dc:	0800913f 	.word	0x0800913f
 80082e0:	08009163 	.word	0x08009163

080082e4 <_cleanup_r>:
 80082e4:	4901      	ldr	r1, [pc, #4]	; (80082ec <_cleanup_r+0x8>)
 80082e6:	f000 b8af 	b.w	8008448 <_fwalk_reent>
 80082ea:	bf00      	nop
 80082ec:	0800a2a1 	.word	0x0800a2a1

080082f0 <__sfmoreglue>:
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	2268      	movs	r2, #104	; 0x68
 80082f4:	1e4d      	subs	r5, r1, #1
 80082f6:	4355      	muls	r5, r2
 80082f8:	460e      	mov	r6, r1
 80082fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082fe:	f000 f921 	bl	8008544 <_malloc_r>
 8008302:	4604      	mov	r4, r0
 8008304:	b140      	cbz	r0, 8008318 <__sfmoreglue+0x28>
 8008306:	2100      	movs	r1, #0
 8008308:	e9c0 1600 	strd	r1, r6, [r0]
 800830c:	300c      	adds	r0, #12
 800830e:	60a0      	str	r0, [r4, #8]
 8008310:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008314:	f000 f8ed 	bl	80084f2 <memset>
 8008318:	4620      	mov	r0, r4
 800831a:	bd70      	pop	{r4, r5, r6, pc}

0800831c <__sfp_lock_acquire>:
 800831c:	4801      	ldr	r0, [pc, #4]	; (8008324 <__sfp_lock_acquire+0x8>)
 800831e:	f000 b8d8 	b.w	80084d2 <__retarget_lock_acquire_recursive>
 8008322:	bf00      	nop
 8008324:	20000c75 	.word	0x20000c75

08008328 <__sfp_lock_release>:
 8008328:	4801      	ldr	r0, [pc, #4]	; (8008330 <__sfp_lock_release+0x8>)
 800832a:	f000 b8d3 	b.w	80084d4 <__retarget_lock_release_recursive>
 800832e:	bf00      	nop
 8008330:	20000c75 	.word	0x20000c75

08008334 <__sinit_lock_acquire>:
 8008334:	4801      	ldr	r0, [pc, #4]	; (800833c <__sinit_lock_acquire+0x8>)
 8008336:	f000 b8cc 	b.w	80084d2 <__retarget_lock_acquire_recursive>
 800833a:	bf00      	nop
 800833c:	20000c76 	.word	0x20000c76

08008340 <__sinit_lock_release>:
 8008340:	4801      	ldr	r0, [pc, #4]	; (8008348 <__sinit_lock_release+0x8>)
 8008342:	f000 b8c7 	b.w	80084d4 <__retarget_lock_release_recursive>
 8008346:	bf00      	nop
 8008348:	20000c76 	.word	0x20000c76

0800834c <__sinit>:
 800834c:	b510      	push	{r4, lr}
 800834e:	4604      	mov	r4, r0
 8008350:	f7ff fff0 	bl	8008334 <__sinit_lock_acquire>
 8008354:	69a3      	ldr	r3, [r4, #24]
 8008356:	b11b      	cbz	r3, 8008360 <__sinit+0x14>
 8008358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800835c:	f7ff bff0 	b.w	8008340 <__sinit_lock_release>
 8008360:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008364:	6523      	str	r3, [r4, #80]	; 0x50
 8008366:	4b13      	ldr	r3, [pc, #76]	; (80083b4 <__sinit+0x68>)
 8008368:	4a13      	ldr	r2, [pc, #76]	; (80083b8 <__sinit+0x6c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	62a2      	str	r2, [r4, #40]	; 0x28
 800836e:	42a3      	cmp	r3, r4
 8008370:	bf04      	itt	eq
 8008372:	2301      	moveq	r3, #1
 8008374:	61a3      	streq	r3, [r4, #24]
 8008376:	4620      	mov	r0, r4
 8008378:	f000 f820 	bl	80083bc <__sfp>
 800837c:	6060      	str	r0, [r4, #4]
 800837e:	4620      	mov	r0, r4
 8008380:	f000 f81c 	bl	80083bc <__sfp>
 8008384:	60a0      	str	r0, [r4, #8]
 8008386:	4620      	mov	r0, r4
 8008388:	f000 f818 	bl	80083bc <__sfp>
 800838c:	2200      	movs	r2, #0
 800838e:	60e0      	str	r0, [r4, #12]
 8008390:	2104      	movs	r1, #4
 8008392:	6860      	ldr	r0, [r4, #4]
 8008394:	f7ff ff82 	bl	800829c <std>
 8008398:	68a0      	ldr	r0, [r4, #8]
 800839a:	2201      	movs	r2, #1
 800839c:	2109      	movs	r1, #9
 800839e:	f7ff ff7d 	bl	800829c <std>
 80083a2:	68e0      	ldr	r0, [r4, #12]
 80083a4:	2202      	movs	r2, #2
 80083a6:	2112      	movs	r1, #18
 80083a8:	f7ff ff78 	bl	800829c <std>
 80083ac:	2301      	movs	r3, #1
 80083ae:	61a3      	str	r3, [r4, #24]
 80083b0:	e7d2      	b.n	8008358 <__sinit+0xc>
 80083b2:	bf00      	nop
 80083b4:	0800bd7c 	.word	0x0800bd7c
 80083b8:	080082e5 	.word	0x080082e5

080083bc <__sfp>:
 80083bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083be:	4607      	mov	r7, r0
 80083c0:	f7ff ffac 	bl	800831c <__sfp_lock_acquire>
 80083c4:	4b1e      	ldr	r3, [pc, #120]	; (8008440 <__sfp+0x84>)
 80083c6:	681e      	ldr	r6, [r3, #0]
 80083c8:	69b3      	ldr	r3, [r6, #24]
 80083ca:	b913      	cbnz	r3, 80083d2 <__sfp+0x16>
 80083cc:	4630      	mov	r0, r6
 80083ce:	f7ff ffbd 	bl	800834c <__sinit>
 80083d2:	3648      	adds	r6, #72	; 0x48
 80083d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083d8:	3b01      	subs	r3, #1
 80083da:	d503      	bpl.n	80083e4 <__sfp+0x28>
 80083dc:	6833      	ldr	r3, [r6, #0]
 80083de:	b30b      	cbz	r3, 8008424 <__sfp+0x68>
 80083e0:	6836      	ldr	r6, [r6, #0]
 80083e2:	e7f7      	b.n	80083d4 <__sfp+0x18>
 80083e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083e8:	b9d5      	cbnz	r5, 8008420 <__sfp+0x64>
 80083ea:	4b16      	ldr	r3, [pc, #88]	; (8008444 <__sfp+0x88>)
 80083ec:	60e3      	str	r3, [r4, #12]
 80083ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083f2:	6665      	str	r5, [r4, #100]	; 0x64
 80083f4:	f000 f86c 	bl	80084d0 <__retarget_lock_init_recursive>
 80083f8:	f7ff ff96 	bl	8008328 <__sfp_lock_release>
 80083fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008400:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008404:	6025      	str	r5, [r4, #0]
 8008406:	61a5      	str	r5, [r4, #24]
 8008408:	2208      	movs	r2, #8
 800840a:	4629      	mov	r1, r5
 800840c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008410:	f000 f86f 	bl	80084f2 <memset>
 8008414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008418:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800841c:	4620      	mov	r0, r4
 800841e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008420:	3468      	adds	r4, #104	; 0x68
 8008422:	e7d9      	b.n	80083d8 <__sfp+0x1c>
 8008424:	2104      	movs	r1, #4
 8008426:	4638      	mov	r0, r7
 8008428:	f7ff ff62 	bl	80082f0 <__sfmoreglue>
 800842c:	4604      	mov	r4, r0
 800842e:	6030      	str	r0, [r6, #0]
 8008430:	2800      	cmp	r0, #0
 8008432:	d1d5      	bne.n	80083e0 <__sfp+0x24>
 8008434:	f7ff ff78 	bl	8008328 <__sfp_lock_release>
 8008438:	230c      	movs	r3, #12
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	e7ee      	b.n	800841c <__sfp+0x60>
 800843e:	bf00      	nop
 8008440:	0800bd7c 	.word	0x0800bd7c
 8008444:	ffff0001 	.word	0xffff0001

08008448 <_fwalk_reent>:
 8008448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800844c:	4606      	mov	r6, r0
 800844e:	4688      	mov	r8, r1
 8008450:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008454:	2700      	movs	r7, #0
 8008456:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800845a:	f1b9 0901 	subs.w	r9, r9, #1
 800845e:	d505      	bpl.n	800846c <_fwalk_reent+0x24>
 8008460:	6824      	ldr	r4, [r4, #0]
 8008462:	2c00      	cmp	r4, #0
 8008464:	d1f7      	bne.n	8008456 <_fwalk_reent+0xe>
 8008466:	4638      	mov	r0, r7
 8008468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800846c:	89ab      	ldrh	r3, [r5, #12]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d907      	bls.n	8008482 <_fwalk_reent+0x3a>
 8008472:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008476:	3301      	adds	r3, #1
 8008478:	d003      	beq.n	8008482 <_fwalk_reent+0x3a>
 800847a:	4629      	mov	r1, r5
 800847c:	4630      	mov	r0, r6
 800847e:	47c0      	blx	r8
 8008480:	4307      	orrs	r7, r0
 8008482:	3568      	adds	r5, #104	; 0x68
 8008484:	e7e9      	b.n	800845a <_fwalk_reent+0x12>
	...

08008488 <__libc_init_array>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	4d0d      	ldr	r5, [pc, #52]	; (80084c0 <__libc_init_array+0x38>)
 800848c:	4c0d      	ldr	r4, [pc, #52]	; (80084c4 <__libc_init_array+0x3c>)
 800848e:	1b64      	subs	r4, r4, r5
 8008490:	10a4      	asrs	r4, r4, #2
 8008492:	2600      	movs	r6, #0
 8008494:	42a6      	cmp	r6, r4
 8008496:	d109      	bne.n	80084ac <__libc_init_array+0x24>
 8008498:	4d0b      	ldr	r5, [pc, #44]	; (80084c8 <__libc_init_array+0x40>)
 800849a:	4c0c      	ldr	r4, [pc, #48]	; (80084cc <__libc_init_array+0x44>)
 800849c:	f003 f854 	bl	800b548 <_init>
 80084a0:	1b64      	subs	r4, r4, r5
 80084a2:	10a4      	asrs	r4, r4, #2
 80084a4:	2600      	movs	r6, #0
 80084a6:	42a6      	cmp	r6, r4
 80084a8:	d105      	bne.n	80084b6 <__libc_init_array+0x2e>
 80084aa:	bd70      	pop	{r4, r5, r6, pc}
 80084ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b0:	4798      	blx	r3
 80084b2:	3601      	adds	r6, #1
 80084b4:	e7ee      	b.n	8008494 <__libc_init_array+0xc>
 80084b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ba:	4798      	blx	r3
 80084bc:	3601      	adds	r6, #1
 80084be:	e7f2      	b.n	80084a6 <__libc_init_array+0x1e>
 80084c0:	0800c160 	.word	0x0800c160
 80084c4:	0800c160 	.word	0x0800c160
 80084c8:	0800c160 	.word	0x0800c160
 80084cc:	0800c164 	.word	0x0800c164

080084d0 <__retarget_lock_init_recursive>:
 80084d0:	4770      	bx	lr

080084d2 <__retarget_lock_acquire_recursive>:
 80084d2:	4770      	bx	lr

080084d4 <__retarget_lock_release_recursive>:
 80084d4:	4770      	bx	lr

080084d6 <memcpy>:
 80084d6:	440a      	add	r2, r1
 80084d8:	4291      	cmp	r1, r2
 80084da:	f100 33ff 	add.w	r3, r0, #4294967295
 80084de:	d100      	bne.n	80084e2 <memcpy+0xc>
 80084e0:	4770      	bx	lr
 80084e2:	b510      	push	{r4, lr}
 80084e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ec:	4291      	cmp	r1, r2
 80084ee:	d1f9      	bne.n	80084e4 <memcpy+0xe>
 80084f0:	bd10      	pop	{r4, pc}

080084f2 <memset>:
 80084f2:	4402      	add	r2, r0
 80084f4:	4603      	mov	r3, r0
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d100      	bne.n	80084fc <memset+0xa>
 80084fa:	4770      	bx	lr
 80084fc:	f803 1b01 	strb.w	r1, [r3], #1
 8008500:	e7f9      	b.n	80084f6 <memset+0x4>
	...

08008504 <sbrk_aligned>:
 8008504:	b570      	push	{r4, r5, r6, lr}
 8008506:	4e0e      	ldr	r6, [pc, #56]	; (8008540 <sbrk_aligned+0x3c>)
 8008508:	460c      	mov	r4, r1
 800850a:	6831      	ldr	r1, [r6, #0]
 800850c:	4605      	mov	r5, r0
 800850e:	b911      	cbnz	r1, 8008516 <sbrk_aligned+0x12>
 8008510:	f000 fd84 	bl	800901c <_sbrk_r>
 8008514:	6030      	str	r0, [r6, #0]
 8008516:	4621      	mov	r1, r4
 8008518:	4628      	mov	r0, r5
 800851a:	f000 fd7f 	bl	800901c <_sbrk_r>
 800851e:	1c43      	adds	r3, r0, #1
 8008520:	d00a      	beq.n	8008538 <sbrk_aligned+0x34>
 8008522:	1cc4      	adds	r4, r0, #3
 8008524:	f024 0403 	bic.w	r4, r4, #3
 8008528:	42a0      	cmp	r0, r4
 800852a:	d007      	beq.n	800853c <sbrk_aligned+0x38>
 800852c:	1a21      	subs	r1, r4, r0
 800852e:	4628      	mov	r0, r5
 8008530:	f000 fd74 	bl	800901c <_sbrk_r>
 8008534:	3001      	adds	r0, #1
 8008536:	d101      	bne.n	800853c <sbrk_aligned+0x38>
 8008538:	f04f 34ff 	mov.w	r4, #4294967295
 800853c:	4620      	mov	r0, r4
 800853e:	bd70      	pop	{r4, r5, r6, pc}
 8008540:	20000c7c 	.word	0x20000c7c

08008544 <_malloc_r>:
 8008544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008548:	1ccd      	adds	r5, r1, #3
 800854a:	f025 0503 	bic.w	r5, r5, #3
 800854e:	3508      	adds	r5, #8
 8008550:	2d0c      	cmp	r5, #12
 8008552:	bf38      	it	cc
 8008554:	250c      	movcc	r5, #12
 8008556:	2d00      	cmp	r5, #0
 8008558:	4607      	mov	r7, r0
 800855a:	db01      	blt.n	8008560 <_malloc_r+0x1c>
 800855c:	42a9      	cmp	r1, r5
 800855e:	d905      	bls.n	800856c <_malloc_r+0x28>
 8008560:	230c      	movs	r3, #12
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	2600      	movs	r6, #0
 8008566:	4630      	mov	r0, r6
 8008568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800856c:	4e2e      	ldr	r6, [pc, #184]	; (8008628 <_malloc_r+0xe4>)
 800856e:	f001 ff69 	bl	800a444 <__malloc_lock>
 8008572:	6833      	ldr	r3, [r6, #0]
 8008574:	461c      	mov	r4, r3
 8008576:	bb34      	cbnz	r4, 80085c6 <_malloc_r+0x82>
 8008578:	4629      	mov	r1, r5
 800857a:	4638      	mov	r0, r7
 800857c:	f7ff ffc2 	bl	8008504 <sbrk_aligned>
 8008580:	1c43      	adds	r3, r0, #1
 8008582:	4604      	mov	r4, r0
 8008584:	d14d      	bne.n	8008622 <_malloc_r+0xde>
 8008586:	6834      	ldr	r4, [r6, #0]
 8008588:	4626      	mov	r6, r4
 800858a:	2e00      	cmp	r6, #0
 800858c:	d140      	bne.n	8008610 <_malloc_r+0xcc>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	4631      	mov	r1, r6
 8008592:	4638      	mov	r0, r7
 8008594:	eb04 0803 	add.w	r8, r4, r3
 8008598:	f000 fd40 	bl	800901c <_sbrk_r>
 800859c:	4580      	cmp	r8, r0
 800859e:	d13a      	bne.n	8008616 <_malloc_r+0xd2>
 80085a0:	6821      	ldr	r1, [r4, #0]
 80085a2:	3503      	adds	r5, #3
 80085a4:	1a6d      	subs	r5, r5, r1
 80085a6:	f025 0503 	bic.w	r5, r5, #3
 80085aa:	3508      	adds	r5, #8
 80085ac:	2d0c      	cmp	r5, #12
 80085ae:	bf38      	it	cc
 80085b0:	250c      	movcc	r5, #12
 80085b2:	4629      	mov	r1, r5
 80085b4:	4638      	mov	r0, r7
 80085b6:	f7ff ffa5 	bl	8008504 <sbrk_aligned>
 80085ba:	3001      	adds	r0, #1
 80085bc:	d02b      	beq.n	8008616 <_malloc_r+0xd2>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	442b      	add	r3, r5
 80085c2:	6023      	str	r3, [r4, #0]
 80085c4:	e00e      	b.n	80085e4 <_malloc_r+0xa0>
 80085c6:	6822      	ldr	r2, [r4, #0]
 80085c8:	1b52      	subs	r2, r2, r5
 80085ca:	d41e      	bmi.n	800860a <_malloc_r+0xc6>
 80085cc:	2a0b      	cmp	r2, #11
 80085ce:	d916      	bls.n	80085fe <_malloc_r+0xba>
 80085d0:	1961      	adds	r1, r4, r5
 80085d2:	42a3      	cmp	r3, r4
 80085d4:	6025      	str	r5, [r4, #0]
 80085d6:	bf18      	it	ne
 80085d8:	6059      	strne	r1, [r3, #4]
 80085da:	6863      	ldr	r3, [r4, #4]
 80085dc:	bf08      	it	eq
 80085de:	6031      	streq	r1, [r6, #0]
 80085e0:	5162      	str	r2, [r4, r5]
 80085e2:	604b      	str	r3, [r1, #4]
 80085e4:	4638      	mov	r0, r7
 80085e6:	f104 060b 	add.w	r6, r4, #11
 80085ea:	f001 ff31 	bl	800a450 <__malloc_unlock>
 80085ee:	f026 0607 	bic.w	r6, r6, #7
 80085f2:	1d23      	adds	r3, r4, #4
 80085f4:	1af2      	subs	r2, r6, r3
 80085f6:	d0b6      	beq.n	8008566 <_malloc_r+0x22>
 80085f8:	1b9b      	subs	r3, r3, r6
 80085fa:	50a3      	str	r3, [r4, r2]
 80085fc:	e7b3      	b.n	8008566 <_malloc_r+0x22>
 80085fe:	6862      	ldr	r2, [r4, #4]
 8008600:	42a3      	cmp	r3, r4
 8008602:	bf0c      	ite	eq
 8008604:	6032      	streq	r2, [r6, #0]
 8008606:	605a      	strne	r2, [r3, #4]
 8008608:	e7ec      	b.n	80085e4 <_malloc_r+0xa0>
 800860a:	4623      	mov	r3, r4
 800860c:	6864      	ldr	r4, [r4, #4]
 800860e:	e7b2      	b.n	8008576 <_malloc_r+0x32>
 8008610:	4634      	mov	r4, r6
 8008612:	6876      	ldr	r6, [r6, #4]
 8008614:	e7b9      	b.n	800858a <_malloc_r+0x46>
 8008616:	230c      	movs	r3, #12
 8008618:	603b      	str	r3, [r7, #0]
 800861a:	4638      	mov	r0, r7
 800861c:	f001 ff18 	bl	800a450 <__malloc_unlock>
 8008620:	e7a1      	b.n	8008566 <_malloc_r+0x22>
 8008622:	6025      	str	r5, [r4, #0]
 8008624:	e7de      	b.n	80085e4 <_malloc_r+0xa0>
 8008626:	bf00      	nop
 8008628:	20000c78 	.word	0x20000c78

0800862c <__cvt>:
 800862c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008630:	ec55 4b10 	vmov	r4, r5, d0
 8008634:	2d00      	cmp	r5, #0
 8008636:	460e      	mov	r6, r1
 8008638:	4619      	mov	r1, r3
 800863a:	462b      	mov	r3, r5
 800863c:	bfbb      	ittet	lt
 800863e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008642:	461d      	movlt	r5, r3
 8008644:	2300      	movge	r3, #0
 8008646:	232d      	movlt	r3, #45	; 0x2d
 8008648:	700b      	strb	r3, [r1, #0]
 800864a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800864c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008650:	4691      	mov	r9, r2
 8008652:	f023 0820 	bic.w	r8, r3, #32
 8008656:	bfbc      	itt	lt
 8008658:	4622      	movlt	r2, r4
 800865a:	4614      	movlt	r4, r2
 800865c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008660:	d005      	beq.n	800866e <__cvt+0x42>
 8008662:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008666:	d100      	bne.n	800866a <__cvt+0x3e>
 8008668:	3601      	adds	r6, #1
 800866a:	2102      	movs	r1, #2
 800866c:	e000      	b.n	8008670 <__cvt+0x44>
 800866e:	2103      	movs	r1, #3
 8008670:	ab03      	add	r3, sp, #12
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	ab02      	add	r3, sp, #8
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	ec45 4b10 	vmov	d0, r4, r5
 800867c:	4653      	mov	r3, sl
 800867e:	4632      	mov	r2, r6
 8008680:	f000 ff9a 	bl	80095b8 <_dtoa_r>
 8008684:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008688:	4607      	mov	r7, r0
 800868a:	d102      	bne.n	8008692 <__cvt+0x66>
 800868c:	f019 0f01 	tst.w	r9, #1
 8008690:	d022      	beq.n	80086d8 <__cvt+0xac>
 8008692:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008696:	eb07 0906 	add.w	r9, r7, r6
 800869a:	d110      	bne.n	80086be <__cvt+0x92>
 800869c:	783b      	ldrb	r3, [r7, #0]
 800869e:	2b30      	cmp	r3, #48	; 0x30
 80086a0:	d10a      	bne.n	80086b8 <__cvt+0x8c>
 80086a2:	2200      	movs	r2, #0
 80086a4:	2300      	movs	r3, #0
 80086a6:	4620      	mov	r0, r4
 80086a8:	4629      	mov	r1, r5
 80086aa:	f7f8 fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80086ae:	b918      	cbnz	r0, 80086b8 <__cvt+0x8c>
 80086b0:	f1c6 0601 	rsb	r6, r6, #1
 80086b4:	f8ca 6000 	str.w	r6, [sl]
 80086b8:	f8da 3000 	ldr.w	r3, [sl]
 80086bc:	4499      	add	r9, r3
 80086be:	2200      	movs	r2, #0
 80086c0:	2300      	movs	r3, #0
 80086c2:	4620      	mov	r0, r4
 80086c4:	4629      	mov	r1, r5
 80086c6:	f7f8 f9ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80086ca:	b108      	cbz	r0, 80086d0 <__cvt+0xa4>
 80086cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80086d0:	2230      	movs	r2, #48	; 0x30
 80086d2:	9b03      	ldr	r3, [sp, #12]
 80086d4:	454b      	cmp	r3, r9
 80086d6:	d307      	bcc.n	80086e8 <__cvt+0xbc>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086dc:	1bdb      	subs	r3, r3, r7
 80086de:	4638      	mov	r0, r7
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	b004      	add	sp, #16
 80086e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e8:	1c59      	adds	r1, r3, #1
 80086ea:	9103      	str	r1, [sp, #12]
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	e7f0      	b.n	80086d2 <__cvt+0xa6>

080086f0 <__exponent>:
 80086f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086f2:	4603      	mov	r3, r0
 80086f4:	2900      	cmp	r1, #0
 80086f6:	bfb8      	it	lt
 80086f8:	4249      	neglt	r1, r1
 80086fa:	f803 2b02 	strb.w	r2, [r3], #2
 80086fe:	bfb4      	ite	lt
 8008700:	222d      	movlt	r2, #45	; 0x2d
 8008702:	222b      	movge	r2, #43	; 0x2b
 8008704:	2909      	cmp	r1, #9
 8008706:	7042      	strb	r2, [r0, #1]
 8008708:	dd2a      	ble.n	8008760 <__exponent+0x70>
 800870a:	f10d 0407 	add.w	r4, sp, #7
 800870e:	46a4      	mov	ip, r4
 8008710:	270a      	movs	r7, #10
 8008712:	46a6      	mov	lr, r4
 8008714:	460a      	mov	r2, r1
 8008716:	fb91 f6f7 	sdiv	r6, r1, r7
 800871a:	fb07 1516 	mls	r5, r7, r6, r1
 800871e:	3530      	adds	r5, #48	; 0x30
 8008720:	2a63      	cmp	r2, #99	; 0x63
 8008722:	f104 34ff 	add.w	r4, r4, #4294967295
 8008726:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800872a:	4631      	mov	r1, r6
 800872c:	dcf1      	bgt.n	8008712 <__exponent+0x22>
 800872e:	3130      	adds	r1, #48	; 0x30
 8008730:	f1ae 0502 	sub.w	r5, lr, #2
 8008734:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008738:	1c44      	adds	r4, r0, #1
 800873a:	4629      	mov	r1, r5
 800873c:	4561      	cmp	r1, ip
 800873e:	d30a      	bcc.n	8008756 <__exponent+0x66>
 8008740:	f10d 0209 	add.w	r2, sp, #9
 8008744:	eba2 020e 	sub.w	r2, r2, lr
 8008748:	4565      	cmp	r5, ip
 800874a:	bf88      	it	hi
 800874c:	2200      	movhi	r2, #0
 800874e:	4413      	add	r3, r2
 8008750:	1a18      	subs	r0, r3, r0
 8008752:	b003      	add	sp, #12
 8008754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800875a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800875e:	e7ed      	b.n	800873c <__exponent+0x4c>
 8008760:	2330      	movs	r3, #48	; 0x30
 8008762:	3130      	adds	r1, #48	; 0x30
 8008764:	7083      	strb	r3, [r0, #2]
 8008766:	70c1      	strb	r1, [r0, #3]
 8008768:	1d03      	adds	r3, r0, #4
 800876a:	e7f1      	b.n	8008750 <__exponent+0x60>

0800876c <_printf_float>:
 800876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	ed2d 8b02 	vpush	{d8}
 8008774:	b08d      	sub	sp, #52	; 0x34
 8008776:	460c      	mov	r4, r1
 8008778:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800877c:	4616      	mov	r6, r2
 800877e:	461f      	mov	r7, r3
 8008780:	4605      	mov	r5, r0
 8008782:	f001 fddb 	bl	800a33c <_localeconv_r>
 8008786:	f8d0 a000 	ldr.w	sl, [r0]
 800878a:	4650      	mov	r0, sl
 800878c:	f7f7 fd20 	bl	80001d0 <strlen>
 8008790:	2300      	movs	r3, #0
 8008792:	930a      	str	r3, [sp, #40]	; 0x28
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	9305      	str	r3, [sp, #20]
 8008798:	f8d8 3000 	ldr.w	r3, [r8]
 800879c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087a0:	3307      	adds	r3, #7
 80087a2:	f023 0307 	bic.w	r3, r3, #7
 80087a6:	f103 0208 	add.w	r2, r3, #8
 80087aa:	f8c8 2000 	str.w	r2, [r8]
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087be:	9307      	str	r3, [sp, #28]
 80087c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80087c4:	ee08 0a10 	vmov	s16, r0
 80087c8:	4b9f      	ldr	r3, [pc, #636]	; (8008a48 <_printf_float+0x2dc>)
 80087ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087ce:	f04f 32ff 	mov.w	r2, #4294967295
 80087d2:	f7f8 f9ab 	bl	8000b2c <__aeabi_dcmpun>
 80087d6:	bb88      	cbnz	r0, 800883c <_printf_float+0xd0>
 80087d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087dc:	4b9a      	ldr	r3, [pc, #616]	; (8008a48 <_printf_float+0x2dc>)
 80087de:	f04f 32ff 	mov.w	r2, #4294967295
 80087e2:	f7f8 f985 	bl	8000af0 <__aeabi_dcmple>
 80087e6:	bb48      	cbnz	r0, 800883c <_printf_float+0xd0>
 80087e8:	2200      	movs	r2, #0
 80087ea:	2300      	movs	r3, #0
 80087ec:	4640      	mov	r0, r8
 80087ee:	4649      	mov	r1, r9
 80087f0:	f7f8 f974 	bl	8000adc <__aeabi_dcmplt>
 80087f4:	b110      	cbz	r0, 80087fc <_printf_float+0x90>
 80087f6:	232d      	movs	r3, #45	; 0x2d
 80087f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087fc:	4b93      	ldr	r3, [pc, #588]	; (8008a4c <_printf_float+0x2e0>)
 80087fe:	4894      	ldr	r0, [pc, #592]	; (8008a50 <_printf_float+0x2e4>)
 8008800:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008804:	bf94      	ite	ls
 8008806:	4698      	movls	r8, r3
 8008808:	4680      	movhi	r8, r0
 800880a:	2303      	movs	r3, #3
 800880c:	6123      	str	r3, [r4, #16]
 800880e:	9b05      	ldr	r3, [sp, #20]
 8008810:	f023 0204 	bic.w	r2, r3, #4
 8008814:	6022      	str	r2, [r4, #0]
 8008816:	f04f 0900 	mov.w	r9, #0
 800881a:	9700      	str	r7, [sp, #0]
 800881c:	4633      	mov	r3, r6
 800881e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008820:	4621      	mov	r1, r4
 8008822:	4628      	mov	r0, r5
 8008824:	f000 f9d8 	bl	8008bd8 <_printf_common>
 8008828:	3001      	adds	r0, #1
 800882a:	f040 8090 	bne.w	800894e <_printf_float+0x1e2>
 800882e:	f04f 30ff 	mov.w	r0, #4294967295
 8008832:	b00d      	add	sp, #52	; 0x34
 8008834:	ecbd 8b02 	vpop	{d8}
 8008838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883c:	4642      	mov	r2, r8
 800883e:	464b      	mov	r3, r9
 8008840:	4640      	mov	r0, r8
 8008842:	4649      	mov	r1, r9
 8008844:	f7f8 f972 	bl	8000b2c <__aeabi_dcmpun>
 8008848:	b140      	cbz	r0, 800885c <_printf_float+0xf0>
 800884a:	464b      	mov	r3, r9
 800884c:	2b00      	cmp	r3, #0
 800884e:	bfbc      	itt	lt
 8008850:	232d      	movlt	r3, #45	; 0x2d
 8008852:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008856:	487f      	ldr	r0, [pc, #508]	; (8008a54 <_printf_float+0x2e8>)
 8008858:	4b7f      	ldr	r3, [pc, #508]	; (8008a58 <_printf_float+0x2ec>)
 800885a:	e7d1      	b.n	8008800 <_printf_float+0x94>
 800885c:	6863      	ldr	r3, [r4, #4]
 800885e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008862:	9206      	str	r2, [sp, #24]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	d13f      	bne.n	80088e8 <_printf_float+0x17c>
 8008868:	2306      	movs	r3, #6
 800886a:	6063      	str	r3, [r4, #4]
 800886c:	9b05      	ldr	r3, [sp, #20]
 800886e:	6861      	ldr	r1, [r4, #4]
 8008870:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008874:	2300      	movs	r3, #0
 8008876:	9303      	str	r3, [sp, #12]
 8008878:	ab0a      	add	r3, sp, #40	; 0x28
 800887a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800887e:	ab09      	add	r3, sp, #36	; 0x24
 8008880:	ec49 8b10 	vmov	d0, r8, r9
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	6022      	str	r2, [r4, #0]
 8008888:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800888c:	4628      	mov	r0, r5
 800888e:	f7ff fecd 	bl	800862c <__cvt>
 8008892:	9b06      	ldr	r3, [sp, #24]
 8008894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008896:	2b47      	cmp	r3, #71	; 0x47
 8008898:	4680      	mov	r8, r0
 800889a:	d108      	bne.n	80088ae <_printf_float+0x142>
 800889c:	1cc8      	adds	r0, r1, #3
 800889e:	db02      	blt.n	80088a6 <_printf_float+0x13a>
 80088a0:	6863      	ldr	r3, [r4, #4]
 80088a2:	4299      	cmp	r1, r3
 80088a4:	dd41      	ble.n	800892a <_printf_float+0x1be>
 80088a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80088aa:	fa5f fb8b 	uxtb.w	fp, fp
 80088ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088b2:	d820      	bhi.n	80088f6 <_printf_float+0x18a>
 80088b4:	3901      	subs	r1, #1
 80088b6:	465a      	mov	r2, fp
 80088b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088bc:	9109      	str	r1, [sp, #36]	; 0x24
 80088be:	f7ff ff17 	bl	80086f0 <__exponent>
 80088c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088c4:	1813      	adds	r3, r2, r0
 80088c6:	2a01      	cmp	r2, #1
 80088c8:	4681      	mov	r9, r0
 80088ca:	6123      	str	r3, [r4, #16]
 80088cc:	dc02      	bgt.n	80088d4 <_printf_float+0x168>
 80088ce:	6822      	ldr	r2, [r4, #0]
 80088d0:	07d2      	lsls	r2, r2, #31
 80088d2:	d501      	bpl.n	80088d8 <_printf_float+0x16c>
 80088d4:	3301      	adds	r3, #1
 80088d6:	6123      	str	r3, [r4, #16]
 80088d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d09c      	beq.n	800881a <_printf_float+0xae>
 80088e0:	232d      	movs	r3, #45	; 0x2d
 80088e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088e6:	e798      	b.n	800881a <_printf_float+0xae>
 80088e8:	9a06      	ldr	r2, [sp, #24]
 80088ea:	2a47      	cmp	r2, #71	; 0x47
 80088ec:	d1be      	bne.n	800886c <_printf_float+0x100>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1bc      	bne.n	800886c <_printf_float+0x100>
 80088f2:	2301      	movs	r3, #1
 80088f4:	e7b9      	b.n	800886a <_printf_float+0xfe>
 80088f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80088fa:	d118      	bne.n	800892e <_printf_float+0x1c2>
 80088fc:	2900      	cmp	r1, #0
 80088fe:	6863      	ldr	r3, [r4, #4]
 8008900:	dd0b      	ble.n	800891a <_printf_float+0x1ae>
 8008902:	6121      	str	r1, [r4, #16]
 8008904:	b913      	cbnz	r3, 800890c <_printf_float+0x1a0>
 8008906:	6822      	ldr	r2, [r4, #0]
 8008908:	07d0      	lsls	r0, r2, #31
 800890a:	d502      	bpl.n	8008912 <_printf_float+0x1a6>
 800890c:	3301      	adds	r3, #1
 800890e:	440b      	add	r3, r1
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	65a1      	str	r1, [r4, #88]	; 0x58
 8008914:	f04f 0900 	mov.w	r9, #0
 8008918:	e7de      	b.n	80088d8 <_printf_float+0x16c>
 800891a:	b913      	cbnz	r3, 8008922 <_printf_float+0x1b6>
 800891c:	6822      	ldr	r2, [r4, #0]
 800891e:	07d2      	lsls	r2, r2, #31
 8008920:	d501      	bpl.n	8008926 <_printf_float+0x1ba>
 8008922:	3302      	adds	r3, #2
 8008924:	e7f4      	b.n	8008910 <_printf_float+0x1a4>
 8008926:	2301      	movs	r3, #1
 8008928:	e7f2      	b.n	8008910 <_printf_float+0x1a4>
 800892a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800892e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008930:	4299      	cmp	r1, r3
 8008932:	db05      	blt.n	8008940 <_printf_float+0x1d4>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	6121      	str	r1, [r4, #16]
 8008938:	07d8      	lsls	r0, r3, #31
 800893a:	d5ea      	bpl.n	8008912 <_printf_float+0x1a6>
 800893c:	1c4b      	adds	r3, r1, #1
 800893e:	e7e7      	b.n	8008910 <_printf_float+0x1a4>
 8008940:	2900      	cmp	r1, #0
 8008942:	bfd4      	ite	le
 8008944:	f1c1 0202 	rsble	r2, r1, #2
 8008948:	2201      	movgt	r2, #1
 800894a:	4413      	add	r3, r2
 800894c:	e7e0      	b.n	8008910 <_printf_float+0x1a4>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	055a      	lsls	r2, r3, #21
 8008952:	d407      	bmi.n	8008964 <_printf_float+0x1f8>
 8008954:	6923      	ldr	r3, [r4, #16]
 8008956:	4642      	mov	r2, r8
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	d12c      	bne.n	80089bc <_printf_float+0x250>
 8008962:	e764      	b.n	800882e <_printf_float+0xc2>
 8008964:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008968:	f240 80e0 	bls.w	8008b2c <_printf_float+0x3c0>
 800896c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008970:	2200      	movs	r2, #0
 8008972:	2300      	movs	r3, #0
 8008974:	f7f8 f8a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008978:	2800      	cmp	r0, #0
 800897a:	d034      	beq.n	80089e6 <_printf_float+0x27a>
 800897c:	4a37      	ldr	r2, [pc, #220]	; (8008a5c <_printf_float+0x2f0>)
 800897e:	2301      	movs	r3, #1
 8008980:	4631      	mov	r1, r6
 8008982:	4628      	mov	r0, r5
 8008984:	47b8      	blx	r7
 8008986:	3001      	adds	r0, #1
 8008988:	f43f af51 	beq.w	800882e <_printf_float+0xc2>
 800898c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008990:	429a      	cmp	r2, r3
 8008992:	db02      	blt.n	800899a <_printf_float+0x22e>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	07d8      	lsls	r0, r3, #31
 8008998:	d510      	bpl.n	80089bc <_printf_float+0x250>
 800899a:	ee18 3a10 	vmov	r3, s16
 800899e:	4652      	mov	r2, sl
 80089a0:	4631      	mov	r1, r6
 80089a2:	4628      	mov	r0, r5
 80089a4:	47b8      	blx	r7
 80089a6:	3001      	adds	r0, #1
 80089a8:	f43f af41 	beq.w	800882e <_printf_float+0xc2>
 80089ac:	f04f 0800 	mov.w	r8, #0
 80089b0:	f104 091a 	add.w	r9, r4, #26
 80089b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b6:	3b01      	subs	r3, #1
 80089b8:	4543      	cmp	r3, r8
 80089ba:	dc09      	bgt.n	80089d0 <_printf_float+0x264>
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	079b      	lsls	r3, r3, #30
 80089c0:	f100 8105 	bmi.w	8008bce <_printf_float+0x462>
 80089c4:	68e0      	ldr	r0, [r4, #12]
 80089c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089c8:	4298      	cmp	r0, r3
 80089ca:	bfb8      	it	lt
 80089cc:	4618      	movlt	r0, r3
 80089ce:	e730      	b.n	8008832 <_printf_float+0xc6>
 80089d0:	2301      	movs	r3, #1
 80089d2:	464a      	mov	r2, r9
 80089d4:	4631      	mov	r1, r6
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b8      	blx	r7
 80089da:	3001      	adds	r0, #1
 80089dc:	f43f af27 	beq.w	800882e <_printf_float+0xc2>
 80089e0:	f108 0801 	add.w	r8, r8, #1
 80089e4:	e7e6      	b.n	80089b4 <_printf_float+0x248>
 80089e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	dc39      	bgt.n	8008a60 <_printf_float+0x2f4>
 80089ec:	4a1b      	ldr	r2, [pc, #108]	; (8008a5c <_printf_float+0x2f0>)
 80089ee:	2301      	movs	r3, #1
 80089f0:	4631      	mov	r1, r6
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b8      	blx	r7
 80089f6:	3001      	adds	r0, #1
 80089f8:	f43f af19 	beq.w	800882e <_printf_float+0xc2>
 80089fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a00:	4313      	orrs	r3, r2
 8008a02:	d102      	bne.n	8008a0a <_printf_float+0x29e>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	07d9      	lsls	r1, r3, #31
 8008a08:	d5d8      	bpl.n	80089bc <_printf_float+0x250>
 8008a0a:	ee18 3a10 	vmov	r3, s16
 8008a0e:	4652      	mov	r2, sl
 8008a10:	4631      	mov	r1, r6
 8008a12:	4628      	mov	r0, r5
 8008a14:	47b8      	blx	r7
 8008a16:	3001      	adds	r0, #1
 8008a18:	f43f af09 	beq.w	800882e <_printf_float+0xc2>
 8008a1c:	f04f 0900 	mov.w	r9, #0
 8008a20:	f104 0a1a 	add.w	sl, r4, #26
 8008a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a26:	425b      	negs	r3, r3
 8008a28:	454b      	cmp	r3, r9
 8008a2a:	dc01      	bgt.n	8008a30 <_printf_float+0x2c4>
 8008a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a2e:	e792      	b.n	8008956 <_printf_float+0x1ea>
 8008a30:	2301      	movs	r3, #1
 8008a32:	4652      	mov	r2, sl
 8008a34:	4631      	mov	r1, r6
 8008a36:	4628      	mov	r0, r5
 8008a38:	47b8      	blx	r7
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	f43f aef7 	beq.w	800882e <_printf_float+0xc2>
 8008a40:	f109 0901 	add.w	r9, r9, #1
 8008a44:	e7ee      	b.n	8008a24 <_printf_float+0x2b8>
 8008a46:	bf00      	nop
 8008a48:	7fefffff 	.word	0x7fefffff
 8008a4c:	0800bd80 	.word	0x0800bd80
 8008a50:	0800bd84 	.word	0x0800bd84
 8008a54:	0800bd8c 	.word	0x0800bd8c
 8008a58:	0800bd88 	.word	0x0800bd88
 8008a5c:	0800bd90 	.word	0x0800bd90
 8008a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a64:	429a      	cmp	r2, r3
 8008a66:	bfa8      	it	ge
 8008a68:	461a      	movge	r2, r3
 8008a6a:	2a00      	cmp	r2, #0
 8008a6c:	4691      	mov	r9, r2
 8008a6e:	dc37      	bgt.n	8008ae0 <_printf_float+0x374>
 8008a70:	f04f 0b00 	mov.w	fp, #0
 8008a74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a78:	f104 021a 	add.w	r2, r4, #26
 8008a7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a7e:	9305      	str	r3, [sp, #20]
 8008a80:	eba3 0309 	sub.w	r3, r3, r9
 8008a84:	455b      	cmp	r3, fp
 8008a86:	dc33      	bgt.n	8008af0 <_printf_float+0x384>
 8008a88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	db3b      	blt.n	8008b08 <_printf_float+0x39c>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	07da      	lsls	r2, r3, #31
 8008a94:	d438      	bmi.n	8008b08 <_printf_float+0x39c>
 8008a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a98:	9a05      	ldr	r2, [sp, #20]
 8008a9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a9c:	1a9a      	subs	r2, r3, r2
 8008a9e:	eba3 0901 	sub.w	r9, r3, r1
 8008aa2:	4591      	cmp	r9, r2
 8008aa4:	bfa8      	it	ge
 8008aa6:	4691      	movge	r9, r2
 8008aa8:	f1b9 0f00 	cmp.w	r9, #0
 8008aac:	dc35      	bgt.n	8008b1a <_printf_float+0x3ae>
 8008aae:	f04f 0800 	mov.w	r8, #0
 8008ab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ab6:	f104 0a1a 	add.w	sl, r4, #26
 8008aba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	eba3 0309 	sub.w	r3, r3, r9
 8008ac4:	4543      	cmp	r3, r8
 8008ac6:	f77f af79 	ble.w	80089bc <_printf_float+0x250>
 8008aca:	2301      	movs	r3, #1
 8008acc:	4652      	mov	r2, sl
 8008ace:	4631      	mov	r1, r6
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	47b8      	blx	r7
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	f43f aeaa 	beq.w	800882e <_printf_float+0xc2>
 8008ada:	f108 0801 	add.w	r8, r8, #1
 8008ade:	e7ec      	b.n	8008aba <_printf_float+0x34e>
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4642      	mov	r2, r8
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	d1c0      	bne.n	8008a70 <_printf_float+0x304>
 8008aee:	e69e      	b.n	800882e <_printf_float+0xc2>
 8008af0:	2301      	movs	r3, #1
 8008af2:	4631      	mov	r1, r6
 8008af4:	4628      	mov	r0, r5
 8008af6:	9205      	str	r2, [sp, #20]
 8008af8:	47b8      	blx	r7
 8008afa:	3001      	adds	r0, #1
 8008afc:	f43f ae97 	beq.w	800882e <_printf_float+0xc2>
 8008b00:	9a05      	ldr	r2, [sp, #20]
 8008b02:	f10b 0b01 	add.w	fp, fp, #1
 8008b06:	e7b9      	b.n	8008a7c <_printf_float+0x310>
 8008b08:	ee18 3a10 	vmov	r3, s16
 8008b0c:	4652      	mov	r2, sl
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4628      	mov	r0, r5
 8008b12:	47b8      	blx	r7
 8008b14:	3001      	adds	r0, #1
 8008b16:	d1be      	bne.n	8008a96 <_printf_float+0x32a>
 8008b18:	e689      	b.n	800882e <_printf_float+0xc2>
 8008b1a:	9a05      	ldr	r2, [sp, #20]
 8008b1c:	464b      	mov	r3, r9
 8008b1e:	4442      	add	r2, r8
 8008b20:	4631      	mov	r1, r6
 8008b22:	4628      	mov	r0, r5
 8008b24:	47b8      	blx	r7
 8008b26:	3001      	adds	r0, #1
 8008b28:	d1c1      	bne.n	8008aae <_printf_float+0x342>
 8008b2a:	e680      	b.n	800882e <_printf_float+0xc2>
 8008b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b2e:	2a01      	cmp	r2, #1
 8008b30:	dc01      	bgt.n	8008b36 <_printf_float+0x3ca>
 8008b32:	07db      	lsls	r3, r3, #31
 8008b34:	d538      	bpl.n	8008ba8 <_printf_float+0x43c>
 8008b36:	2301      	movs	r3, #1
 8008b38:	4642      	mov	r2, r8
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	47b8      	blx	r7
 8008b40:	3001      	adds	r0, #1
 8008b42:	f43f ae74 	beq.w	800882e <_printf_float+0xc2>
 8008b46:	ee18 3a10 	vmov	r3, s16
 8008b4a:	4652      	mov	r2, sl
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4628      	mov	r0, r5
 8008b50:	47b8      	blx	r7
 8008b52:	3001      	adds	r0, #1
 8008b54:	f43f ae6b 	beq.w	800882e <_printf_float+0xc2>
 8008b58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2300      	movs	r3, #0
 8008b60:	f7f7 ffb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b64:	b9d8      	cbnz	r0, 8008b9e <_printf_float+0x432>
 8008b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b68:	f108 0201 	add.w	r2, r8, #1
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4628      	mov	r0, r5
 8008b72:	47b8      	blx	r7
 8008b74:	3001      	adds	r0, #1
 8008b76:	d10e      	bne.n	8008b96 <_printf_float+0x42a>
 8008b78:	e659      	b.n	800882e <_printf_float+0xc2>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4652      	mov	r2, sl
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b8      	blx	r7
 8008b84:	3001      	adds	r0, #1
 8008b86:	f43f ae52 	beq.w	800882e <_printf_float+0xc2>
 8008b8a:	f108 0801 	add.w	r8, r8, #1
 8008b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b90:	3b01      	subs	r3, #1
 8008b92:	4543      	cmp	r3, r8
 8008b94:	dcf1      	bgt.n	8008b7a <_printf_float+0x40e>
 8008b96:	464b      	mov	r3, r9
 8008b98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b9c:	e6dc      	b.n	8008958 <_printf_float+0x1ec>
 8008b9e:	f04f 0800 	mov.w	r8, #0
 8008ba2:	f104 0a1a 	add.w	sl, r4, #26
 8008ba6:	e7f2      	b.n	8008b8e <_printf_float+0x422>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	4642      	mov	r2, r8
 8008bac:	e7df      	b.n	8008b6e <_printf_float+0x402>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	464a      	mov	r2, r9
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	47b8      	blx	r7
 8008bb8:	3001      	adds	r0, #1
 8008bba:	f43f ae38 	beq.w	800882e <_printf_float+0xc2>
 8008bbe:	f108 0801 	add.w	r8, r8, #1
 8008bc2:	68e3      	ldr	r3, [r4, #12]
 8008bc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bc6:	1a5b      	subs	r3, r3, r1
 8008bc8:	4543      	cmp	r3, r8
 8008bca:	dcf0      	bgt.n	8008bae <_printf_float+0x442>
 8008bcc:	e6fa      	b.n	80089c4 <_printf_float+0x258>
 8008bce:	f04f 0800 	mov.w	r8, #0
 8008bd2:	f104 0919 	add.w	r9, r4, #25
 8008bd6:	e7f4      	b.n	8008bc2 <_printf_float+0x456>

08008bd8 <_printf_common>:
 8008bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bdc:	4616      	mov	r6, r2
 8008bde:	4699      	mov	r9, r3
 8008be0:	688a      	ldr	r2, [r1, #8]
 8008be2:	690b      	ldr	r3, [r1, #16]
 8008be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008be8:	4293      	cmp	r3, r2
 8008bea:	bfb8      	it	lt
 8008bec:	4613      	movlt	r3, r2
 8008bee:	6033      	str	r3, [r6, #0]
 8008bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	460c      	mov	r4, r1
 8008bf8:	b10a      	cbz	r2, 8008bfe <_printf_common+0x26>
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	6033      	str	r3, [r6, #0]
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	0699      	lsls	r1, r3, #26
 8008c02:	bf42      	ittt	mi
 8008c04:	6833      	ldrmi	r3, [r6, #0]
 8008c06:	3302      	addmi	r3, #2
 8008c08:	6033      	strmi	r3, [r6, #0]
 8008c0a:	6825      	ldr	r5, [r4, #0]
 8008c0c:	f015 0506 	ands.w	r5, r5, #6
 8008c10:	d106      	bne.n	8008c20 <_printf_common+0x48>
 8008c12:	f104 0a19 	add.w	sl, r4, #25
 8008c16:	68e3      	ldr	r3, [r4, #12]
 8008c18:	6832      	ldr	r2, [r6, #0]
 8008c1a:	1a9b      	subs	r3, r3, r2
 8008c1c:	42ab      	cmp	r3, r5
 8008c1e:	dc26      	bgt.n	8008c6e <_printf_common+0x96>
 8008c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c24:	1e13      	subs	r3, r2, #0
 8008c26:	6822      	ldr	r2, [r4, #0]
 8008c28:	bf18      	it	ne
 8008c2a:	2301      	movne	r3, #1
 8008c2c:	0692      	lsls	r2, r2, #26
 8008c2e:	d42b      	bmi.n	8008c88 <_printf_common+0xb0>
 8008c30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c34:	4649      	mov	r1, r9
 8008c36:	4638      	mov	r0, r7
 8008c38:	47c0      	blx	r8
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	d01e      	beq.n	8008c7c <_printf_common+0xa4>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	68e5      	ldr	r5, [r4, #12]
 8008c42:	6832      	ldr	r2, [r6, #0]
 8008c44:	f003 0306 	and.w	r3, r3, #6
 8008c48:	2b04      	cmp	r3, #4
 8008c4a:	bf08      	it	eq
 8008c4c:	1aad      	subeq	r5, r5, r2
 8008c4e:	68a3      	ldr	r3, [r4, #8]
 8008c50:	6922      	ldr	r2, [r4, #16]
 8008c52:	bf0c      	ite	eq
 8008c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c58:	2500      	movne	r5, #0
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	bfc4      	itt	gt
 8008c5e:	1a9b      	subgt	r3, r3, r2
 8008c60:	18ed      	addgt	r5, r5, r3
 8008c62:	2600      	movs	r6, #0
 8008c64:	341a      	adds	r4, #26
 8008c66:	42b5      	cmp	r5, r6
 8008c68:	d11a      	bne.n	8008ca0 <_printf_common+0xc8>
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	e008      	b.n	8008c80 <_printf_common+0xa8>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4652      	mov	r2, sl
 8008c72:	4649      	mov	r1, r9
 8008c74:	4638      	mov	r0, r7
 8008c76:	47c0      	blx	r8
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d103      	bne.n	8008c84 <_printf_common+0xac>
 8008c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c84:	3501      	adds	r5, #1
 8008c86:	e7c6      	b.n	8008c16 <_printf_common+0x3e>
 8008c88:	18e1      	adds	r1, r4, r3
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	2030      	movs	r0, #48	; 0x30
 8008c8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c92:	4422      	add	r2, r4
 8008c94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c9c:	3302      	adds	r3, #2
 8008c9e:	e7c7      	b.n	8008c30 <_printf_common+0x58>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	47c0      	blx	r8
 8008caa:	3001      	adds	r0, #1
 8008cac:	d0e6      	beq.n	8008c7c <_printf_common+0xa4>
 8008cae:	3601      	adds	r6, #1
 8008cb0:	e7d9      	b.n	8008c66 <_printf_common+0x8e>
	...

08008cb4 <_printf_i>:
 8008cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb8:	7e0f      	ldrb	r7, [r1, #24]
 8008cba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cbc:	2f78      	cmp	r7, #120	; 0x78
 8008cbe:	4691      	mov	r9, r2
 8008cc0:	4680      	mov	r8, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	469a      	mov	sl, r3
 8008cc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cca:	d807      	bhi.n	8008cdc <_printf_i+0x28>
 8008ccc:	2f62      	cmp	r7, #98	; 0x62
 8008cce:	d80a      	bhi.n	8008ce6 <_printf_i+0x32>
 8008cd0:	2f00      	cmp	r7, #0
 8008cd2:	f000 80d8 	beq.w	8008e86 <_printf_i+0x1d2>
 8008cd6:	2f58      	cmp	r7, #88	; 0x58
 8008cd8:	f000 80a3 	beq.w	8008e22 <_printf_i+0x16e>
 8008cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ce4:	e03a      	b.n	8008d5c <_printf_i+0xa8>
 8008ce6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cea:	2b15      	cmp	r3, #21
 8008cec:	d8f6      	bhi.n	8008cdc <_printf_i+0x28>
 8008cee:	a101      	add	r1, pc, #4	; (adr r1, 8008cf4 <_printf_i+0x40>)
 8008cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cf4:	08008d4d 	.word	0x08008d4d
 8008cf8:	08008d61 	.word	0x08008d61
 8008cfc:	08008cdd 	.word	0x08008cdd
 8008d00:	08008cdd 	.word	0x08008cdd
 8008d04:	08008cdd 	.word	0x08008cdd
 8008d08:	08008cdd 	.word	0x08008cdd
 8008d0c:	08008d61 	.word	0x08008d61
 8008d10:	08008cdd 	.word	0x08008cdd
 8008d14:	08008cdd 	.word	0x08008cdd
 8008d18:	08008cdd 	.word	0x08008cdd
 8008d1c:	08008cdd 	.word	0x08008cdd
 8008d20:	08008e6d 	.word	0x08008e6d
 8008d24:	08008d91 	.word	0x08008d91
 8008d28:	08008e4f 	.word	0x08008e4f
 8008d2c:	08008cdd 	.word	0x08008cdd
 8008d30:	08008cdd 	.word	0x08008cdd
 8008d34:	08008e8f 	.word	0x08008e8f
 8008d38:	08008cdd 	.word	0x08008cdd
 8008d3c:	08008d91 	.word	0x08008d91
 8008d40:	08008cdd 	.word	0x08008cdd
 8008d44:	08008cdd 	.word	0x08008cdd
 8008d48:	08008e57 	.word	0x08008e57
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	1d1a      	adds	r2, r3, #4
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	602a      	str	r2, [r5, #0]
 8008d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e0a3      	b.n	8008ea8 <_printf_i+0x1f4>
 8008d60:	6820      	ldr	r0, [r4, #0]
 8008d62:	6829      	ldr	r1, [r5, #0]
 8008d64:	0606      	lsls	r6, r0, #24
 8008d66:	f101 0304 	add.w	r3, r1, #4
 8008d6a:	d50a      	bpl.n	8008d82 <_printf_i+0xce>
 8008d6c:	680e      	ldr	r6, [r1, #0]
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	2e00      	cmp	r6, #0
 8008d72:	da03      	bge.n	8008d7c <_printf_i+0xc8>
 8008d74:	232d      	movs	r3, #45	; 0x2d
 8008d76:	4276      	negs	r6, r6
 8008d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d7c:	485e      	ldr	r0, [pc, #376]	; (8008ef8 <_printf_i+0x244>)
 8008d7e:	230a      	movs	r3, #10
 8008d80:	e019      	b.n	8008db6 <_printf_i+0x102>
 8008d82:	680e      	ldr	r6, [r1, #0]
 8008d84:	602b      	str	r3, [r5, #0]
 8008d86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d8a:	bf18      	it	ne
 8008d8c:	b236      	sxthne	r6, r6
 8008d8e:	e7ef      	b.n	8008d70 <_printf_i+0xbc>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	6820      	ldr	r0, [r4, #0]
 8008d94:	1d19      	adds	r1, r3, #4
 8008d96:	6029      	str	r1, [r5, #0]
 8008d98:	0601      	lsls	r1, r0, #24
 8008d9a:	d501      	bpl.n	8008da0 <_printf_i+0xec>
 8008d9c:	681e      	ldr	r6, [r3, #0]
 8008d9e:	e002      	b.n	8008da6 <_printf_i+0xf2>
 8008da0:	0646      	lsls	r6, r0, #25
 8008da2:	d5fb      	bpl.n	8008d9c <_printf_i+0xe8>
 8008da4:	881e      	ldrh	r6, [r3, #0]
 8008da6:	4854      	ldr	r0, [pc, #336]	; (8008ef8 <_printf_i+0x244>)
 8008da8:	2f6f      	cmp	r7, #111	; 0x6f
 8008daa:	bf0c      	ite	eq
 8008dac:	2308      	moveq	r3, #8
 8008dae:	230a      	movne	r3, #10
 8008db0:	2100      	movs	r1, #0
 8008db2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008db6:	6865      	ldr	r5, [r4, #4]
 8008db8:	60a5      	str	r5, [r4, #8]
 8008dba:	2d00      	cmp	r5, #0
 8008dbc:	bfa2      	ittt	ge
 8008dbe:	6821      	ldrge	r1, [r4, #0]
 8008dc0:	f021 0104 	bicge.w	r1, r1, #4
 8008dc4:	6021      	strge	r1, [r4, #0]
 8008dc6:	b90e      	cbnz	r6, 8008dcc <_printf_i+0x118>
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	d04d      	beq.n	8008e68 <_printf_i+0x1b4>
 8008dcc:	4615      	mov	r5, r2
 8008dce:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dd2:	fb03 6711 	mls	r7, r3, r1, r6
 8008dd6:	5dc7      	ldrb	r7, [r0, r7]
 8008dd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ddc:	4637      	mov	r7, r6
 8008dde:	42bb      	cmp	r3, r7
 8008de0:	460e      	mov	r6, r1
 8008de2:	d9f4      	bls.n	8008dce <_printf_i+0x11a>
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d10b      	bne.n	8008e00 <_printf_i+0x14c>
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	07de      	lsls	r6, r3, #31
 8008dec:	d508      	bpl.n	8008e00 <_printf_i+0x14c>
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	6861      	ldr	r1, [r4, #4]
 8008df2:	4299      	cmp	r1, r3
 8008df4:	bfde      	ittt	le
 8008df6:	2330      	movle	r3, #48	; 0x30
 8008df8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e00:	1b52      	subs	r2, r2, r5
 8008e02:	6122      	str	r2, [r4, #16]
 8008e04:	f8cd a000 	str.w	sl, [sp]
 8008e08:	464b      	mov	r3, r9
 8008e0a:	aa03      	add	r2, sp, #12
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4640      	mov	r0, r8
 8008e10:	f7ff fee2 	bl	8008bd8 <_printf_common>
 8008e14:	3001      	adds	r0, #1
 8008e16:	d14c      	bne.n	8008eb2 <_printf_i+0x1fe>
 8008e18:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1c:	b004      	add	sp, #16
 8008e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e22:	4835      	ldr	r0, [pc, #212]	; (8008ef8 <_printf_i+0x244>)
 8008e24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e28:	6829      	ldr	r1, [r5, #0]
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e30:	6029      	str	r1, [r5, #0]
 8008e32:	061d      	lsls	r5, r3, #24
 8008e34:	d514      	bpl.n	8008e60 <_printf_i+0x1ac>
 8008e36:	07df      	lsls	r7, r3, #31
 8008e38:	bf44      	itt	mi
 8008e3a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e3e:	6023      	strmi	r3, [r4, #0]
 8008e40:	b91e      	cbnz	r6, 8008e4a <_printf_i+0x196>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	f023 0320 	bic.w	r3, r3, #32
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	2310      	movs	r3, #16
 8008e4c:	e7b0      	b.n	8008db0 <_printf_i+0xfc>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	f043 0320 	orr.w	r3, r3, #32
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	2378      	movs	r3, #120	; 0x78
 8008e58:	4828      	ldr	r0, [pc, #160]	; (8008efc <_printf_i+0x248>)
 8008e5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e5e:	e7e3      	b.n	8008e28 <_printf_i+0x174>
 8008e60:	0659      	lsls	r1, r3, #25
 8008e62:	bf48      	it	mi
 8008e64:	b2b6      	uxthmi	r6, r6
 8008e66:	e7e6      	b.n	8008e36 <_printf_i+0x182>
 8008e68:	4615      	mov	r5, r2
 8008e6a:	e7bb      	b.n	8008de4 <_printf_i+0x130>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	6826      	ldr	r6, [r4, #0]
 8008e70:	6961      	ldr	r1, [r4, #20]
 8008e72:	1d18      	adds	r0, r3, #4
 8008e74:	6028      	str	r0, [r5, #0]
 8008e76:	0635      	lsls	r5, r6, #24
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	d501      	bpl.n	8008e80 <_printf_i+0x1cc>
 8008e7c:	6019      	str	r1, [r3, #0]
 8008e7e:	e002      	b.n	8008e86 <_printf_i+0x1d2>
 8008e80:	0670      	lsls	r0, r6, #25
 8008e82:	d5fb      	bpl.n	8008e7c <_printf_i+0x1c8>
 8008e84:	8019      	strh	r1, [r3, #0]
 8008e86:	2300      	movs	r3, #0
 8008e88:	6123      	str	r3, [r4, #16]
 8008e8a:	4615      	mov	r5, r2
 8008e8c:	e7ba      	b.n	8008e04 <_printf_i+0x150>
 8008e8e:	682b      	ldr	r3, [r5, #0]
 8008e90:	1d1a      	adds	r2, r3, #4
 8008e92:	602a      	str	r2, [r5, #0]
 8008e94:	681d      	ldr	r5, [r3, #0]
 8008e96:	6862      	ldr	r2, [r4, #4]
 8008e98:	2100      	movs	r1, #0
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f7f7 f9a0 	bl	80001e0 <memchr>
 8008ea0:	b108      	cbz	r0, 8008ea6 <_printf_i+0x1f2>
 8008ea2:	1b40      	subs	r0, r0, r5
 8008ea4:	6060      	str	r0, [r4, #4]
 8008ea6:	6863      	ldr	r3, [r4, #4]
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb0:	e7a8      	b.n	8008e04 <_printf_i+0x150>
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	462a      	mov	r2, r5
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	4640      	mov	r0, r8
 8008eba:	47d0      	blx	sl
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	d0ab      	beq.n	8008e18 <_printf_i+0x164>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	079b      	lsls	r3, r3, #30
 8008ec4:	d413      	bmi.n	8008eee <_printf_i+0x23a>
 8008ec6:	68e0      	ldr	r0, [r4, #12]
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	4298      	cmp	r0, r3
 8008ecc:	bfb8      	it	lt
 8008ece:	4618      	movlt	r0, r3
 8008ed0:	e7a4      	b.n	8008e1c <_printf_i+0x168>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	4632      	mov	r2, r6
 8008ed6:	4649      	mov	r1, r9
 8008ed8:	4640      	mov	r0, r8
 8008eda:	47d0      	blx	sl
 8008edc:	3001      	adds	r0, #1
 8008ede:	d09b      	beq.n	8008e18 <_printf_i+0x164>
 8008ee0:	3501      	adds	r5, #1
 8008ee2:	68e3      	ldr	r3, [r4, #12]
 8008ee4:	9903      	ldr	r1, [sp, #12]
 8008ee6:	1a5b      	subs	r3, r3, r1
 8008ee8:	42ab      	cmp	r3, r5
 8008eea:	dcf2      	bgt.n	8008ed2 <_printf_i+0x21e>
 8008eec:	e7eb      	b.n	8008ec6 <_printf_i+0x212>
 8008eee:	2500      	movs	r5, #0
 8008ef0:	f104 0619 	add.w	r6, r4, #25
 8008ef4:	e7f5      	b.n	8008ee2 <_printf_i+0x22e>
 8008ef6:	bf00      	nop
 8008ef8:	0800bd92 	.word	0x0800bd92
 8008efc:	0800bda3 	.word	0x0800bda3

08008f00 <iprintf>:
 8008f00:	b40f      	push	{r0, r1, r2, r3}
 8008f02:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <iprintf+0x2c>)
 8008f04:	b513      	push	{r0, r1, r4, lr}
 8008f06:	681c      	ldr	r4, [r3, #0]
 8008f08:	b124      	cbz	r4, 8008f14 <iprintf+0x14>
 8008f0a:	69a3      	ldr	r3, [r4, #24]
 8008f0c:	b913      	cbnz	r3, 8008f14 <iprintf+0x14>
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f7ff fa1c 	bl	800834c <__sinit>
 8008f14:	ab05      	add	r3, sp, #20
 8008f16:	9a04      	ldr	r2, [sp, #16]
 8008f18:	68a1      	ldr	r1, [r4, #8]
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f002 f809 	bl	800af34 <_vfiprintf_r>
 8008f22:	b002      	add	sp, #8
 8008f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f28:	b004      	add	sp, #16
 8008f2a:	4770      	bx	lr
 8008f2c:	20000104 	.word	0x20000104

08008f30 <_puts_r>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	460e      	mov	r6, r1
 8008f34:	4605      	mov	r5, r0
 8008f36:	b118      	cbz	r0, 8008f40 <_puts_r+0x10>
 8008f38:	6983      	ldr	r3, [r0, #24]
 8008f3a:	b90b      	cbnz	r3, 8008f40 <_puts_r+0x10>
 8008f3c:	f7ff fa06 	bl	800834c <__sinit>
 8008f40:	69ab      	ldr	r3, [r5, #24]
 8008f42:	68ac      	ldr	r4, [r5, #8]
 8008f44:	b913      	cbnz	r3, 8008f4c <_puts_r+0x1c>
 8008f46:	4628      	mov	r0, r5
 8008f48:	f7ff fa00 	bl	800834c <__sinit>
 8008f4c:	4b2c      	ldr	r3, [pc, #176]	; (8009000 <_puts_r+0xd0>)
 8008f4e:	429c      	cmp	r4, r3
 8008f50:	d120      	bne.n	8008f94 <_puts_r+0x64>
 8008f52:	686c      	ldr	r4, [r5, #4]
 8008f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f56:	07db      	lsls	r3, r3, #31
 8008f58:	d405      	bmi.n	8008f66 <_puts_r+0x36>
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	0598      	lsls	r0, r3, #22
 8008f5e:	d402      	bmi.n	8008f66 <_puts_r+0x36>
 8008f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f62:	f7ff fab6 	bl	80084d2 <__retarget_lock_acquire_recursive>
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	0719      	lsls	r1, r3, #28
 8008f6a:	d51d      	bpl.n	8008fa8 <_puts_r+0x78>
 8008f6c:	6923      	ldr	r3, [r4, #16]
 8008f6e:	b1db      	cbz	r3, 8008fa8 <_puts_r+0x78>
 8008f70:	3e01      	subs	r6, #1
 8008f72:	68a3      	ldr	r3, [r4, #8]
 8008f74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	60a3      	str	r3, [r4, #8]
 8008f7c:	bb39      	cbnz	r1, 8008fce <_puts_r+0x9e>
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	da38      	bge.n	8008ff4 <_puts_r+0xc4>
 8008f82:	4622      	mov	r2, r4
 8008f84:	210a      	movs	r1, #10
 8008f86:	4628      	mov	r0, r5
 8008f88:	f000 f988 	bl	800929c <__swbuf_r>
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d011      	beq.n	8008fb4 <_puts_r+0x84>
 8008f90:	250a      	movs	r5, #10
 8008f92:	e011      	b.n	8008fb8 <_puts_r+0x88>
 8008f94:	4b1b      	ldr	r3, [pc, #108]	; (8009004 <_puts_r+0xd4>)
 8008f96:	429c      	cmp	r4, r3
 8008f98:	d101      	bne.n	8008f9e <_puts_r+0x6e>
 8008f9a:	68ac      	ldr	r4, [r5, #8]
 8008f9c:	e7da      	b.n	8008f54 <_puts_r+0x24>
 8008f9e:	4b1a      	ldr	r3, [pc, #104]	; (8009008 <_puts_r+0xd8>)
 8008fa0:	429c      	cmp	r4, r3
 8008fa2:	bf08      	it	eq
 8008fa4:	68ec      	ldreq	r4, [r5, #12]
 8008fa6:	e7d5      	b.n	8008f54 <_puts_r+0x24>
 8008fa8:	4621      	mov	r1, r4
 8008faa:	4628      	mov	r0, r5
 8008fac:	f000 f9da 	bl	8009364 <__swsetup_r>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d0dd      	beq.n	8008f70 <_puts_r+0x40>
 8008fb4:	f04f 35ff 	mov.w	r5, #4294967295
 8008fb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fba:	07da      	lsls	r2, r3, #31
 8008fbc:	d405      	bmi.n	8008fca <_puts_r+0x9a>
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	059b      	lsls	r3, r3, #22
 8008fc2:	d402      	bmi.n	8008fca <_puts_r+0x9a>
 8008fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fc6:	f7ff fa85 	bl	80084d4 <__retarget_lock_release_recursive>
 8008fca:	4628      	mov	r0, r5
 8008fcc:	bd70      	pop	{r4, r5, r6, pc}
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	da04      	bge.n	8008fdc <_puts_r+0xac>
 8008fd2:	69a2      	ldr	r2, [r4, #24]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	dc06      	bgt.n	8008fe6 <_puts_r+0xb6>
 8008fd8:	290a      	cmp	r1, #10
 8008fda:	d004      	beq.n	8008fe6 <_puts_r+0xb6>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	6022      	str	r2, [r4, #0]
 8008fe2:	7019      	strb	r1, [r3, #0]
 8008fe4:	e7c5      	b.n	8008f72 <_puts_r+0x42>
 8008fe6:	4622      	mov	r2, r4
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f000 f957 	bl	800929c <__swbuf_r>
 8008fee:	3001      	adds	r0, #1
 8008ff0:	d1bf      	bne.n	8008f72 <_puts_r+0x42>
 8008ff2:	e7df      	b.n	8008fb4 <_puts_r+0x84>
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	250a      	movs	r5, #10
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	6022      	str	r2, [r4, #0]
 8008ffc:	701d      	strb	r5, [r3, #0]
 8008ffe:	e7db      	b.n	8008fb8 <_puts_r+0x88>
 8009000:	0800bd3c 	.word	0x0800bd3c
 8009004:	0800bd5c 	.word	0x0800bd5c
 8009008:	0800bd1c 	.word	0x0800bd1c

0800900c <puts>:
 800900c:	4b02      	ldr	r3, [pc, #8]	; (8009018 <puts+0xc>)
 800900e:	4601      	mov	r1, r0
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	f7ff bf8d 	b.w	8008f30 <_puts_r>
 8009016:	bf00      	nop
 8009018:	20000104 	.word	0x20000104

0800901c <_sbrk_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d06      	ldr	r5, [pc, #24]	; (8009038 <_sbrk_r+0x1c>)
 8009020:	2300      	movs	r3, #0
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	f7fa fb28 	bl	800367c <_sbrk>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_sbrk_r+0x1a>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_sbrk_r+0x1a>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	20000c80 	.word	0x20000c80

0800903c <sniprintf>:
 800903c:	b40c      	push	{r2, r3}
 800903e:	b530      	push	{r4, r5, lr}
 8009040:	4b17      	ldr	r3, [pc, #92]	; (80090a0 <sniprintf+0x64>)
 8009042:	1e0c      	subs	r4, r1, #0
 8009044:	681d      	ldr	r5, [r3, #0]
 8009046:	b09d      	sub	sp, #116	; 0x74
 8009048:	da08      	bge.n	800905c <sniprintf+0x20>
 800904a:	238b      	movs	r3, #139	; 0x8b
 800904c:	602b      	str	r3, [r5, #0]
 800904e:	f04f 30ff 	mov.w	r0, #4294967295
 8009052:	b01d      	add	sp, #116	; 0x74
 8009054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009058:	b002      	add	sp, #8
 800905a:	4770      	bx	lr
 800905c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009060:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009064:	bf14      	ite	ne
 8009066:	f104 33ff 	addne.w	r3, r4, #4294967295
 800906a:	4623      	moveq	r3, r4
 800906c:	9304      	str	r3, [sp, #16]
 800906e:	9307      	str	r3, [sp, #28]
 8009070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009074:	9002      	str	r0, [sp, #8]
 8009076:	9006      	str	r0, [sp, #24]
 8009078:	f8ad 3016 	strh.w	r3, [sp, #22]
 800907c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800907e:	ab21      	add	r3, sp, #132	; 0x84
 8009080:	a902      	add	r1, sp, #8
 8009082:	4628      	mov	r0, r5
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	f001 fe2b 	bl	800ace0 <_svfiprintf_r>
 800908a:	1c43      	adds	r3, r0, #1
 800908c:	bfbc      	itt	lt
 800908e:	238b      	movlt	r3, #139	; 0x8b
 8009090:	602b      	strlt	r3, [r5, #0]
 8009092:	2c00      	cmp	r4, #0
 8009094:	d0dd      	beq.n	8009052 <sniprintf+0x16>
 8009096:	9b02      	ldr	r3, [sp, #8]
 8009098:	2200      	movs	r2, #0
 800909a:	701a      	strb	r2, [r3, #0]
 800909c:	e7d9      	b.n	8009052 <sniprintf+0x16>
 800909e:	bf00      	nop
 80090a0:	20000104 	.word	0x20000104

080090a4 <siprintf>:
 80090a4:	b40e      	push	{r1, r2, r3}
 80090a6:	b500      	push	{lr}
 80090a8:	b09c      	sub	sp, #112	; 0x70
 80090aa:	ab1d      	add	r3, sp, #116	; 0x74
 80090ac:	9002      	str	r0, [sp, #8]
 80090ae:	9006      	str	r0, [sp, #24]
 80090b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090b4:	4809      	ldr	r0, [pc, #36]	; (80090dc <siprintf+0x38>)
 80090b6:	9107      	str	r1, [sp, #28]
 80090b8:	9104      	str	r1, [sp, #16]
 80090ba:	4909      	ldr	r1, [pc, #36]	; (80090e0 <siprintf+0x3c>)
 80090bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c0:	9105      	str	r1, [sp, #20]
 80090c2:	6800      	ldr	r0, [r0, #0]
 80090c4:	9301      	str	r3, [sp, #4]
 80090c6:	a902      	add	r1, sp, #8
 80090c8:	f001 fe0a 	bl	800ace0 <_svfiprintf_r>
 80090cc:	9b02      	ldr	r3, [sp, #8]
 80090ce:	2200      	movs	r2, #0
 80090d0:	701a      	strb	r2, [r3, #0]
 80090d2:	b01c      	add	sp, #112	; 0x70
 80090d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80090d8:	b003      	add	sp, #12
 80090da:	4770      	bx	lr
 80090dc:	20000104 	.word	0x20000104
 80090e0:	ffff0208 	.word	0xffff0208

080090e4 <__sread>:
 80090e4:	b510      	push	{r4, lr}
 80090e6:	460c      	mov	r4, r1
 80090e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ec:	f002 f852 	bl	800b194 <_read_r>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	bfab      	itete	ge
 80090f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090f6:	89a3      	ldrhlt	r3, [r4, #12]
 80090f8:	181b      	addge	r3, r3, r0
 80090fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090fe:	bfac      	ite	ge
 8009100:	6563      	strge	r3, [r4, #84]	; 0x54
 8009102:	81a3      	strhlt	r3, [r4, #12]
 8009104:	bd10      	pop	{r4, pc}

08009106 <__swrite>:
 8009106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910a:	461f      	mov	r7, r3
 800910c:	898b      	ldrh	r3, [r1, #12]
 800910e:	05db      	lsls	r3, r3, #23
 8009110:	4605      	mov	r5, r0
 8009112:	460c      	mov	r4, r1
 8009114:	4616      	mov	r6, r2
 8009116:	d505      	bpl.n	8009124 <__swrite+0x1e>
 8009118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911c:	2302      	movs	r3, #2
 800911e:	2200      	movs	r2, #0
 8009120:	f001 f910 	bl	800a344 <_lseek_r>
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800912a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800912e:	81a3      	strh	r3, [r4, #12]
 8009130:	4632      	mov	r2, r6
 8009132:	463b      	mov	r3, r7
 8009134:	4628      	mov	r0, r5
 8009136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800913a:	f000 b901 	b.w	8009340 <_write_r>

0800913e <__sseek>:
 800913e:	b510      	push	{r4, lr}
 8009140:	460c      	mov	r4, r1
 8009142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009146:	f001 f8fd 	bl	800a344 <_lseek_r>
 800914a:	1c43      	adds	r3, r0, #1
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	bf15      	itete	ne
 8009150:	6560      	strne	r0, [r4, #84]	; 0x54
 8009152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800915a:	81a3      	strheq	r3, [r4, #12]
 800915c:	bf18      	it	ne
 800915e:	81a3      	strhne	r3, [r4, #12]
 8009160:	bd10      	pop	{r4, pc}

08009162 <__sclose>:
 8009162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009166:	f000 b989 	b.w	800947c <_close_r>

0800916a <strncmp>:
 800916a:	b510      	push	{r4, lr}
 800916c:	b17a      	cbz	r2, 800918e <strncmp+0x24>
 800916e:	4603      	mov	r3, r0
 8009170:	3901      	subs	r1, #1
 8009172:	1884      	adds	r4, r0, r2
 8009174:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009178:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800917c:	4290      	cmp	r0, r2
 800917e:	d101      	bne.n	8009184 <strncmp+0x1a>
 8009180:	42a3      	cmp	r3, r4
 8009182:	d101      	bne.n	8009188 <strncmp+0x1e>
 8009184:	1a80      	subs	r0, r0, r2
 8009186:	bd10      	pop	{r4, pc}
 8009188:	2800      	cmp	r0, #0
 800918a:	d1f3      	bne.n	8009174 <strncmp+0xa>
 800918c:	e7fa      	b.n	8009184 <strncmp+0x1a>
 800918e:	4610      	mov	r0, r2
 8009190:	e7f9      	b.n	8009186 <strncmp+0x1c>

08009192 <strncpy>:
 8009192:	b510      	push	{r4, lr}
 8009194:	3901      	subs	r1, #1
 8009196:	4603      	mov	r3, r0
 8009198:	b132      	cbz	r2, 80091a8 <strncpy+0x16>
 800919a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800919e:	f803 4b01 	strb.w	r4, [r3], #1
 80091a2:	3a01      	subs	r2, #1
 80091a4:	2c00      	cmp	r4, #0
 80091a6:	d1f7      	bne.n	8009198 <strncpy+0x6>
 80091a8:	441a      	add	r2, r3
 80091aa:	2100      	movs	r1, #0
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d100      	bne.n	80091b2 <strncpy+0x20>
 80091b0:	bd10      	pop	{r4, pc}
 80091b2:	f803 1b01 	strb.w	r1, [r3], #1
 80091b6:	e7f9      	b.n	80091ac <strncpy+0x1a>

080091b8 <strstr>:
 80091b8:	780a      	ldrb	r2, [r1, #0]
 80091ba:	b570      	push	{r4, r5, r6, lr}
 80091bc:	b96a      	cbnz	r2, 80091da <strstr+0x22>
 80091be:	bd70      	pop	{r4, r5, r6, pc}
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d109      	bne.n	80091d8 <strstr+0x20>
 80091c4:	460c      	mov	r4, r1
 80091c6:	4605      	mov	r5, r0
 80091c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0f6      	beq.n	80091be <strstr+0x6>
 80091d0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80091d4:	429e      	cmp	r6, r3
 80091d6:	d0f7      	beq.n	80091c8 <strstr+0x10>
 80091d8:	3001      	adds	r0, #1
 80091da:	7803      	ldrb	r3, [r0, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1ef      	bne.n	80091c0 <strstr+0x8>
 80091e0:	4618      	mov	r0, r3
 80091e2:	e7ec      	b.n	80091be <strstr+0x6>

080091e4 <strtok>:
 80091e4:	4b16      	ldr	r3, [pc, #88]	; (8009240 <strtok+0x5c>)
 80091e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091e8:	681e      	ldr	r6, [r3, #0]
 80091ea:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80091ec:	4605      	mov	r5, r0
 80091ee:	b9fc      	cbnz	r4, 8009230 <strtok+0x4c>
 80091f0:	2050      	movs	r0, #80	; 0x50
 80091f2:	9101      	str	r1, [sp, #4]
 80091f4:	f001 f91e 	bl	800a434 <malloc>
 80091f8:	9901      	ldr	r1, [sp, #4]
 80091fa:	65b0      	str	r0, [r6, #88]	; 0x58
 80091fc:	4602      	mov	r2, r0
 80091fe:	b920      	cbnz	r0, 800920a <strtok+0x26>
 8009200:	4b10      	ldr	r3, [pc, #64]	; (8009244 <strtok+0x60>)
 8009202:	4811      	ldr	r0, [pc, #68]	; (8009248 <strtok+0x64>)
 8009204:	2157      	movs	r1, #87	; 0x57
 8009206:	f000 f91b 	bl	8009440 <__assert_func>
 800920a:	e9c0 4400 	strd	r4, r4, [r0]
 800920e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009212:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009216:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800921a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800921e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009222:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009226:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800922a:	6184      	str	r4, [r0, #24]
 800922c:	7704      	strb	r4, [r0, #28]
 800922e:	6244      	str	r4, [r0, #36]	; 0x24
 8009230:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8009232:	2301      	movs	r3, #1
 8009234:	4628      	mov	r0, r5
 8009236:	b002      	add	sp, #8
 8009238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800923c:	f000 b806 	b.w	800924c <__strtok_r>
 8009240:	20000104 	.word	0x20000104
 8009244:	0800bdb4 	.word	0x0800bdb4
 8009248:	0800bdcb 	.word	0x0800bdcb

0800924c <__strtok_r>:
 800924c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800924e:	b908      	cbnz	r0, 8009254 <__strtok_r+0x8>
 8009250:	6810      	ldr	r0, [r2, #0]
 8009252:	b188      	cbz	r0, 8009278 <__strtok_r+0x2c>
 8009254:	4604      	mov	r4, r0
 8009256:	4620      	mov	r0, r4
 8009258:	f814 5b01 	ldrb.w	r5, [r4], #1
 800925c:	460f      	mov	r7, r1
 800925e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009262:	b91e      	cbnz	r6, 800926c <__strtok_r+0x20>
 8009264:	b965      	cbnz	r5, 8009280 <__strtok_r+0x34>
 8009266:	6015      	str	r5, [r2, #0]
 8009268:	4628      	mov	r0, r5
 800926a:	e005      	b.n	8009278 <__strtok_r+0x2c>
 800926c:	42b5      	cmp	r5, r6
 800926e:	d1f6      	bne.n	800925e <__strtok_r+0x12>
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1f0      	bne.n	8009256 <__strtok_r+0xa>
 8009274:	6014      	str	r4, [r2, #0]
 8009276:	7003      	strb	r3, [r0, #0]
 8009278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800927a:	461c      	mov	r4, r3
 800927c:	e00c      	b.n	8009298 <__strtok_r+0x4c>
 800927e:	b915      	cbnz	r5, 8009286 <__strtok_r+0x3a>
 8009280:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009284:	460e      	mov	r6, r1
 8009286:	f816 5b01 	ldrb.w	r5, [r6], #1
 800928a:	42ab      	cmp	r3, r5
 800928c:	d1f7      	bne.n	800927e <__strtok_r+0x32>
 800928e:	2b00      	cmp	r3, #0
 8009290:	d0f3      	beq.n	800927a <__strtok_r+0x2e>
 8009292:	2300      	movs	r3, #0
 8009294:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009298:	6014      	str	r4, [r2, #0]
 800929a:	e7ed      	b.n	8009278 <__strtok_r+0x2c>

0800929c <__swbuf_r>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	460e      	mov	r6, r1
 80092a0:	4614      	mov	r4, r2
 80092a2:	4605      	mov	r5, r0
 80092a4:	b118      	cbz	r0, 80092ae <__swbuf_r+0x12>
 80092a6:	6983      	ldr	r3, [r0, #24]
 80092a8:	b90b      	cbnz	r3, 80092ae <__swbuf_r+0x12>
 80092aa:	f7ff f84f 	bl	800834c <__sinit>
 80092ae:	4b21      	ldr	r3, [pc, #132]	; (8009334 <__swbuf_r+0x98>)
 80092b0:	429c      	cmp	r4, r3
 80092b2:	d12b      	bne.n	800930c <__swbuf_r+0x70>
 80092b4:	686c      	ldr	r4, [r5, #4]
 80092b6:	69a3      	ldr	r3, [r4, #24]
 80092b8:	60a3      	str	r3, [r4, #8]
 80092ba:	89a3      	ldrh	r3, [r4, #12]
 80092bc:	071a      	lsls	r2, r3, #28
 80092be:	d52f      	bpl.n	8009320 <__swbuf_r+0x84>
 80092c0:	6923      	ldr	r3, [r4, #16]
 80092c2:	b36b      	cbz	r3, 8009320 <__swbuf_r+0x84>
 80092c4:	6923      	ldr	r3, [r4, #16]
 80092c6:	6820      	ldr	r0, [r4, #0]
 80092c8:	1ac0      	subs	r0, r0, r3
 80092ca:	6963      	ldr	r3, [r4, #20]
 80092cc:	b2f6      	uxtb	r6, r6
 80092ce:	4283      	cmp	r3, r0
 80092d0:	4637      	mov	r7, r6
 80092d2:	dc04      	bgt.n	80092de <__swbuf_r+0x42>
 80092d4:	4621      	mov	r1, r4
 80092d6:	4628      	mov	r0, r5
 80092d8:	f000 ffe2 	bl	800a2a0 <_fflush_r>
 80092dc:	bb30      	cbnz	r0, 800932c <__swbuf_r+0x90>
 80092de:	68a3      	ldr	r3, [r4, #8]
 80092e0:	3b01      	subs	r3, #1
 80092e2:	60a3      	str	r3, [r4, #8]
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	6022      	str	r2, [r4, #0]
 80092ea:	701e      	strb	r6, [r3, #0]
 80092ec:	6963      	ldr	r3, [r4, #20]
 80092ee:	3001      	adds	r0, #1
 80092f0:	4283      	cmp	r3, r0
 80092f2:	d004      	beq.n	80092fe <__swbuf_r+0x62>
 80092f4:	89a3      	ldrh	r3, [r4, #12]
 80092f6:	07db      	lsls	r3, r3, #31
 80092f8:	d506      	bpl.n	8009308 <__swbuf_r+0x6c>
 80092fa:	2e0a      	cmp	r6, #10
 80092fc:	d104      	bne.n	8009308 <__swbuf_r+0x6c>
 80092fe:	4621      	mov	r1, r4
 8009300:	4628      	mov	r0, r5
 8009302:	f000 ffcd 	bl	800a2a0 <_fflush_r>
 8009306:	b988      	cbnz	r0, 800932c <__swbuf_r+0x90>
 8009308:	4638      	mov	r0, r7
 800930a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800930c:	4b0a      	ldr	r3, [pc, #40]	; (8009338 <__swbuf_r+0x9c>)
 800930e:	429c      	cmp	r4, r3
 8009310:	d101      	bne.n	8009316 <__swbuf_r+0x7a>
 8009312:	68ac      	ldr	r4, [r5, #8]
 8009314:	e7cf      	b.n	80092b6 <__swbuf_r+0x1a>
 8009316:	4b09      	ldr	r3, [pc, #36]	; (800933c <__swbuf_r+0xa0>)
 8009318:	429c      	cmp	r4, r3
 800931a:	bf08      	it	eq
 800931c:	68ec      	ldreq	r4, [r5, #12]
 800931e:	e7ca      	b.n	80092b6 <__swbuf_r+0x1a>
 8009320:	4621      	mov	r1, r4
 8009322:	4628      	mov	r0, r5
 8009324:	f000 f81e 	bl	8009364 <__swsetup_r>
 8009328:	2800      	cmp	r0, #0
 800932a:	d0cb      	beq.n	80092c4 <__swbuf_r+0x28>
 800932c:	f04f 37ff 	mov.w	r7, #4294967295
 8009330:	e7ea      	b.n	8009308 <__swbuf_r+0x6c>
 8009332:	bf00      	nop
 8009334:	0800bd3c 	.word	0x0800bd3c
 8009338:	0800bd5c 	.word	0x0800bd5c
 800933c:	0800bd1c 	.word	0x0800bd1c

08009340 <_write_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4d07      	ldr	r5, [pc, #28]	; (8009360 <_write_r+0x20>)
 8009344:	4604      	mov	r4, r0
 8009346:	4608      	mov	r0, r1
 8009348:	4611      	mov	r1, r2
 800934a:	2200      	movs	r2, #0
 800934c:	602a      	str	r2, [r5, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	f7fe fda1 	bl	8007e96 <_write>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_write_r+0x1e>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_write_r+0x1e>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	20000c80 	.word	0x20000c80

08009364 <__swsetup_r>:
 8009364:	4b32      	ldr	r3, [pc, #200]	; (8009430 <__swsetup_r+0xcc>)
 8009366:	b570      	push	{r4, r5, r6, lr}
 8009368:	681d      	ldr	r5, [r3, #0]
 800936a:	4606      	mov	r6, r0
 800936c:	460c      	mov	r4, r1
 800936e:	b125      	cbz	r5, 800937a <__swsetup_r+0x16>
 8009370:	69ab      	ldr	r3, [r5, #24]
 8009372:	b913      	cbnz	r3, 800937a <__swsetup_r+0x16>
 8009374:	4628      	mov	r0, r5
 8009376:	f7fe ffe9 	bl	800834c <__sinit>
 800937a:	4b2e      	ldr	r3, [pc, #184]	; (8009434 <__swsetup_r+0xd0>)
 800937c:	429c      	cmp	r4, r3
 800937e:	d10f      	bne.n	80093a0 <__swsetup_r+0x3c>
 8009380:	686c      	ldr	r4, [r5, #4]
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009388:	0719      	lsls	r1, r3, #28
 800938a:	d42c      	bmi.n	80093e6 <__swsetup_r+0x82>
 800938c:	06dd      	lsls	r5, r3, #27
 800938e:	d411      	bmi.n	80093b4 <__swsetup_r+0x50>
 8009390:	2309      	movs	r3, #9
 8009392:	6033      	str	r3, [r6, #0]
 8009394:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	f04f 30ff 	mov.w	r0, #4294967295
 800939e:	e03e      	b.n	800941e <__swsetup_r+0xba>
 80093a0:	4b25      	ldr	r3, [pc, #148]	; (8009438 <__swsetup_r+0xd4>)
 80093a2:	429c      	cmp	r4, r3
 80093a4:	d101      	bne.n	80093aa <__swsetup_r+0x46>
 80093a6:	68ac      	ldr	r4, [r5, #8]
 80093a8:	e7eb      	b.n	8009382 <__swsetup_r+0x1e>
 80093aa:	4b24      	ldr	r3, [pc, #144]	; (800943c <__swsetup_r+0xd8>)
 80093ac:	429c      	cmp	r4, r3
 80093ae:	bf08      	it	eq
 80093b0:	68ec      	ldreq	r4, [r5, #12]
 80093b2:	e7e6      	b.n	8009382 <__swsetup_r+0x1e>
 80093b4:	0758      	lsls	r0, r3, #29
 80093b6:	d512      	bpl.n	80093de <__swsetup_r+0x7a>
 80093b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093ba:	b141      	cbz	r1, 80093ce <__swsetup_r+0x6a>
 80093bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093c0:	4299      	cmp	r1, r3
 80093c2:	d002      	beq.n	80093ca <__swsetup_r+0x66>
 80093c4:	4630      	mov	r0, r6
 80093c6:	f001 fbe3 	bl	800ab90 <_free_r>
 80093ca:	2300      	movs	r3, #0
 80093cc:	6363      	str	r3, [r4, #52]	; 0x34
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	2300      	movs	r3, #0
 80093d8:	6063      	str	r3, [r4, #4]
 80093da:	6923      	ldr	r3, [r4, #16]
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	f043 0308 	orr.w	r3, r3, #8
 80093e4:	81a3      	strh	r3, [r4, #12]
 80093e6:	6923      	ldr	r3, [r4, #16]
 80093e8:	b94b      	cbnz	r3, 80093fe <__swsetup_r+0x9a>
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093f4:	d003      	beq.n	80093fe <__swsetup_r+0x9a>
 80093f6:	4621      	mov	r1, r4
 80093f8:	4630      	mov	r0, r6
 80093fa:	f000 ffdb 	bl	800a3b4 <__smakebuf_r>
 80093fe:	89a0      	ldrh	r0, [r4, #12]
 8009400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009404:	f010 0301 	ands.w	r3, r0, #1
 8009408:	d00a      	beq.n	8009420 <__swsetup_r+0xbc>
 800940a:	2300      	movs	r3, #0
 800940c:	60a3      	str	r3, [r4, #8]
 800940e:	6963      	ldr	r3, [r4, #20]
 8009410:	425b      	negs	r3, r3
 8009412:	61a3      	str	r3, [r4, #24]
 8009414:	6923      	ldr	r3, [r4, #16]
 8009416:	b943      	cbnz	r3, 800942a <__swsetup_r+0xc6>
 8009418:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800941c:	d1ba      	bne.n	8009394 <__swsetup_r+0x30>
 800941e:	bd70      	pop	{r4, r5, r6, pc}
 8009420:	0781      	lsls	r1, r0, #30
 8009422:	bf58      	it	pl
 8009424:	6963      	ldrpl	r3, [r4, #20]
 8009426:	60a3      	str	r3, [r4, #8]
 8009428:	e7f4      	b.n	8009414 <__swsetup_r+0xb0>
 800942a:	2000      	movs	r0, #0
 800942c:	e7f7      	b.n	800941e <__swsetup_r+0xba>
 800942e:	bf00      	nop
 8009430:	20000104 	.word	0x20000104
 8009434:	0800bd3c 	.word	0x0800bd3c
 8009438:	0800bd5c 	.word	0x0800bd5c
 800943c:	0800bd1c 	.word	0x0800bd1c

08009440 <__assert_func>:
 8009440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009442:	4614      	mov	r4, r2
 8009444:	461a      	mov	r2, r3
 8009446:	4b09      	ldr	r3, [pc, #36]	; (800946c <__assert_func+0x2c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4605      	mov	r5, r0
 800944c:	68d8      	ldr	r0, [r3, #12]
 800944e:	b14c      	cbz	r4, 8009464 <__assert_func+0x24>
 8009450:	4b07      	ldr	r3, [pc, #28]	; (8009470 <__assert_func+0x30>)
 8009452:	9100      	str	r1, [sp, #0]
 8009454:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009458:	4906      	ldr	r1, [pc, #24]	; (8009474 <__assert_func+0x34>)
 800945a:	462b      	mov	r3, r5
 800945c:	f000 ff5c 	bl	800a318 <fiprintf>
 8009460:	f001 feaa 	bl	800b1b8 <abort>
 8009464:	4b04      	ldr	r3, [pc, #16]	; (8009478 <__assert_func+0x38>)
 8009466:	461c      	mov	r4, r3
 8009468:	e7f3      	b.n	8009452 <__assert_func+0x12>
 800946a:	bf00      	nop
 800946c:	20000104 	.word	0x20000104
 8009470:	0800be28 	.word	0x0800be28
 8009474:	0800be35 	.word	0x0800be35
 8009478:	0800be63 	.word	0x0800be63

0800947c <_close_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4d06      	ldr	r5, [pc, #24]	; (8009498 <_close_r+0x1c>)
 8009480:	2300      	movs	r3, #0
 8009482:	4604      	mov	r4, r0
 8009484:	4608      	mov	r0, r1
 8009486:	602b      	str	r3, [r5, #0]
 8009488:	f7fe fd36 	bl	8007ef8 <_close>
 800948c:	1c43      	adds	r3, r0, #1
 800948e:	d102      	bne.n	8009496 <_close_r+0x1a>
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	b103      	cbz	r3, 8009496 <_close_r+0x1a>
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	bd38      	pop	{r3, r4, r5, pc}
 8009498:	20000c80 	.word	0x20000c80

0800949c <quorem>:
 800949c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a0:	6903      	ldr	r3, [r0, #16]
 80094a2:	690c      	ldr	r4, [r1, #16]
 80094a4:	42a3      	cmp	r3, r4
 80094a6:	4607      	mov	r7, r0
 80094a8:	f2c0 8081 	blt.w	80095ae <quorem+0x112>
 80094ac:	3c01      	subs	r4, #1
 80094ae:	f101 0814 	add.w	r8, r1, #20
 80094b2:	f100 0514 	add.w	r5, r0, #20
 80094b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094ba:	9301      	str	r3, [sp, #4]
 80094bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094c4:	3301      	adds	r3, #1
 80094c6:	429a      	cmp	r2, r3
 80094c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80094d4:	d331      	bcc.n	800953a <quorem+0x9e>
 80094d6:	f04f 0e00 	mov.w	lr, #0
 80094da:	4640      	mov	r0, r8
 80094dc:	46ac      	mov	ip, r5
 80094de:	46f2      	mov	sl, lr
 80094e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80094e4:	b293      	uxth	r3, r2
 80094e6:	fb06 e303 	mla	r3, r6, r3, lr
 80094ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	ebaa 0303 	sub.w	r3, sl, r3
 80094f4:	f8dc a000 	ldr.w	sl, [ip]
 80094f8:	0c12      	lsrs	r2, r2, #16
 80094fa:	fa13 f38a 	uxtah	r3, r3, sl
 80094fe:	fb06 e202 	mla	r2, r6, r2, lr
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	9b00      	ldr	r3, [sp, #0]
 8009506:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800950a:	b292      	uxth	r2, r2
 800950c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009514:	f8bd 3000 	ldrh.w	r3, [sp]
 8009518:	4581      	cmp	r9, r0
 800951a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800951e:	f84c 3b04 	str.w	r3, [ip], #4
 8009522:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009526:	d2db      	bcs.n	80094e0 <quorem+0x44>
 8009528:	f855 300b 	ldr.w	r3, [r5, fp]
 800952c:	b92b      	cbnz	r3, 800953a <quorem+0x9e>
 800952e:	9b01      	ldr	r3, [sp, #4]
 8009530:	3b04      	subs	r3, #4
 8009532:	429d      	cmp	r5, r3
 8009534:	461a      	mov	r2, r3
 8009536:	d32e      	bcc.n	8009596 <quorem+0xfa>
 8009538:	613c      	str	r4, [r7, #16]
 800953a:	4638      	mov	r0, r7
 800953c:	f001 fa10 	bl	800a960 <__mcmp>
 8009540:	2800      	cmp	r0, #0
 8009542:	db24      	blt.n	800958e <quorem+0xf2>
 8009544:	3601      	adds	r6, #1
 8009546:	4628      	mov	r0, r5
 8009548:	f04f 0c00 	mov.w	ip, #0
 800954c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009550:	f8d0 e000 	ldr.w	lr, [r0]
 8009554:	b293      	uxth	r3, r2
 8009556:	ebac 0303 	sub.w	r3, ip, r3
 800955a:	0c12      	lsrs	r2, r2, #16
 800955c:	fa13 f38e 	uxtah	r3, r3, lr
 8009560:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009568:	b29b      	uxth	r3, r3
 800956a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800956e:	45c1      	cmp	r9, r8
 8009570:	f840 3b04 	str.w	r3, [r0], #4
 8009574:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009578:	d2e8      	bcs.n	800954c <quorem+0xb0>
 800957a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800957e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009582:	b922      	cbnz	r2, 800958e <quorem+0xf2>
 8009584:	3b04      	subs	r3, #4
 8009586:	429d      	cmp	r5, r3
 8009588:	461a      	mov	r2, r3
 800958a:	d30a      	bcc.n	80095a2 <quorem+0x106>
 800958c:	613c      	str	r4, [r7, #16]
 800958e:	4630      	mov	r0, r6
 8009590:	b003      	add	sp, #12
 8009592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	3b04      	subs	r3, #4
 800959a:	2a00      	cmp	r2, #0
 800959c:	d1cc      	bne.n	8009538 <quorem+0x9c>
 800959e:	3c01      	subs	r4, #1
 80095a0:	e7c7      	b.n	8009532 <quorem+0x96>
 80095a2:	6812      	ldr	r2, [r2, #0]
 80095a4:	3b04      	subs	r3, #4
 80095a6:	2a00      	cmp	r2, #0
 80095a8:	d1f0      	bne.n	800958c <quorem+0xf0>
 80095aa:	3c01      	subs	r4, #1
 80095ac:	e7eb      	b.n	8009586 <quorem+0xea>
 80095ae:	2000      	movs	r0, #0
 80095b0:	e7ee      	b.n	8009590 <quorem+0xf4>
 80095b2:	0000      	movs	r0, r0
 80095b4:	0000      	movs	r0, r0
	...

080095b8 <_dtoa_r>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	ed2d 8b04 	vpush	{d8-d9}
 80095c0:	ec57 6b10 	vmov	r6, r7, d0
 80095c4:	b093      	sub	sp, #76	; 0x4c
 80095c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095cc:	9106      	str	r1, [sp, #24]
 80095ce:	ee10 aa10 	vmov	sl, s0
 80095d2:	4604      	mov	r4, r0
 80095d4:	9209      	str	r2, [sp, #36]	; 0x24
 80095d6:	930c      	str	r3, [sp, #48]	; 0x30
 80095d8:	46bb      	mov	fp, r7
 80095da:	b975      	cbnz	r5, 80095fa <_dtoa_r+0x42>
 80095dc:	2010      	movs	r0, #16
 80095de:	f000 ff29 	bl	800a434 <malloc>
 80095e2:	4602      	mov	r2, r0
 80095e4:	6260      	str	r0, [r4, #36]	; 0x24
 80095e6:	b920      	cbnz	r0, 80095f2 <_dtoa_r+0x3a>
 80095e8:	4ba7      	ldr	r3, [pc, #668]	; (8009888 <_dtoa_r+0x2d0>)
 80095ea:	21ea      	movs	r1, #234	; 0xea
 80095ec:	48a7      	ldr	r0, [pc, #668]	; (800988c <_dtoa_r+0x2d4>)
 80095ee:	f7ff ff27 	bl	8009440 <__assert_func>
 80095f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095f6:	6005      	str	r5, [r0, #0]
 80095f8:	60c5      	str	r5, [r0, #12]
 80095fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095fc:	6819      	ldr	r1, [r3, #0]
 80095fe:	b151      	cbz	r1, 8009616 <_dtoa_r+0x5e>
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	604a      	str	r2, [r1, #4]
 8009604:	2301      	movs	r3, #1
 8009606:	4093      	lsls	r3, r2
 8009608:	608b      	str	r3, [r1, #8]
 800960a:	4620      	mov	r0, r4
 800960c:	f000 ff66 	bl	800a4dc <_Bfree>
 8009610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	1e3b      	subs	r3, r7, #0
 8009618:	bfaa      	itet	ge
 800961a:	2300      	movge	r3, #0
 800961c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009620:	f8c8 3000 	strge.w	r3, [r8]
 8009624:	4b9a      	ldr	r3, [pc, #616]	; (8009890 <_dtoa_r+0x2d8>)
 8009626:	bfbc      	itt	lt
 8009628:	2201      	movlt	r2, #1
 800962a:	f8c8 2000 	strlt.w	r2, [r8]
 800962e:	ea33 030b 	bics.w	r3, r3, fp
 8009632:	d11b      	bne.n	800966c <_dtoa_r+0xb4>
 8009634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009636:	f242 730f 	movw	r3, #9999	; 0x270f
 800963a:	6013      	str	r3, [r2, #0]
 800963c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009640:	4333      	orrs	r3, r6
 8009642:	f000 8592 	beq.w	800a16a <_dtoa_r+0xbb2>
 8009646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009648:	b963      	cbnz	r3, 8009664 <_dtoa_r+0xac>
 800964a:	4b92      	ldr	r3, [pc, #584]	; (8009894 <_dtoa_r+0x2dc>)
 800964c:	e022      	b.n	8009694 <_dtoa_r+0xdc>
 800964e:	4b92      	ldr	r3, [pc, #584]	; (8009898 <_dtoa_r+0x2e0>)
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	3308      	adds	r3, #8
 8009654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	9801      	ldr	r0, [sp, #4]
 800965a:	b013      	add	sp, #76	; 0x4c
 800965c:	ecbd 8b04 	vpop	{d8-d9}
 8009660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009664:	4b8b      	ldr	r3, [pc, #556]	; (8009894 <_dtoa_r+0x2dc>)
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	3303      	adds	r3, #3
 800966a:	e7f3      	b.n	8009654 <_dtoa_r+0x9c>
 800966c:	2200      	movs	r2, #0
 800966e:	2300      	movs	r3, #0
 8009670:	4650      	mov	r0, sl
 8009672:	4659      	mov	r1, fp
 8009674:	f7f7 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 8009678:	ec4b ab19 	vmov	d9, sl, fp
 800967c:	4680      	mov	r8, r0
 800967e:	b158      	cbz	r0, 8009698 <_dtoa_r+0xe0>
 8009680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009682:	2301      	movs	r3, #1
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 856b 	beq.w	800a164 <_dtoa_r+0xbac>
 800968e:	4883      	ldr	r0, [pc, #524]	; (800989c <_dtoa_r+0x2e4>)
 8009690:	6018      	str	r0, [r3, #0]
 8009692:	1e43      	subs	r3, r0, #1
 8009694:	9301      	str	r3, [sp, #4]
 8009696:	e7df      	b.n	8009658 <_dtoa_r+0xa0>
 8009698:	ec4b ab10 	vmov	d0, sl, fp
 800969c:	aa10      	add	r2, sp, #64	; 0x40
 800969e:	a911      	add	r1, sp, #68	; 0x44
 80096a0:	4620      	mov	r0, r4
 80096a2:	f001 fa03 	bl	800aaac <__d2b>
 80096a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80096aa:	ee08 0a10 	vmov	s16, r0
 80096ae:	2d00      	cmp	r5, #0
 80096b0:	f000 8084 	beq.w	80097bc <_dtoa_r+0x204>
 80096b4:	ee19 3a90 	vmov	r3, s19
 80096b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80096c0:	4656      	mov	r6, sl
 80096c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80096c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80096ce:	4b74      	ldr	r3, [pc, #464]	; (80098a0 <_dtoa_r+0x2e8>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	4630      	mov	r0, r6
 80096d4:	4639      	mov	r1, r7
 80096d6:	f7f6 fdd7 	bl	8000288 <__aeabi_dsub>
 80096da:	a365      	add	r3, pc, #404	; (adr r3, 8009870 <_dtoa_r+0x2b8>)
 80096dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e0:	f7f6 ff8a 	bl	80005f8 <__aeabi_dmul>
 80096e4:	a364      	add	r3, pc, #400	; (adr r3, 8009878 <_dtoa_r+0x2c0>)
 80096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ea:	f7f6 fdcf 	bl	800028c <__adddf3>
 80096ee:	4606      	mov	r6, r0
 80096f0:	4628      	mov	r0, r5
 80096f2:	460f      	mov	r7, r1
 80096f4:	f7f6 ff16 	bl	8000524 <__aeabi_i2d>
 80096f8:	a361      	add	r3, pc, #388	; (adr r3, 8009880 <_dtoa_r+0x2c8>)
 80096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fe:	f7f6 ff7b 	bl	80005f8 <__aeabi_dmul>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	4630      	mov	r0, r6
 8009708:	4639      	mov	r1, r7
 800970a:	f7f6 fdbf 	bl	800028c <__adddf3>
 800970e:	4606      	mov	r6, r0
 8009710:	460f      	mov	r7, r1
 8009712:	f7f7 fa21 	bl	8000b58 <__aeabi_d2iz>
 8009716:	2200      	movs	r2, #0
 8009718:	9000      	str	r0, [sp, #0]
 800971a:	2300      	movs	r3, #0
 800971c:	4630      	mov	r0, r6
 800971e:	4639      	mov	r1, r7
 8009720:	f7f7 f9dc 	bl	8000adc <__aeabi_dcmplt>
 8009724:	b150      	cbz	r0, 800973c <_dtoa_r+0x184>
 8009726:	9800      	ldr	r0, [sp, #0]
 8009728:	f7f6 fefc 	bl	8000524 <__aeabi_i2d>
 800972c:	4632      	mov	r2, r6
 800972e:	463b      	mov	r3, r7
 8009730:	f7f7 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8009734:	b910      	cbnz	r0, 800973c <_dtoa_r+0x184>
 8009736:	9b00      	ldr	r3, [sp, #0]
 8009738:	3b01      	subs	r3, #1
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	9b00      	ldr	r3, [sp, #0]
 800973e:	2b16      	cmp	r3, #22
 8009740:	d85a      	bhi.n	80097f8 <_dtoa_r+0x240>
 8009742:	9a00      	ldr	r2, [sp, #0]
 8009744:	4b57      	ldr	r3, [pc, #348]	; (80098a4 <_dtoa_r+0x2ec>)
 8009746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	ec51 0b19 	vmov	r0, r1, d9
 8009752:	f7f7 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8009756:	2800      	cmp	r0, #0
 8009758:	d050      	beq.n	80097fc <_dtoa_r+0x244>
 800975a:	9b00      	ldr	r3, [sp, #0]
 800975c:	3b01      	subs	r3, #1
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	2300      	movs	r3, #0
 8009762:	930b      	str	r3, [sp, #44]	; 0x2c
 8009764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009766:	1b5d      	subs	r5, r3, r5
 8009768:	1e6b      	subs	r3, r5, #1
 800976a:	9305      	str	r3, [sp, #20]
 800976c:	bf45      	ittet	mi
 800976e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009772:	9304      	strmi	r3, [sp, #16]
 8009774:	2300      	movpl	r3, #0
 8009776:	2300      	movmi	r3, #0
 8009778:	bf4c      	ite	mi
 800977a:	9305      	strmi	r3, [sp, #20]
 800977c:	9304      	strpl	r3, [sp, #16]
 800977e:	9b00      	ldr	r3, [sp, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	db3d      	blt.n	8009800 <_dtoa_r+0x248>
 8009784:	9b05      	ldr	r3, [sp, #20]
 8009786:	9a00      	ldr	r2, [sp, #0]
 8009788:	920a      	str	r2, [sp, #40]	; 0x28
 800978a:	4413      	add	r3, r2
 800978c:	9305      	str	r3, [sp, #20]
 800978e:	2300      	movs	r3, #0
 8009790:	9307      	str	r3, [sp, #28]
 8009792:	9b06      	ldr	r3, [sp, #24]
 8009794:	2b09      	cmp	r3, #9
 8009796:	f200 8089 	bhi.w	80098ac <_dtoa_r+0x2f4>
 800979a:	2b05      	cmp	r3, #5
 800979c:	bfc4      	itt	gt
 800979e:	3b04      	subgt	r3, #4
 80097a0:	9306      	strgt	r3, [sp, #24]
 80097a2:	9b06      	ldr	r3, [sp, #24]
 80097a4:	f1a3 0302 	sub.w	r3, r3, #2
 80097a8:	bfcc      	ite	gt
 80097aa:	2500      	movgt	r5, #0
 80097ac:	2501      	movle	r5, #1
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	f200 8087 	bhi.w	80098c2 <_dtoa_r+0x30a>
 80097b4:	e8df f003 	tbb	[pc, r3]
 80097b8:	59383a2d 	.word	0x59383a2d
 80097bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80097c0:	441d      	add	r5, r3
 80097c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80097c6:	2b20      	cmp	r3, #32
 80097c8:	bfc1      	itttt	gt
 80097ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80097ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80097d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80097d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80097da:	bfda      	itte	le
 80097dc:	f1c3 0320 	rsble	r3, r3, #32
 80097e0:	fa06 f003 	lslle.w	r0, r6, r3
 80097e4:	4318      	orrgt	r0, r3
 80097e6:	f7f6 fe8d 	bl	8000504 <__aeabi_ui2d>
 80097ea:	2301      	movs	r3, #1
 80097ec:	4606      	mov	r6, r0
 80097ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80097f2:	3d01      	subs	r5, #1
 80097f4:	930e      	str	r3, [sp, #56]	; 0x38
 80097f6:	e76a      	b.n	80096ce <_dtoa_r+0x116>
 80097f8:	2301      	movs	r3, #1
 80097fa:	e7b2      	b.n	8009762 <_dtoa_r+0x1aa>
 80097fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80097fe:	e7b1      	b.n	8009764 <_dtoa_r+0x1ac>
 8009800:	9b04      	ldr	r3, [sp, #16]
 8009802:	9a00      	ldr	r2, [sp, #0]
 8009804:	1a9b      	subs	r3, r3, r2
 8009806:	9304      	str	r3, [sp, #16]
 8009808:	4253      	negs	r3, r2
 800980a:	9307      	str	r3, [sp, #28]
 800980c:	2300      	movs	r3, #0
 800980e:	930a      	str	r3, [sp, #40]	; 0x28
 8009810:	e7bf      	b.n	8009792 <_dtoa_r+0x1da>
 8009812:	2300      	movs	r3, #0
 8009814:	9308      	str	r3, [sp, #32]
 8009816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009818:	2b00      	cmp	r3, #0
 800981a:	dc55      	bgt.n	80098c8 <_dtoa_r+0x310>
 800981c:	2301      	movs	r3, #1
 800981e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009822:	461a      	mov	r2, r3
 8009824:	9209      	str	r2, [sp, #36]	; 0x24
 8009826:	e00c      	b.n	8009842 <_dtoa_r+0x28a>
 8009828:	2301      	movs	r3, #1
 800982a:	e7f3      	b.n	8009814 <_dtoa_r+0x25c>
 800982c:	2300      	movs	r3, #0
 800982e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009830:	9308      	str	r3, [sp, #32]
 8009832:	9b00      	ldr	r3, [sp, #0]
 8009834:	4413      	add	r3, r2
 8009836:	9302      	str	r3, [sp, #8]
 8009838:	3301      	adds	r3, #1
 800983a:	2b01      	cmp	r3, #1
 800983c:	9303      	str	r3, [sp, #12]
 800983e:	bfb8      	it	lt
 8009840:	2301      	movlt	r3, #1
 8009842:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009844:	2200      	movs	r2, #0
 8009846:	6042      	str	r2, [r0, #4]
 8009848:	2204      	movs	r2, #4
 800984a:	f102 0614 	add.w	r6, r2, #20
 800984e:	429e      	cmp	r6, r3
 8009850:	6841      	ldr	r1, [r0, #4]
 8009852:	d93d      	bls.n	80098d0 <_dtoa_r+0x318>
 8009854:	4620      	mov	r0, r4
 8009856:	f000 fe01 	bl	800a45c <_Balloc>
 800985a:	9001      	str	r0, [sp, #4]
 800985c:	2800      	cmp	r0, #0
 800985e:	d13b      	bne.n	80098d8 <_dtoa_r+0x320>
 8009860:	4b11      	ldr	r3, [pc, #68]	; (80098a8 <_dtoa_r+0x2f0>)
 8009862:	4602      	mov	r2, r0
 8009864:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009868:	e6c0      	b.n	80095ec <_dtoa_r+0x34>
 800986a:	2301      	movs	r3, #1
 800986c:	e7df      	b.n	800982e <_dtoa_r+0x276>
 800986e:	bf00      	nop
 8009870:	636f4361 	.word	0x636f4361
 8009874:	3fd287a7 	.word	0x3fd287a7
 8009878:	8b60c8b3 	.word	0x8b60c8b3
 800987c:	3fc68a28 	.word	0x3fc68a28
 8009880:	509f79fb 	.word	0x509f79fb
 8009884:	3fd34413 	.word	0x3fd34413
 8009888:	0800bdb4 	.word	0x0800bdb4
 800988c:	0800be71 	.word	0x0800be71
 8009890:	7ff00000 	.word	0x7ff00000
 8009894:	0800be6d 	.word	0x0800be6d
 8009898:	0800be64 	.word	0x0800be64
 800989c:	0800bd91 	.word	0x0800bd91
 80098a0:	3ff80000 	.word	0x3ff80000
 80098a4:	0800bf68 	.word	0x0800bf68
 80098a8:	0800becc 	.word	0x0800becc
 80098ac:	2501      	movs	r5, #1
 80098ae:	2300      	movs	r3, #0
 80098b0:	9306      	str	r3, [sp, #24]
 80098b2:	9508      	str	r5, [sp, #32]
 80098b4:	f04f 33ff 	mov.w	r3, #4294967295
 80098b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098bc:	2200      	movs	r2, #0
 80098be:	2312      	movs	r3, #18
 80098c0:	e7b0      	b.n	8009824 <_dtoa_r+0x26c>
 80098c2:	2301      	movs	r3, #1
 80098c4:	9308      	str	r3, [sp, #32]
 80098c6:	e7f5      	b.n	80098b4 <_dtoa_r+0x2fc>
 80098c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098ce:	e7b8      	b.n	8009842 <_dtoa_r+0x28a>
 80098d0:	3101      	adds	r1, #1
 80098d2:	6041      	str	r1, [r0, #4]
 80098d4:	0052      	lsls	r2, r2, #1
 80098d6:	e7b8      	b.n	800984a <_dtoa_r+0x292>
 80098d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098da:	9a01      	ldr	r2, [sp, #4]
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	2b0e      	cmp	r3, #14
 80098e2:	f200 809d 	bhi.w	8009a20 <_dtoa_r+0x468>
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	f000 809a 	beq.w	8009a20 <_dtoa_r+0x468>
 80098ec:	9b00      	ldr	r3, [sp, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dd32      	ble.n	8009958 <_dtoa_r+0x3a0>
 80098f2:	4ab7      	ldr	r2, [pc, #732]	; (8009bd0 <_dtoa_r+0x618>)
 80098f4:	f003 030f 	and.w	r3, r3, #15
 80098f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80098fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009900:	9b00      	ldr	r3, [sp, #0]
 8009902:	05d8      	lsls	r0, r3, #23
 8009904:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009908:	d516      	bpl.n	8009938 <_dtoa_r+0x380>
 800990a:	4bb2      	ldr	r3, [pc, #712]	; (8009bd4 <_dtoa_r+0x61c>)
 800990c:	ec51 0b19 	vmov	r0, r1, d9
 8009910:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009914:	f7f6 ff9a 	bl	800084c <__aeabi_ddiv>
 8009918:	f007 070f 	and.w	r7, r7, #15
 800991c:	4682      	mov	sl, r0
 800991e:	468b      	mov	fp, r1
 8009920:	2503      	movs	r5, #3
 8009922:	4eac      	ldr	r6, [pc, #688]	; (8009bd4 <_dtoa_r+0x61c>)
 8009924:	b957      	cbnz	r7, 800993c <_dtoa_r+0x384>
 8009926:	4642      	mov	r2, r8
 8009928:	464b      	mov	r3, r9
 800992a:	4650      	mov	r0, sl
 800992c:	4659      	mov	r1, fp
 800992e:	f7f6 ff8d 	bl	800084c <__aeabi_ddiv>
 8009932:	4682      	mov	sl, r0
 8009934:	468b      	mov	fp, r1
 8009936:	e028      	b.n	800998a <_dtoa_r+0x3d2>
 8009938:	2502      	movs	r5, #2
 800993a:	e7f2      	b.n	8009922 <_dtoa_r+0x36a>
 800993c:	07f9      	lsls	r1, r7, #31
 800993e:	d508      	bpl.n	8009952 <_dtoa_r+0x39a>
 8009940:	4640      	mov	r0, r8
 8009942:	4649      	mov	r1, r9
 8009944:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009948:	f7f6 fe56 	bl	80005f8 <__aeabi_dmul>
 800994c:	3501      	adds	r5, #1
 800994e:	4680      	mov	r8, r0
 8009950:	4689      	mov	r9, r1
 8009952:	107f      	asrs	r7, r7, #1
 8009954:	3608      	adds	r6, #8
 8009956:	e7e5      	b.n	8009924 <_dtoa_r+0x36c>
 8009958:	f000 809b 	beq.w	8009a92 <_dtoa_r+0x4da>
 800995c:	9b00      	ldr	r3, [sp, #0]
 800995e:	4f9d      	ldr	r7, [pc, #628]	; (8009bd4 <_dtoa_r+0x61c>)
 8009960:	425e      	negs	r6, r3
 8009962:	4b9b      	ldr	r3, [pc, #620]	; (8009bd0 <_dtoa_r+0x618>)
 8009964:	f006 020f 	and.w	r2, r6, #15
 8009968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800996c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009970:	ec51 0b19 	vmov	r0, r1, d9
 8009974:	f7f6 fe40 	bl	80005f8 <__aeabi_dmul>
 8009978:	1136      	asrs	r6, r6, #4
 800997a:	4682      	mov	sl, r0
 800997c:	468b      	mov	fp, r1
 800997e:	2300      	movs	r3, #0
 8009980:	2502      	movs	r5, #2
 8009982:	2e00      	cmp	r6, #0
 8009984:	d17a      	bne.n	8009a7c <_dtoa_r+0x4c4>
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1d3      	bne.n	8009932 <_dtoa_r+0x37a>
 800998a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 8082 	beq.w	8009a96 <_dtoa_r+0x4de>
 8009992:	4b91      	ldr	r3, [pc, #580]	; (8009bd8 <_dtoa_r+0x620>)
 8009994:	2200      	movs	r2, #0
 8009996:	4650      	mov	r0, sl
 8009998:	4659      	mov	r1, fp
 800999a:	f7f7 f89f 	bl	8000adc <__aeabi_dcmplt>
 800999e:	2800      	cmp	r0, #0
 80099a0:	d079      	beq.n	8009a96 <_dtoa_r+0x4de>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d076      	beq.n	8009a96 <_dtoa_r+0x4de>
 80099a8:	9b02      	ldr	r3, [sp, #8]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	dd36      	ble.n	8009a1c <_dtoa_r+0x464>
 80099ae:	9b00      	ldr	r3, [sp, #0]
 80099b0:	4650      	mov	r0, sl
 80099b2:	4659      	mov	r1, fp
 80099b4:	1e5f      	subs	r7, r3, #1
 80099b6:	2200      	movs	r2, #0
 80099b8:	4b88      	ldr	r3, [pc, #544]	; (8009bdc <_dtoa_r+0x624>)
 80099ba:	f7f6 fe1d 	bl	80005f8 <__aeabi_dmul>
 80099be:	9e02      	ldr	r6, [sp, #8]
 80099c0:	4682      	mov	sl, r0
 80099c2:	468b      	mov	fp, r1
 80099c4:	3501      	adds	r5, #1
 80099c6:	4628      	mov	r0, r5
 80099c8:	f7f6 fdac 	bl	8000524 <__aeabi_i2d>
 80099cc:	4652      	mov	r2, sl
 80099ce:	465b      	mov	r3, fp
 80099d0:	f7f6 fe12 	bl	80005f8 <__aeabi_dmul>
 80099d4:	4b82      	ldr	r3, [pc, #520]	; (8009be0 <_dtoa_r+0x628>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	f7f6 fc58 	bl	800028c <__adddf3>
 80099dc:	46d0      	mov	r8, sl
 80099de:	46d9      	mov	r9, fp
 80099e0:	4682      	mov	sl, r0
 80099e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80099e6:	2e00      	cmp	r6, #0
 80099e8:	d158      	bne.n	8009a9c <_dtoa_r+0x4e4>
 80099ea:	4b7e      	ldr	r3, [pc, #504]	; (8009be4 <_dtoa_r+0x62c>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	4640      	mov	r0, r8
 80099f0:	4649      	mov	r1, r9
 80099f2:	f7f6 fc49 	bl	8000288 <__aeabi_dsub>
 80099f6:	4652      	mov	r2, sl
 80099f8:	465b      	mov	r3, fp
 80099fa:	4680      	mov	r8, r0
 80099fc:	4689      	mov	r9, r1
 80099fe:	f7f7 f88b 	bl	8000b18 <__aeabi_dcmpgt>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	f040 8295 	bne.w	8009f32 <_dtoa_r+0x97a>
 8009a08:	4652      	mov	r2, sl
 8009a0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009a0e:	4640      	mov	r0, r8
 8009a10:	4649      	mov	r1, r9
 8009a12:	f7f7 f863 	bl	8000adc <__aeabi_dcmplt>
 8009a16:	2800      	cmp	r0, #0
 8009a18:	f040 8289 	bne.w	8009f2e <_dtoa_r+0x976>
 8009a1c:	ec5b ab19 	vmov	sl, fp, d9
 8009a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f2c0 8148 	blt.w	8009cb8 <_dtoa_r+0x700>
 8009a28:	9a00      	ldr	r2, [sp, #0]
 8009a2a:	2a0e      	cmp	r2, #14
 8009a2c:	f300 8144 	bgt.w	8009cb8 <_dtoa_r+0x700>
 8009a30:	4b67      	ldr	r3, [pc, #412]	; (8009bd0 <_dtoa_r+0x618>)
 8009a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f280 80d5 	bge.w	8009bec <_dtoa_r+0x634>
 8009a42:	9b03      	ldr	r3, [sp, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f300 80d1 	bgt.w	8009bec <_dtoa_r+0x634>
 8009a4a:	f040 826f 	bne.w	8009f2c <_dtoa_r+0x974>
 8009a4e:	4b65      	ldr	r3, [pc, #404]	; (8009be4 <_dtoa_r+0x62c>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	4640      	mov	r0, r8
 8009a54:	4649      	mov	r1, r9
 8009a56:	f7f6 fdcf 	bl	80005f8 <__aeabi_dmul>
 8009a5a:	4652      	mov	r2, sl
 8009a5c:	465b      	mov	r3, fp
 8009a5e:	f7f7 f851 	bl	8000b04 <__aeabi_dcmpge>
 8009a62:	9e03      	ldr	r6, [sp, #12]
 8009a64:	4637      	mov	r7, r6
 8009a66:	2800      	cmp	r0, #0
 8009a68:	f040 8245 	bne.w	8009ef6 <_dtoa_r+0x93e>
 8009a6c:	9d01      	ldr	r5, [sp, #4]
 8009a6e:	2331      	movs	r3, #49	; 0x31
 8009a70:	f805 3b01 	strb.w	r3, [r5], #1
 8009a74:	9b00      	ldr	r3, [sp, #0]
 8009a76:	3301      	adds	r3, #1
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	e240      	b.n	8009efe <_dtoa_r+0x946>
 8009a7c:	07f2      	lsls	r2, r6, #31
 8009a7e:	d505      	bpl.n	8009a8c <_dtoa_r+0x4d4>
 8009a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a84:	f7f6 fdb8 	bl	80005f8 <__aeabi_dmul>
 8009a88:	3501      	adds	r5, #1
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	1076      	asrs	r6, r6, #1
 8009a8e:	3708      	adds	r7, #8
 8009a90:	e777      	b.n	8009982 <_dtoa_r+0x3ca>
 8009a92:	2502      	movs	r5, #2
 8009a94:	e779      	b.n	800998a <_dtoa_r+0x3d2>
 8009a96:	9f00      	ldr	r7, [sp, #0]
 8009a98:	9e03      	ldr	r6, [sp, #12]
 8009a9a:	e794      	b.n	80099c6 <_dtoa_r+0x40e>
 8009a9c:	9901      	ldr	r1, [sp, #4]
 8009a9e:	4b4c      	ldr	r3, [pc, #304]	; (8009bd0 <_dtoa_r+0x618>)
 8009aa0:	4431      	add	r1, r6
 8009aa2:	910d      	str	r1, [sp, #52]	; 0x34
 8009aa4:	9908      	ldr	r1, [sp, #32]
 8009aa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009aaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009aae:	2900      	cmp	r1, #0
 8009ab0:	d043      	beq.n	8009b3a <_dtoa_r+0x582>
 8009ab2:	494d      	ldr	r1, [pc, #308]	; (8009be8 <_dtoa_r+0x630>)
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	f7f6 fec9 	bl	800084c <__aeabi_ddiv>
 8009aba:	4652      	mov	r2, sl
 8009abc:	465b      	mov	r3, fp
 8009abe:	f7f6 fbe3 	bl	8000288 <__aeabi_dsub>
 8009ac2:	9d01      	ldr	r5, [sp, #4]
 8009ac4:	4682      	mov	sl, r0
 8009ac6:	468b      	mov	fp, r1
 8009ac8:	4649      	mov	r1, r9
 8009aca:	4640      	mov	r0, r8
 8009acc:	f7f7 f844 	bl	8000b58 <__aeabi_d2iz>
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	f7f6 fd27 	bl	8000524 <__aeabi_i2d>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4640      	mov	r0, r8
 8009adc:	4649      	mov	r1, r9
 8009ade:	f7f6 fbd3 	bl	8000288 <__aeabi_dsub>
 8009ae2:	3630      	adds	r6, #48	; 0x30
 8009ae4:	f805 6b01 	strb.w	r6, [r5], #1
 8009ae8:	4652      	mov	r2, sl
 8009aea:	465b      	mov	r3, fp
 8009aec:	4680      	mov	r8, r0
 8009aee:	4689      	mov	r9, r1
 8009af0:	f7f6 fff4 	bl	8000adc <__aeabi_dcmplt>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d163      	bne.n	8009bc0 <_dtoa_r+0x608>
 8009af8:	4642      	mov	r2, r8
 8009afa:	464b      	mov	r3, r9
 8009afc:	4936      	ldr	r1, [pc, #216]	; (8009bd8 <_dtoa_r+0x620>)
 8009afe:	2000      	movs	r0, #0
 8009b00:	f7f6 fbc2 	bl	8000288 <__aeabi_dsub>
 8009b04:	4652      	mov	r2, sl
 8009b06:	465b      	mov	r3, fp
 8009b08:	f7f6 ffe8 	bl	8000adc <__aeabi_dcmplt>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	f040 80b5 	bne.w	8009c7c <_dtoa_r+0x6c4>
 8009b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b14:	429d      	cmp	r5, r3
 8009b16:	d081      	beq.n	8009a1c <_dtoa_r+0x464>
 8009b18:	4b30      	ldr	r3, [pc, #192]	; (8009bdc <_dtoa_r+0x624>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	4650      	mov	r0, sl
 8009b1e:	4659      	mov	r1, fp
 8009b20:	f7f6 fd6a 	bl	80005f8 <__aeabi_dmul>
 8009b24:	4b2d      	ldr	r3, [pc, #180]	; (8009bdc <_dtoa_r+0x624>)
 8009b26:	4682      	mov	sl, r0
 8009b28:	468b      	mov	fp, r1
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	4649      	mov	r1, r9
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f7f6 fd62 	bl	80005f8 <__aeabi_dmul>
 8009b34:	4680      	mov	r8, r0
 8009b36:	4689      	mov	r9, r1
 8009b38:	e7c6      	b.n	8009ac8 <_dtoa_r+0x510>
 8009b3a:	4650      	mov	r0, sl
 8009b3c:	4659      	mov	r1, fp
 8009b3e:	f7f6 fd5b 	bl	80005f8 <__aeabi_dmul>
 8009b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b44:	9d01      	ldr	r5, [sp, #4]
 8009b46:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b48:	4682      	mov	sl, r0
 8009b4a:	468b      	mov	fp, r1
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	4640      	mov	r0, r8
 8009b50:	f7f7 f802 	bl	8000b58 <__aeabi_d2iz>
 8009b54:	4606      	mov	r6, r0
 8009b56:	f7f6 fce5 	bl	8000524 <__aeabi_i2d>
 8009b5a:	3630      	adds	r6, #48	; 0x30
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4640      	mov	r0, r8
 8009b62:	4649      	mov	r1, r9
 8009b64:	f7f6 fb90 	bl	8000288 <__aeabi_dsub>
 8009b68:	f805 6b01 	strb.w	r6, [r5], #1
 8009b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b6e:	429d      	cmp	r5, r3
 8009b70:	4680      	mov	r8, r0
 8009b72:	4689      	mov	r9, r1
 8009b74:	f04f 0200 	mov.w	r2, #0
 8009b78:	d124      	bne.n	8009bc4 <_dtoa_r+0x60c>
 8009b7a:	4b1b      	ldr	r3, [pc, #108]	; (8009be8 <_dtoa_r+0x630>)
 8009b7c:	4650      	mov	r0, sl
 8009b7e:	4659      	mov	r1, fp
 8009b80:	f7f6 fb84 	bl	800028c <__adddf3>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4640      	mov	r0, r8
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	f7f6 ffc4 	bl	8000b18 <__aeabi_dcmpgt>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d173      	bne.n	8009c7c <_dtoa_r+0x6c4>
 8009b94:	4652      	mov	r2, sl
 8009b96:	465b      	mov	r3, fp
 8009b98:	4913      	ldr	r1, [pc, #76]	; (8009be8 <_dtoa_r+0x630>)
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	f7f6 fb74 	bl	8000288 <__aeabi_dsub>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4640      	mov	r0, r8
 8009ba6:	4649      	mov	r1, r9
 8009ba8:	f7f6 ff98 	bl	8000adc <__aeabi_dcmplt>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	f43f af35 	beq.w	8009a1c <_dtoa_r+0x464>
 8009bb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009bb4:	1e6b      	subs	r3, r5, #1
 8009bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bbc:	2b30      	cmp	r3, #48	; 0x30
 8009bbe:	d0f8      	beq.n	8009bb2 <_dtoa_r+0x5fa>
 8009bc0:	9700      	str	r7, [sp, #0]
 8009bc2:	e049      	b.n	8009c58 <_dtoa_r+0x6a0>
 8009bc4:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <_dtoa_r+0x624>)
 8009bc6:	f7f6 fd17 	bl	80005f8 <__aeabi_dmul>
 8009bca:	4680      	mov	r8, r0
 8009bcc:	4689      	mov	r9, r1
 8009bce:	e7bd      	b.n	8009b4c <_dtoa_r+0x594>
 8009bd0:	0800bf68 	.word	0x0800bf68
 8009bd4:	0800bf40 	.word	0x0800bf40
 8009bd8:	3ff00000 	.word	0x3ff00000
 8009bdc:	40240000 	.word	0x40240000
 8009be0:	401c0000 	.word	0x401c0000
 8009be4:	40140000 	.word	0x40140000
 8009be8:	3fe00000 	.word	0x3fe00000
 8009bec:	9d01      	ldr	r5, [sp, #4]
 8009bee:	4656      	mov	r6, sl
 8009bf0:	465f      	mov	r7, fp
 8009bf2:	4642      	mov	r2, r8
 8009bf4:	464b      	mov	r3, r9
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	4639      	mov	r1, r7
 8009bfa:	f7f6 fe27 	bl	800084c <__aeabi_ddiv>
 8009bfe:	f7f6 ffab 	bl	8000b58 <__aeabi_d2iz>
 8009c02:	4682      	mov	sl, r0
 8009c04:	f7f6 fc8e 	bl	8000524 <__aeabi_i2d>
 8009c08:	4642      	mov	r2, r8
 8009c0a:	464b      	mov	r3, r9
 8009c0c:	f7f6 fcf4 	bl	80005f8 <__aeabi_dmul>
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	4630      	mov	r0, r6
 8009c16:	4639      	mov	r1, r7
 8009c18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009c1c:	f7f6 fb34 	bl	8000288 <__aeabi_dsub>
 8009c20:	f805 6b01 	strb.w	r6, [r5], #1
 8009c24:	9e01      	ldr	r6, [sp, #4]
 8009c26:	9f03      	ldr	r7, [sp, #12]
 8009c28:	1bae      	subs	r6, r5, r6
 8009c2a:	42b7      	cmp	r7, r6
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	d135      	bne.n	8009c9e <_dtoa_r+0x6e6>
 8009c32:	f7f6 fb2b 	bl	800028c <__adddf3>
 8009c36:	4642      	mov	r2, r8
 8009c38:	464b      	mov	r3, r9
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	460f      	mov	r7, r1
 8009c3e:	f7f6 ff6b 	bl	8000b18 <__aeabi_dcmpgt>
 8009c42:	b9d0      	cbnz	r0, 8009c7a <_dtoa_r+0x6c2>
 8009c44:	4642      	mov	r2, r8
 8009c46:	464b      	mov	r3, r9
 8009c48:	4630      	mov	r0, r6
 8009c4a:	4639      	mov	r1, r7
 8009c4c:	f7f6 ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c50:	b110      	cbz	r0, 8009c58 <_dtoa_r+0x6a0>
 8009c52:	f01a 0f01 	tst.w	sl, #1
 8009c56:	d110      	bne.n	8009c7a <_dtoa_r+0x6c2>
 8009c58:	4620      	mov	r0, r4
 8009c5a:	ee18 1a10 	vmov	r1, s16
 8009c5e:	f000 fc3d 	bl	800a4dc <_Bfree>
 8009c62:	2300      	movs	r3, #0
 8009c64:	9800      	ldr	r0, [sp, #0]
 8009c66:	702b      	strb	r3, [r5, #0]
 8009c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	6018      	str	r0, [r3, #0]
 8009c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f43f acf1 	beq.w	8009658 <_dtoa_r+0xa0>
 8009c76:	601d      	str	r5, [r3, #0]
 8009c78:	e4ee      	b.n	8009658 <_dtoa_r+0xa0>
 8009c7a:	9f00      	ldr	r7, [sp, #0]
 8009c7c:	462b      	mov	r3, r5
 8009c7e:	461d      	mov	r5, r3
 8009c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c84:	2a39      	cmp	r2, #57	; 0x39
 8009c86:	d106      	bne.n	8009c96 <_dtoa_r+0x6de>
 8009c88:	9a01      	ldr	r2, [sp, #4]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d1f7      	bne.n	8009c7e <_dtoa_r+0x6c6>
 8009c8e:	9901      	ldr	r1, [sp, #4]
 8009c90:	2230      	movs	r2, #48	; 0x30
 8009c92:	3701      	adds	r7, #1
 8009c94:	700a      	strb	r2, [r1, #0]
 8009c96:	781a      	ldrb	r2, [r3, #0]
 8009c98:	3201      	adds	r2, #1
 8009c9a:	701a      	strb	r2, [r3, #0]
 8009c9c:	e790      	b.n	8009bc0 <_dtoa_r+0x608>
 8009c9e:	4ba6      	ldr	r3, [pc, #664]	; (8009f38 <_dtoa_r+0x980>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f7f6 fca9 	bl	80005f8 <__aeabi_dmul>
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2300      	movs	r3, #0
 8009caa:	4606      	mov	r6, r0
 8009cac:	460f      	mov	r7, r1
 8009cae:	f7f6 ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d09d      	beq.n	8009bf2 <_dtoa_r+0x63a>
 8009cb6:	e7cf      	b.n	8009c58 <_dtoa_r+0x6a0>
 8009cb8:	9a08      	ldr	r2, [sp, #32]
 8009cba:	2a00      	cmp	r2, #0
 8009cbc:	f000 80d7 	beq.w	8009e6e <_dtoa_r+0x8b6>
 8009cc0:	9a06      	ldr	r2, [sp, #24]
 8009cc2:	2a01      	cmp	r2, #1
 8009cc4:	f300 80ba 	bgt.w	8009e3c <_dtoa_r+0x884>
 8009cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cca:	2a00      	cmp	r2, #0
 8009ccc:	f000 80b2 	beq.w	8009e34 <_dtoa_r+0x87c>
 8009cd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cd4:	9e07      	ldr	r6, [sp, #28]
 8009cd6:	9d04      	ldr	r5, [sp, #16]
 8009cd8:	9a04      	ldr	r2, [sp, #16]
 8009cda:	441a      	add	r2, r3
 8009cdc:	9204      	str	r2, [sp, #16]
 8009cde:	9a05      	ldr	r2, [sp, #20]
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	441a      	add	r2, r3
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	9205      	str	r2, [sp, #20]
 8009ce8:	f000 fcb0 	bl	800a64c <__i2b>
 8009cec:	4607      	mov	r7, r0
 8009cee:	2d00      	cmp	r5, #0
 8009cf0:	dd0c      	ble.n	8009d0c <_dtoa_r+0x754>
 8009cf2:	9b05      	ldr	r3, [sp, #20]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	dd09      	ble.n	8009d0c <_dtoa_r+0x754>
 8009cf8:	42ab      	cmp	r3, r5
 8009cfa:	9a04      	ldr	r2, [sp, #16]
 8009cfc:	bfa8      	it	ge
 8009cfe:	462b      	movge	r3, r5
 8009d00:	1ad2      	subs	r2, r2, r3
 8009d02:	9204      	str	r2, [sp, #16]
 8009d04:	9a05      	ldr	r2, [sp, #20]
 8009d06:	1aed      	subs	r5, r5, r3
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	9305      	str	r3, [sp, #20]
 8009d0c:	9b07      	ldr	r3, [sp, #28]
 8009d0e:	b31b      	cbz	r3, 8009d58 <_dtoa_r+0x7a0>
 8009d10:	9b08      	ldr	r3, [sp, #32]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 80af 	beq.w	8009e76 <_dtoa_r+0x8be>
 8009d18:	2e00      	cmp	r6, #0
 8009d1a:	dd13      	ble.n	8009d44 <_dtoa_r+0x78c>
 8009d1c:	4639      	mov	r1, r7
 8009d1e:	4632      	mov	r2, r6
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 fd53 	bl	800a7cc <__pow5mult>
 8009d26:	ee18 2a10 	vmov	r2, s16
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	4607      	mov	r7, r0
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f000 fca2 	bl	800a678 <__multiply>
 8009d34:	ee18 1a10 	vmov	r1, s16
 8009d38:	4680      	mov	r8, r0
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f000 fbce 	bl	800a4dc <_Bfree>
 8009d40:	ee08 8a10 	vmov	s16, r8
 8009d44:	9b07      	ldr	r3, [sp, #28]
 8009d46:	1b9a      	subs	r2, r3, r6
 8009d48:	d006      	beq.n	8009d58 <_dtoa_r+0x7a0>
 8009d4a:	ee18 1a10 	vmov	r1, s16
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f000 fd3c 	bl	800a7cc <__pow5mult>
 8009d54:	ee08 0a10 	vmov	s16, r0
 8009d58:	2101      	movs	r1, #1
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 fc76 	bl	800a64c <__i2b>
 8009d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	4606      	mov	r6, r0
 8009d66:	f340 8088 	ble.w	8009e7a <_dtoa_r+0x8c2>
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	4601      	mov	r1, r0
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f000 fd2c 	bl	800a7cc <__pow5mult>
 8009d74:	9b06      	ldr	r3, [sp, #24]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	4606      	mov	r6, r0
 8009d7a:	f340 8081 	ble.w	8009e80 <_dtoa_r+0x8c8>
 8009d7e:	f04f 0800 	mov.w	r8, #0
 8009d82:	6933      	ldr	r3, [r6, #16]
 8009d84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d88:	6918      	ldr	r0, [r3, #16]
 8009d8a:	f000 fc0f 	bl	800a5ac <__hi0bits>
 8009d8e:	f1c0 0020 	rsb	r0, r0, #32
 8009d92:	9b05      	ldr	r3, [sp, #20]
 8009d94:	4418      	add	r0, r3
 8009d96:	f010 001f 	ands.w	r0, r0, #31
 8009d9a:	f000 8092 	beq.w	8009ec2 <_dtoa_r+0x90a>
 8009d9e:	f1c0 0320 	rsb	r3, r0, #32
 8009da2:	2b04      	cmp	r3, #4
 8009da4:	f340 808a 	ble.w	8009ebc <_dtoa_r+0x904>
 8009da8:	f1c0 001c 	rsb	r0, r0, #28
 8009dac:	9b04      	ldr	r3, [sp, #16]
 8009dae:	4403      	add	r3, r0
 8009db0:	9304      	str	r3, [sp, #16]
 8009db2:	9b05      	ldr	r3, [sp, #20]
 8009db4:	4403      	add	r3, r0
 8009db6:	4405      	add	r5, r0
 8009db8:	9305      	str	r3, [sp, #20]
 8009dba:	9b04      	ldr	r3, [sp, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	dd07      	ble.n	8009dd0 <_dtoa_r+0x818>
 8009dc0:	ee18 1a10 	vmov	r1, s16
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f000 fd5a 	bl	800a880 <__lshift>
 8009dcc:	ee08 0a10 	vmov	s16, r0
 8009dd0:	9b05      	ldr	r3, [sp, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	dd05      	ble.n	8009de2 <_dtoa_r+0x82a>
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	461a      	mov	r2, r3
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f000 fd50 	bl	800a880 <__lshift>
 8009de0:	4606      	mov	r6, r0
 8009de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d06e      	beq.n	8009ec6 <_dtoa_r+0x90e>
 8009de8:	ee18 0a10 	vmov	r0, s16
 8009dec:	4631      	mov	r1, r6
 8009dee:	f000 fdb7 	bl	800a960 <__mcmp>
 8009df2:	2800      	cmp	r0, #0
 8009df4:	da67      	bge.n	8009ec6 <_dtoa_r+0x90e>
 8009df6:	9b00      	ldr	r3, [sp, #0]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	ee18 1a10 	vmov	r1, s16
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	220a      	movs	r2, #10
 8009e02:	2300      	movs	r3, #0
 8009e04:	4620      	mov	r0, r4
 8009e06:	f000 fb8b 	bl	800a520 <__multadd>
 8009e0a:	9b08      	ldr	r3, [sp, #32]
 8009e0c:	ee08 0a10 	vmov	s16, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 81b1 	beq.w	800a178 <_dtoa_r+0xbc0>
 8009e16:	2300      	movs	r3, #0
 8009e18:	4639      	mov	r1, r7
 8009e1a:	220a      	movs	r2, #10
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f000 fb7f 	bl	800a520 <__multadd>
 8009e22:	9b02      	ldr	r3, [sp, #8]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	4607      	mov	r7, r0
 8009e28:	f300 808e 	bgt.w	8009f48 <_dtoa_r+0x990>
 8009e2c:	9b06      	ldr	r3, [sp, #24]
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	dc51      	bgt.n	8009ed6 <_dtoa_r+0x91e>
 8009e32:	e089      	b.n	8009f48 <_dtoa_r+0x990>
 8009e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e3a:	e74b      	b.n	8009cd4 <_dtoa_r+0x71c>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	1e5e      	subs	r6, r3, #1
 8009e40:	9b07      	ldr	r3, [sp, #28]
 8009e42:	42b3      	cmp	r3, r6
 8009e44:	bfbf      	itttt	lt
 8009e46:	9b07      	ldrlt	r3, [sp, #28]
 8009e48:	9607      	strlt	r6, [sp, #28]
 8009e4a:	1af2      	sublt	r2, r6, r3
 8009e4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009e4e:	bfb6      	itet	lt
 8009e50:	189b      	addlt	r3, r3, r2
 8009e52:	1b9e      	subge	r6, r3, r6
 8009e54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009e56:	9b03      	ldr	r3, [sp, #12]
 8009e58:	bfb8      	it	lt
 8009e5a:	2600      	movlt	r6, #0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	bfb7      	itett	lt
 8009e60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009e64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009e68:	1a9d      	sublt	r5, r3, r2
 8009e6a:	2300      	movlt	r3, #0
 8009e6c:	e734      	b.n	8009cd8 <_dtoa_r+0x720>
 8009e6e:	9e07      	ldr	r6, [sp, #28]
 8009e70:	9d04      	ldr	r5, [sp, #16]
 8009e72:	9f08      	ldr	r7, [sp, #32]
 8009e74:	e73b      	b.n	8009cee <_dtoa_r+0x736>
 8009e76:	9a07      	ldr	r2, [sp, #28]
 8009e78:	e767      	b.n	8009d4a <_dtoa_r+0x792>
 8009e7a:	9b06      	ldr	r3, [sp, #24]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	dc18      	bgt.n	8009eb2 <_dtoa_r+0x8fa>
 8009e80:	f1ba 0f00 	cmp.w	sl, #0
 8009e84:	d115      	bne.n	8009eb2 <_dtoa_r+0x8fa>
 8009e86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e8a:	b993      	cbnz	r3, 8009eb2 <_dtoa_r+0x8fa>
 8009e8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e90:	0d1b      	lsrs	r3, r3, #20
 8009e92:	051b      	lsls	r3, r3, #20
 8009e94:	b183      	cbz	r3, 8009eb8 <_dtoa_r+0x900>
 8009e96:	9b04      	ldr	r3, [sp, #16]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	9304      	str	r3, [sp, #16]
 8009e9c:	9b05      	ldr	r3, [sp, #20]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	9305      	str	r3, [sp, #20]
 8009ea2:	f04f 0801 	mov.w	r8, #1
 8009ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f47f af6a 	bne.w	8009d82 <_dtoa_r+0x7ca>
 8009eae:	2001      	movs	r0, #1
 8009eb0:	e76f      	b.n	8009d92 <_dtoa_r+0x7da>
 8009eb2:	f04f 0800 	mov.w	r8, #0
 8009eb6:	e7f6      	b.n	8009ea6 <_dtoa_r+0x8ee>
 8009eb8:	4698      	mov	r8, r3
 8009eba:	e7f4      	b.n	8009ea6 <_dtoa_r+0x8ee>
 8009ebc:	f43f af7d 	beq.w	8009dba <_dtoa_r+0x802>
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	301c      	adds	r0, #28
 8009ec4:	e772      	b.n	8009dac <_dtoa_r+0x7f4>
 8009ec6:	9b03      	ldr	r3, [sp, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	dc37      	bgt.n	8009f3c <_dtoa_r+0x984>
 8009ecc:	9b06      	ldr	r3, [sp, #24]
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	dd34      	ble.n	8009f3c <_dtoa_r+0x984>
 8009ed2:	9b03      	ldr	r3, [sp, #12]
 8009ed4:	9302      	str	r3, [sp, #8]
 8009ed6:	9b02      	ldr	r3, [sp, #8]
 8009ed8:	b96b      	cbnz	r3, 8009ef6 <_dtoa_r+0x93e>
 8009eda:	4631      	mov	r1, r6
 8009edc:	2205      	movs	r2, #5
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 fb1e 	bl	800a520 <__multadd>
 8009ee4:	4601      	mov	r1, r0
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	ee18 0a10 	vmov	r0, s16
 8009eec:	f000 fd38 	bl	800a960 <__mcmp>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	f73f adbb 	bgt.w	8009a6c <_dtoa_r+0x4b4>
 8009ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef8:	9d01      	ldr	r5, [sp, #4]
 8009efa:	43db      	mvns	r3, r3
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	f04f 0800 	mov.w	r8, #0
 8009f02:	4631      	mov	r1, r6
 8009f04:	4620      	mov	r0, r4
 8009f06:	f000 fae9 	bl	800a4dc <_Bfree>
 8009f0a:	2f00      	cmp	r7, #0
 8009f0c:	f43f aea4 	beq.w	8009c58 <_dtoa_r+0x6a0>
 8009f10:	f1b8 0f00 	cmp.w	r8, #0
 8009f14:	d005      	beq.n	8009f22 <_dtoa_r+0x96a>
 8009f16:	45b8      	cmp	r8, r7
 8009f18:	d003      	beq.n	8009f22 <_dtoa_r+0x96a>
 8009f1a:	4641      	mov	r1, r8
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 fadd 	bl	800a4dc <_Bfree>
 8009f22:	4639      	mov	r1, r7
 8009f24:	4620      	mov	r0, r4
 8009f26:	f000 fad9 	bl	800a4dc <_Bfree>
 8009f2a:	e695      	b.n	8009c58 <_dtoa_r+0x6a0>
 8009f2c:	2600      	movs	r6, #0
 8009f2e:	4637      	mov	r7, r6
 8009f30:	e7e1      	b.n	8009ef6 <_dtoa_r+0x93e>
 8009f32:	9700      	str	r7, [sp, #0]
 8009f34:	4637      	mov	r7, r6
 8009f36:	e599      	b.n	8009a6c <_dtoa_r+0x4b4>
 8009f38:	40240000 	.word	0x40240000
 8009f3c:	9b08      	ldr	r3, [sp, #32]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f000 80ca 	beq.w	800a0d8 <_dtoa_r+0xb20>
 8009f44:	9b03      	ldr	r3, [sp, #12]
 8009f46:	9302      	str	r3, [sp, #8]
 8009f48:	2d00      	cmp	r5, #0
 8009f4a:	dd05      	ble.n	8009f58 <_dtoa_r+0x9a0>
 8009f4c:	4639      	mov	r1, r7
 8009f4e:	462a      	mov	r2, r5
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 fc95 	bl	800a880 <__lshift>
 8009f56:	4607      	mov	r7, r0
 8009f58:	f1b8 0f00 	cmp.w	r8, #0
 8009f5c:	d05b      	beq.n	800a016 <_dtoa_r+0xa5e>
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	4620      	mov	r0, r4
 8009f62:	f000 fa7b 	bl	800a45c <_Balloc>
 8009f66:	4605      	mov	r5, r0
 8009f68:	b928      	cbnz	r0, 8009f76 <_dtoa_r+0x9be>
 8009f6a:	4b87      	ldr	r3, [pc, #540]	; (800a188 <_dtoa_r+0xbd0>)
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f72:	f7ff bb3b 	b.w	80095ec <_dtoa_r+0x34>
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	3202      	adds	r2, #2
 8009f7a:	0092      	lsls	r2, r2, #2
 8009f7c:	f107 010c 	add.w	r1, r7, #12
 8009f80:	300c      	adds	r0, #12
 8009f82:	f7fe faa8 	bl	80084d6 <memcpy>
 8009f86:	2201      	movs	r2, #1
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 fc78 	bl	800a880 <__lshift>
 8009f90:	9b01      	ldr	r3, [sp, #4]
 8009f92:	f103 0901 	add.w	r9, r3, #1
 8009f96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	9305      	str	r3, [sp, #20]
 8009f9e:	f00a 0301 	and.w	r3, sl, #1
 8009fa2:	46b8      	mov	r8, r7
 8009fa4:	9304      	str	r3, [sp, #16]
 8009fa6:	4607      	mov	r7, r0
 8009fa8:	4631      	mov	r1, r6
 8009faa:	ee18 0a10 	vmov	r0, s16
 8009fae:	f7ff fa75 	bl	800949c <quorem>
 8009fb2:	4641      	mov	r1, r8
 8009fb4:	9002      	str	r0, [sp, #8]
 8009fb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009fba:	ee18 0a10 	vmov	r0, s16
 8009fbe:	f000 fccf 	bl	800a960 <__mcmp>
 8009fc2:	463a      	mov	r2, r7
 8009fc4:	9003      	str	r0, [sp, #12]
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 fce5 	bl	800a998 <__mdiff>
 8009fce:	68c2      	ldr	r2, [r0, #12]
 8009fd0:	f109 3bff 	add.w	fp, r9, #4294967295
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	bb02      	cbnz	r2, 800a01a <_dtoa_r+0xa62>
 8009fd8:	4601      	mov	r1, r0
 8009fda:	ee18 0a10 	vmov	r0, s16
 8009fde:	f000 fcbf 	bl	800a960 <__mcmp>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	9207      	str	r2, [sp, #28]
 8009fea:	f000 fa77 	bl	800a4dc <_Bfree>
 8009fee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009ff2:	ea43 0102 	orr.w	r1, r3, r2
 8009ff6:	9b04      	ldr	r3, [sp, #16]
 8009ff8:	430b      	orrs	r3, r1
 8009ffa:	464d      	mov	r5, r9
 8009ffc:	d10f      	bne.n	800a01e <_dtoa_r+0xa66>
 8009ffe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a002:	d02a      	beq.n	800a05a <_dtoa_r+0xaa2>
 800a004:	9b03      	ldr	r3, [sp, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	dd02      	ble.n	800a010 <_dtoa_r+0xa58>
 800a00a:	9b02      	ldr	r3, [sp, #8]
 800a00c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a010:	f88b a000 	strb.w	sl, [fp]
 800a014:	e775      	b.n	8009f02 <_dtoa_r+0x94a>
 800a016:	4638      	mov	r0, r7
 800a018:	e7ba      	b.n	8009f90 <_dtoa_r+0x9d8>
 800a01a:	2201      	movs	r2, #1
 800a01c:	e7e2      	b.n	8009fe4 <_dtoa_r+0xa2c>
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	db04      	blt.n	800a02e <_dtoa_r+0xa76>
 800a024:	9906      	ldr	r1, [sp, #24]
 800a026:	430b      	orrs	r3, r1
 800a028:	9904      	ldr	r1, [sp, #16]
 800a02a:	430b      	orrs	r3, r1
 800a02c:	d122      	bne.n	800a074 <_dtoa_r+0xabc>
 800a02e:	2a00      	cmp	r2, #0
 800a030:	ddee      	ble.n	800a010 <_dtoa_r+0xa58>
 800a032:	ee18 1a10 	vmov	r1, s16
 800a036:	2201      	movs	r2, #1
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 fc21 	bl	800a880 <__lshift>
 800a03e:	4631      	mov	r1, r6
 800a040:	ee08 0a10 	vmov	s16, r0
 800a044:	f000 fc8c 	bl	800a960 <__mcmp>
 800a048:	2800      	cmp	r0, #0
 800a04a:	dc03      	bgt.n	800a054 <_dtoa_r+0xa9c>
 800a04c:	d1e0      	bne.n	800a010 <_dtoa_r+0xa58>
 800a04e:	f01a 0f01 	tst.w	sl, #1
 800a052:	d0dd      	beq.n	800a010 <_dtoa_r+0xa58>
 800a054:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a058:	d1d7      	bne.n	800a00a <_dtoa_r+0xa52>
 800a05a:	2339      	movs	r3, #57	; 0x39
 800a05c:	f88b 3000 	strb.w	r3, [fp]
 800a060:	462b      	mov	r3, r5
 800a062:	461d      	mov	r5, r3
 800a064:	3b01      	subs	r3, #1
 800a066:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a06a:	2a39      	cmp	r2, #57	; 0x39
 800a06c:	d071      	beq.n	800a152 <_dtoa_r+0xb9a>
 800a06e:	3201      	adds	r2, #1
 800a070:	701a      	strb	r2, [r3, #0]
 800a072:	e746      	b.n	8009f02 <_dtoa_r+0x94a>
 800a074:	2a00      	cmp	r2, #0
 800a076:	dd07      	ble.n	800a088 <_dtoa_r+0xad0>
 800a078:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a07c:	d0ed      	beq.n	800a05a <_dtoa_r+0xaa2>
 800a07e:	f10a 0301 	add.w	r3, sl, #1
 800a082:	f88b 3000 	strb.w	r3, [fp]
 800a086:	e73c      	b.n	8009f02 <_dtoa_r+0x94a>
 800a088:	9b05      	ldr	r3, [sp, #20]
 800a08a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a08e:	4599      	cmp	r9, r3
 800a090:	d047      	beq.n	800a122 <_dtoa_r+0xb6a>
 800a092:	ee18 1a10 	vmov	r1, s16
 800a096:	2300      	movs	r3, #0
 800a098:	220a      	movs	r2, #10
 800a09a:	4620      	mov	r0, r4
 800a09c:	f000 fa40 	bl	800a520 <__multadd>
 800a0a0:	45b8      	cmp	r8, r7
 800a0a2:	ee08 0a10 	vmov	s16, r0
 800a0a6:	f04f 0300 	mov.w	r3, #0
 800a0aa:	f04f 020a 	mov.w	r2, #10
 800a0ae:	4641      	mov	r1, r8
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	d106      	bne.n	800a0c2 <_dtoa_r+0xb0a>
 800a0b4:	f000 fa34 	bl	800a520 <__multadd>
 800a0b8:	4680      	mov	r8, r0
 800a0ba:	4607      	mov	r7, r0
 800a0bc:	f109 0901 	add.w	r9, r9, #1
 800a0c0:	e772      	b.n	8009fa8 <_dtoa_r+0x9f0>
 800a0c2:	f000 fa2d 	bl	800a520 <__multadd>
 800a0c6:	4639      	mov	r1, r7
 800a0c8:	4680      	mov	r8, r0
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	220a      	movs	r2, #10
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 fa26 	bl	800a520 <__multadd>
 800a0d4:	4607      	mov	r7, r0
 800a0d6:	e7f1      	b.n	800a0bc <_dtoa_r+0xb04>
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	9302      	str	r3, [sp, #8]
 800a0dc:	9d01      	ldr	r5, [sp, #4]
 800a0de:	ee18 0a10 	vmov	r0, s16
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	f7ff f9da 	bl	800949c <quorem>
 800a0e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a0ec:	9b01      	ldr	r3, [sp, #4]
 800a0ee:	f805 ab01 	strb.w	sl, [r5], #1
 800a0f2:	1aea      	subs	r2, r5, r3
 800a0f4:	9b02      	ldr	r3, [sp, #8]
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	dd09      	ble.n	800a10e <_dtoa_r+0xb56>
 800a0fa:	ee18 1a10 	vmov	r1, s16
 800a0fe:	2300      	movs	r3, #0
 800a100:	220a      	movs	r2, #10
 800a102:	4620      	mov	r0, r4
 800a104:	f000 fa0c 	bl	800a520 <__multadd>
 800a108:	ee08 0a10 	vmov	s16, r0
 800a10c:	e7e7      	b.n	800a0de <_dtoa_r+0xb26>
 800a10e:	9b02      	ldr	r3, [sp, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	bfc8      	it	gt
 800a114:	461d      	movgt	r5, r3
 800a116:	9b01      	ldr	r3, [sp, #4]
 800a118:	bfd8      	it	le
 800a11a:	2501      	movle	r5, #1
 800a11c:	441d      	add	r5, r3
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	ee18 1a10 	vmov	r1, s16
 800a126:	2201      	movs	r2, #1
 800a128:	4620      	mov	r0, r4
 800a12a:	f000 fba9 	bl	800a880 <__lshift>
 800a12e:	4631      	mov	r1, r6
 800a130:	ee08 0a10 	vmov	s16, r0
 800a134:	f000 fc14 	bl	800a960 <__mcmp>
 800a138:	2800      	cmp	r0, #0
 800a13a:	dc91      	bgt.n	800a060 <_dtoa_r+0xaa8>
 800a13c:	d102      	bne.n	800a144 <_dtoa_r+0xb8c>
 800a13e:	f01a 0f01 	tst.w	sl, #1
 800a142:	d18d      	bne.n	800a060 <_dtoa_r+0xaa8>
 800a144:	462b      	mov	r3, r5
 800a146:	461d      	mov	r5, r3
 800a148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a14c:	2a30      	cmp	r2, #48	; 0x30
 800a14e:	d0fa      	beq.n	800a146 <_dtoa_r+0xb8e>
 800a150:	e6d7      	b.n	8009f02 <_dtoa_r+0x94a>
 800a152:	9a01      	ldr	r2, [sp, #4]
 800a154:	429a      	cmp	r2, r3
 800a156:	d184      	bne.n	800a062 <_dtoa_r+0xaaa>
 800a158:	9b00      	ldr	r3, [sp, #0]
 800a15a:	3301      	adds	r3, #1
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	2331      	movs	r3, #49	; 0x31
 800a160:	7013      	strb	r3, [r2, #0]
 800a162:	e6ce      	b.n	8009f02 <_dtoa_r+0x94a>
 800a164:	4b09      	ldr	r3, [pc, #36]	; (800a18c <_dtoa_r+0xbd4>)
 800a166:	f7ff ba95 	b.w	8009694 <_dtoa_r+0xdc>
 800a16a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f47f aa6e 	bne.w	800964e <_dtoa_r+0x96>
 800a172:	4b07      	ldr	r3, [pc, #28]	; (800a190 <_dtoa_r+0xbd8>)
 800a174:	f7ff ba8e 	b.w	8009694 <_dtoa_r+0xdc>
 800a178:	9b02      	ldr	r3, [sp, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	dcae      	bgt.n	800a0dc <_dtoa_r+0xb24>
 800a17e:	9b06      	ldr	r3, [sp, #24]
 800a180:	2b02      	cmp	r3, #2
 800a182:	f73f aea8 	bgt.w	8009ed6 <_dtoa_r+0x91e>
 800a186:	e7a9      	b.n	800a0dc <_dtoa_r+0xb24>
 800a188:	0800becc 	.word	0x0800becc
 800a18c:	0800bd90 	.word	0x0800bd90
 800a190:	0800be64 	.word	0x0800be64

0800a194 <__sflush_r>:
 800a194:	898a      	ldrh	r2, [r1, #12]
 800a196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a19a:	4605      	mov	r5, r0
 800a19c:	0710      	lsls	r0, r2, #28
 800a19e:	460c      	mov	r4, r1
 800a1a0:	d458      	bmi.n	800a254 <__sflush_r+0xc0>
 800a1a2:	684b      	ldr	r3, [r1, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	dc05      	bgt.n	800a1b4 <__sflush_r+0x20>
 800a1a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	dc02      	bgt.n	800a1b4 <__sflush_r+0x20>
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1b6:	2e00      	cmp	r6, #0
 800a1b8:	d0f9      	beq.n	800a1ae <__sflush_r+0x1a>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1c0:	682f      	ldr	r7, [r5, #0]
 800a1c2:	602b      	str	r3, [r5, #0]
 800a1c4:	d032      	beq.n	800a22c <__sflush_r+0x98>
 800a1c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	075a      	lsls	r2, r3, #29
 800a1cc:	d505      	bpl.n	800a1da <__sflush_r+0x46>
 800a1ce:	6863      	ldr	r3, [r4, #4]
 800a1d0:	1ac0      	subs	r0, r0, r3
 800a1d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1d4:	b10b      	cbz	r3, 800a1da <__sflush_r+0x46>
 800a1d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1d8:	1ac0      	subs	r0, r0, r3
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4602      	mov	r2, r0
 800a1de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1e0:	6a21      	ldr	r1, [r4, #32]
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	47b0      	blx	r6
 800a1e6:	1c43      	adds	r3, r0, #1
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	d106      	bne.n	800a1fa <__sflush_r+0x66>
 800a1ec:	6829      	ldr	r1, [r5, #0]
 800a1ee:	291d      	cmp	r1, #29
 800a1f0:	d82c      	bhi.n	800a24c <__sflush_r+0xb8>
 800a1f2:	4a2a      	ldr	r2, [pc, #168]	; (800a29c <__sflush_r+0x108>)
 800a1f4:	40ca      	lsrs	r2, r1
 800a1f6:	07d6      	lsls	r6, r2, #31
 800a1f8:	d528      	bpl.n	800a24c <__sflush_r+0xb8>
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	6062      	str	r2, [r4, #4]
 800a1fe:	04d9      	lsls	r1, r3, #19
 800a200:	6922      	ldr	r2, [r4, #16]
 800a202:	6022      	str	r2, [r4, #0]
 800a204:	d504      	bpl.n	800a210 <__sflush_r+0x7c>
 800a206:	1c42      	adds	r2, r0, #1
 800a208:	d101      	bne.n	800a20e <__sflush_r+0x7a>
 800a20a:	682b      	ldr	r3, [r5, #0]
 800a20c:	b903      	cbnz	r3, 800a210 <__sflush_r+0x7c>
 800a20e:	6560      	str	r0, [r4, #84]	; 0x54
 800a210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a212:	602f      	str	r7, [r5, #0]
 800a214:	2900      	cmp	r1, #0
 800a216:	d0ca      	beq.n	800a1ae <__sflush_r+0x1a>
 800a218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a21c:	4299      	cmp	r1, r3
 800a21e:	d002      	beq.n	800a226 <__sflush_r+0x92>
 800a220:	4628      	mov	r0, r5
 800a222:	f000 fcb5 	bl	800ab90 <_free_r>
 800a226:	2000      	movs	r0, #0
 800a228:	6360      	str	r0, [r4, #52]	; 0x34
 800a22a:	e7c1      	b.n	800a1b0 <__sflush_r+0x1c>
 800a22c:	6a21      	ldr	r1, [r4, #32]
 800a22e:	2301      	movs	r3, #1
 800a230:	4628      	mov	r0, r5
 800a232:	47b0      	blx	r6
 800a234:	1c41      	adds	r1, r0, #1
 800a236:	d1c7      	bne.n	800a1c8 <__sflush_r+0x34>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0c4      	beq.n	800a1c8 <__sflush_r+0x34>
 800a23e:	2b1d      	cmp	r3, #29
 800a240:	d001      	beq.n	800a246 <__sflush_r+0xb2>
 800a242:	2b16      	cmp	r3, #22
 800a244:	d101      	bne.n	800a24a <__sflush_r+0xb6>
 800a246:	602f      	str	r7, [r5, #0]
 800a248:	e7b1      	b.n	800a1ae <__sflush_r+0x1a>
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	e7ad      	b.n	800a1b0 <__sflush_r+0x1c>
 800a254:	690f      	ldr	r7, [r1, #16]
 800a256:	2f00      	cmp	r7, #0
 800a258:	d0a9      	beq.n	800a1ae <__sflush_r+0x1a>
 800a25a:	0793      	lsls	r3, r2, #30
 800a25c:	680e      	ldr	r6, [r1, #0]
 800a25e:	bf08      	it	eq
 800a260:	694b      	ldreq	r3, [r1, #20]
 800a262:	600f      	str	r7, [r1, #0]
 800a264:	bf18      	it	ne
 800a266:	2300      	movne	r3, #0
 800a268:	eba6 0807 	sub.w	r8, r6, r7
 800a26c:	608b      	str	r3, [r1, #8]
 800a26e:	f1b8 0f00 	cmp.w	r8, #0
 800a272:	dd9c      	ble.n	800a1ae <__sflush_r+0x1a>
 800a274:	6a21      	ldr	r1, [r4, #32]
 800a276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a278:	4643      	mov	r3, r8
 800a27a:	463a      	mov	r2, r7
 800a27c:	4628      	mov	r0, r5
 800a27e:	47b0      	blx	r6
 800a280:	2800      	cmp	r0, #0
 800a282:	dc06      	bgt.n	800a292 <__sflush_r+0xfe>
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a28a:	81a3      	strh	r3, [r4, #12]
 800a28c:	f04f 30ff 	mov.w	r0, #4294967295
 800a290:	e78e      	b.n	800a1b0 <__sflush_r+0x1c>
 800a292:	4407      	add	r7, r0
 800a294:	eba8 0800 	sub.w	r8, r8, r0
 800a298:	e7e9      	b.n	800a26e <__sflush_r+0xda>
 800a29a:	bf00      	nop
 800a29c:	20400001 	.word	0x20400001

0800a2a0 <_fflush_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	690b      	ldr	r3, [r1, #16]
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	b913      	cbnz	r3, 800a2b0 <_fflush_r+0x10>
 800a2aa:	2500      	movs	r5, #0
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	b118      	cbz	r0, 800a2ba <_fflush_r+0x1a>
 800a2b2:	6983      	ldr	r3, [r0, #24]
 800a2b4:	b90b      	cbnz	r3, 800a2ba <_fflush_r+0x1a>
 800a2b6:	f7fe f849 	bl	800834c <__sinit>
 800a2ba:	4b14      	ldr	r3, [pc, #80]	; (800a30c <_fflush_r+0x6c>)
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	d11b      	bne.n	800a2f8 <_fflush_r+0x58>
 800a2c0:	686c      	ldr	r4, [r5, #4]
 800a2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0ef      	beq.n	800a2aa <_fflush_r+0xa>
 800a2ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2cc:	07d0      	lsls	r0, r2, #31
 800a2ce:	d404      	bmi.n	800a2da <_fflush_r+0x3a>
 800a2d0:	0599      	lsls	r1, r3, #22
 800a2d2:	d402      	bmi.n	800a2da <_fflush_r+0x3a>
 800a2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2d6:	f7fe f8fc 	bl	80084d2 <__retarget_lock_acquire_recursive>
 800a2da:	4628      	mov	r0, r5
 800a2dc:	4621      	mov	r1, r4
 800a2de:	f7ff ff59 	bl	800a194 <__sflush_r>
 800a2e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2e4:	07da      	lsls	r2, r3, #31
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	d4e0      	bmi.n	800a2ac <_fflush_r+0xc>
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	059b      	lsls	r3, r3, #22
 800a2ee:	d4dd      	bmi.n	800a2ac <_fflush_r+0xc>
 800a2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2f2:	f7fe f8ef 	bl	80084d4 <__retarget_lock_release_recursive>
 800a2f6:	e7d9      	b.n	800a2ac <_fflush_r+0xc>
 800a2f8:	4b05      	ldr	r3, [pc, #20]	; (800a310 <_fflush_r+0x70>)
 800a2fa:	429c      	cmp	r4, r3
 800a2fc:	d101      	bne.n	800a302 <_fflush_r+0x62>
 800a2fe:	68ac      	ldr	r4, [r5, #8]
 800a300:	e7df      	b.n	800a2c2 <_fflush_r+0x22>
 800a302:	4b04      	ldr	r3, [pc, #16]	; (800a314 <_fflush_r+0x74>)
 800a304:	429c      	cmp	r4, r3
 800a306:	bf08      	it	eq
 800a308:	68ec      	ldreq	r4, [r5, #12]
 800a30a:	e7da      	b.n	800a2c2 <_fflush_r+0x22>
 800a30c:	0800bd3c 	.word	0x0800bd3c
 800a310:	0800bd5c 	.word	0x0800bd5c
 800a314:	0800bd1c 	.word	0x0800bd1c

0800a318 <fiprintf>:
 800a318:	b40e      	push	{r1, r2, r3}
 800a31a:	b503      	push	{r0, r1, lr}
 800a31c:	4601      	mov	r1, r0
 800a31e:	ab03      	add	r3, sp, #12
 800a320:	4805      	ldr	r0, [pc, #20]	; (800a338 <fiprintf+0x20>)
 800a322:	f853 2b04 	ldr.w	r2, [r3], #4
 800a326:	6800      	ldr	r0, [r0, #0]
 800a328:	9301      	str	r3, [sp, #4]
 800a32a:	f000 fe03 	bl	800af34 <_vfiprintf_r>
 800a32e:	b002      	add	sp, #8
 800a330:	f85d eb04 	ldr.w	lr, [sp], #4
 800a334:	b003      	add	sp, #12
 800a336:	4770      	bx	lr
 800a338:	20000104 	.word	0x20000104

0800a33c <_localeconv_r>:
 800a33c:	4800      	ldr	r0, [pc, #0]	; (800a340 <_localeconv_r+0x4>)
 800a33e:	4770      	bx	lr
 800a340:	20000258 	.word	0x20000258

0800a344 <_lseek_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	4d07      	ldr	r5, [pc, #28]	; (800a364 <_lseek_r+0x20>)
 800a348:	4604      	mov	r4, r0
 800a34a:	4608      	mov	r0, r1
 800a34c:	4611      	mov	r1, r2
 800a34e:	2200      	movs	r2, #0
 800a350:	602a      	str	r2, [r5, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	f7fd fd8d 	bl	8007e72 <_lseek>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	d102      	bne.n	800a362 <_lseek_r+0x1e>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	b103      	cbz	r3, 800a362 <_lseek_r+0x1e>
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	bd38      	pop	{r3, r4, r5, pc}
 800a364:	20000c80 	.word	0x20000c80

0800a368 <__swhatbuf_r>:
 800a368:	b570      	push	{r4, r5, r6, lr}
 800a36a:	460e      	mov	r6, r1
 800a36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a370:	2900      	cmp	r1, #0
 800a372:	b096      	sub	sp, #88	; 0x58
 800a374:	4614      	mov	r4, r2
 800a376:	461d      	mov	r5, r3
 800a378:	da08      	bge.n	800a38c <__swhatbuf_r+0x24>
 800a37a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	602a      	str	r2, [r5, #0]
 800a382:	061a      	lsls	r2, r3, #24
 800a384:	d410      	bmi.n	800a3a8 <__swhatbuf_r+0x40>
 800a386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a38a:	e00e      	b.n	800a3aa <__swhatbuf_r+0x42>
 800a38c:	466a      	mov	r2, sp
 800a38e:	f000 ff1b 	bl	800b1c8 <_fstat_r>
 800a392:	2800      	cmp	r0, #0
 800a394:	dbf1      	blt.n	800a37a <__swhatbuf_r+0x12>
 800a396:	9a01      	ldr	r2, [sp, #4]
 800a398:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a39c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3a0:	425a      	negs	r2, r3
 800a3a2:	415a      	adcs	r2, r3
 800a3a4:	602a      	str	r2, [r5, #0]
 800a3a6:	e7ee      	b.n	800a386 <__swhatbuf_r+0x1e>
 800a3a8:	2340      	movs	r3, #64	; 0x40
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	b016      	add	sp, #88	; 0x58
 800a3b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a3b4 <__smakebuf_r>:
 800a3b4:	898b      	ldrh	r3, [r1, #12]
 800a3b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3b8:	079d      	lsls	r5, r3, #30
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460c      	mov	r4, r1
 800a3be:	d507      	bpl.n	800a3d0 <__smakebuf_r+0x1c>
 800a3c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	6123      	str	r3, [r4, #16]
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	6163      	str	r3, [r4, #20]
 800a3cc:	b002      	add	sp, #8
 800a3ce:	bd70      	pop	{r4, r5, r6, pc}
 800a3d0:	ab01      	add	r3, sp, #4
 800a3d2:	466a      	mov	r2, sp
 800a3d4:	f7ff ffc8 	bl	800a368 <__swhatbuf_r>
 800a3d8:	9900      	ldr	r1, [sp, #0]
 800a3da:	4605      	mov	r5, r0
 800a3dc:	4630      	mov	r0, r6
 800a3de:	f7fe f8b1 	bl	8008544 <_malloc_r>
 800a3e2:	b948      	cbnz	r0, 800a3f8 <__smakebuf_r+0x44>
 800a3e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3e8:	059a      	lsls	r2, r3, #22
 800a3ea:	d4ef      	bmi.n	800a3cc <__smakebuf_r+0x18>
 800a3ec:	f023 0303 	bic.w	r3, r3, #3
 800a3f0:	f043 0302 	orr.w	r3, r3, #2
 800a3f4:	81a3      	strh	r3, [r4, #12]
 800a3f6:	e7e3      	b.n	800a3c0 <__smakebuf_r+0xc>
 800a3f8:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <__smakebuf_r+0x7c>)
 800a3fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	6020      	str	r0, [r4, #0]
 800a400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a404:	81a3      	strh	r3, [r4, #12]
 800a406:	9b00      	ldr	r3, [sp, #0]
 800a408:	6163      	str	r3, [r4, #20]
 800a40a:	9b01      	ldr	r3, [sp, #4]
 800a40c:	6120      	str	r0, [r4, #16]
 800a40e:	b15b      	cbz	r3, 800a428 <__smakebuf_r+0x74>
 800a410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a414:	4630      	mov	r0, r6
 800a416:	f000 fee9 	bl	800b1ec <_isatty_r>
 800a41a:	b128      	cbz	r0, 800a428 <__smakebuf_r+0x74>
 800a41c:	89a3      	ldrh	r3, [r4, #12]
 800a41e:	f023 0303 	bic.w	r3, r3, #3
 800a422:	f043 0301 	orr.w	r3, r3, #1
 800a426:	81a3      	strh	r3, [r4, #12]
 800a428:	89a0      	ldrh	r0, [r4, #12]
 800a42a:	4305      	orrs	r5, r0
 800a42c:	81a5      	strh	r5, [r4, #12]
 800a42e:	e7cd      	b.n	800a3cc <__smakebuf_r+0x18>
 800a430:	080082e5 	.word	0x080082e5

0800a434 <malloc>:
 800a434:	4b02      	ldr	r3, [pc, #8]	; (800a440 <malloc+0xc>)
 800a436:	4601      	mov	r1, r0
 800a438:	6818      	ldr	r0, [r3, #0]
 800a43a:	f7fe b883 	b.w	8008544 <_malloc_r>
 800a43e:	bf00      	nop
 800a440:	20000104 	.word	0x20000104

0800a444 <__malloc_lock>:
 800a444:	4801      	ldr	r0, [pc, #4]	; (800a44c <__malloc_lock+0x8>)
 800a446:	f7fe b844 	b.w	80084d2 <__retarget_lock_acquire_recursive>
 800a44a:	bf00      	nop
 800a44c:	20000c74 	.word	0x20000c74

0800a450 <__malloc_unlock>:
 800a450:	4801      	ldr	r0, [pc, #4]	; (800a458 <__malloc_unlock+0x8>)
 800a452:	f7fe b83f 	b.w	80084d4 <__retarget_lock_release_recursive>
 800a456:	bf00      	nop
 800a458:	20000c74 	.word	0x20000c74

0800a45c <_Balloc>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a460:	4604      	mov	r4, r0
 800a462:	460d      	mov	r5, r1
 800a464:	b976      	cbnz	r6, 800a484 <_Balloc+0x28>
 800a466:	2010      	movs	r0, #16
 800a468:	f7ff ffe4 	bl	800a434 <malloc>
 800a46c:	4602      	mov	r2, r0
 800a46e:	6260      	str	r0, [r4, #36]	; 0x24
 800a470:	b920      	cbnz	r0, 800a47c <_Balloc+0x20>
 800a472:	4b18      	ldr	r3, [pc, #96]	; (800a4d4 <_Balloc+0x78>)
 800a474:	4818      	ldr	r0, [pc, #96]	; (800a4d8 <_Balloc+0x7c>)
 800a476:	2166      	movs	r1, #102	; 0x66
 800a478:	f7fe ffe2 	bl	8009440 <__assert_func>
 800a47c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a480:	6006      	str	r6, [r0, #0]
 800a482:	60c6      	str	r6, [r0, #12]
 800a484:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a486:	68f3      	ldr	r3, [r6, #12]
 800a488:	b183      	cbz	r3, 800a4ac <_Balloc+0x50>
 800a48a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a492:	b9b8      	cbnz	r0, 800a4c4 <_Balloc+0x68>
 800a494:	2101      	movs	r1, #1
 800a496:	fa01 f605 	lsl.w	r6, r1, r5
 800a49a:	1d72      	adds	r2, r6, #5
 800a49c:	0092      	lsls	r2, r2, #2
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f000 fb60 	bl	800ab64 <_calloc_r>
 800a4a4:	b160      	cbz	r0, 800a4c0 <_Balloc+0x64>
 800a4a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4aa:	e00e      	b.n	800a4ca <_Balloc+0x6e>
 800a4ac:	2221      	movs	r2, #33	; 0x21
 800a4ae:	2104      	movs	r1, #4
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 fb57 	bl	800ab64 <_calloc_r>
 800a4b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4b8:	60f0      	str	r0, [r6, #12]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1e4      	bne.n	800a48a <_Balloc+0x2e>
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	bd70      	pop	{r4, r5, r6, pc}
 800a4c4:	6802      	ldr	r2, [r0, #0]
 800a4c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4d0:	e7f7      	b.n	800a4c2 <_Balloc+0x66>
 800a4d2:	bf00      	nop
 800a4d4:	0800bdb4 	.word	0x0800bdb4
 800a4d8:	0800bedd 	.word	0x0800bedd

0800a4dc <_Bfree>:
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	b976      	cbnz	r6, 800a504 <_Bfree+0x28>
 800a4e6:	2010      	movs	r0, #16
 800a4e8:	f7ff ffa4 	bl	800a434 <malloc>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	6268      	str	r0, [r5, #36]	; 0x24
 800a4f0:	b920      	cbnz	r0, 800a4fc <_Bfree+0x20>
 800a4f2:	4b09      	ldr	r3, [pc, #36]	; (800a518 <_Bfree+0x3c>)
 800a4f4:	4809      	ldr	r0, [pc, #36]	; (800a51c <_Bfree+0x40>)
 800a4f6:	218a      	movs	r1, #138	; 0x8a
 800a4f8:	f7fe ffa2 	bl	8009440 <__assert_func>
 800a4fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a500:	6006      	str	r6, [r0, #0]
 800a502:	60c6      	str	r6, [r0, #12]
 800a504:	b13c      	cbz	r4, 800a516 <_Bfree+0x3a>
 800a506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a508:	6862      	ldr	r2, [r4, #4]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a510:	6021      	str	r1, [r4, #0]
 800a512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a516:	bd70      	pop	{r4, r5, r6, pc}
 800a518:	0800bdb4 	.word	0x0800bdb4
 800a51c:	0800bedd 	.word	0x0800bedd

0800a520 <__multadd>:
 800a520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a524:	690d      	ldr	r5, [r1, #16]
 800a526:	4607      	mov	r7, r0
 800a528:	460c      	mov	r4, r1
 800a52a:	461e      	mov	r6, r3
 800a52c:	f101 0c14 	add.w	ip, r1, #20
 800a530:	2000      	movs	r0, #0
 800a532:	f8dc 3000 	ldr.w	r3, [ip]
 800a536:	b299      	uxth	r1, r3
 800a538:	fb02 6101 	mla	r1, r2, r1, r6
 800a53c:	0c1e      	lsrs	r6, r3, #16
 800a53e:	0c0b      	lsrs	r3, r1, #16
 800a540:	fb02 3306 	mla	r3, r2, r6, r3
 800a544:	b289      	uxth	r1, r1
 800a546:	3001      	adds	r0, #1
 800a548:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a54c:	4285      	cmp	r5, r0
 800a54e:	f84c 1b04 	str.w	r1, [ip], #4
 800a552:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a556:	dcec      	bgt.n	800a532 <__multadd+0x12>
 800a558:	b30e      	cbz	r6, 800a59e <__multadd+0x7e>
 800a55a:	68a3      	ldr	r3, [r4, #8]
 800a55c:	42ab      	cmp	r3, r5
 800a55e:	dc19      	bgt.n	800a594 <__multadd+0x74>
 800a560:	6861      	ldr	r1, [r4, #4]
 800a562:	4638      	mov	r0, r7
 800a564:	3101      	adds	r1, #1
 800a566:	f7ff ff79 	bl	800a45c <_Balloc>
 800a56a:	4680      	mov	r8, r0
 800a56c:	b928      	cbnz	r0, 800a57a <__multadd+0x5a>
 800a56e:	4602      	mov	r2, r0
 800a570:	4b0c      	ldr	r3, [pc, #48]	; (800a5a4 <__multadd+0x84>)
 800a572:	480d      	ldr	r0, [pc, #52]	; (800a5a8 <__multadd+0x88>)
 800a574:	21b5      	movs	r1, #181	; 0xb5
 800a576:	f7fe ff63 	bl	8009440 <__assert_func>
 800a57a:	6922      	ldr	r2, [r4, #16]
 800a57c:	3202      	adds	r2, #2
 800a57e:	f104 010c 	add.w	r1, r4, #12
 800a582:	0092      	lsls	r2, r2, #2
 800a584:	300c      	adds	r0, #12
 800a586:	f7fd ffa6 	bl	80084d6 <memcpy>
 800a58a:	4621      	mov	r1, r4
 800a58c:	4638      	mov	r0, r7
 800a58e:	f7ff ffa5 	bl	800a4dc <_Bfree>
 800a592:	4644      	mov	r4, r8
 800a594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a598:	3501      	adds	r5, #1
 800a59a:	615e      	str	r6, [r3, #20]
 800a59c:	6125      	str	r5, [r4, #16]
 800a59e:	4620      	mov	r0, r4
 800a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a4:	0800becc 	.word	0x0800becc
 800a5a8:	0800bedd 	.word	0x0800bedd

0800a5ac <__hi0bits>:
 800a5ac:	0c03      	lsrs	r3, r0, #16
 800a5ae:	041b      	lsls	r3, r3, #16
 800a5b0:	b9d3      	cbnz	r3, 800a5e8 <__hi0bits+0x3c>
 800a5b2:	0400      	lsls	r0, r0, #16
 800a5b4:	2310      	movs	r3, #16
 800a5b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5ba:	bf04      	itt	eq
 800a5bc:	0200      	lsleq	r0, r0, #8
 800a5be:	3308      	addeq	r3, #8
 800a5c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5c4:	bf04      	itt	eq
 800a5c6:	0100      	lsleq	r0, r0, #4
 800a5c8:	3304      	addeq	r3, #4
 800a5ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5ce:	bf04      	itt	eq
 800a5d0:	0080      	lsleq	r0, r0, #2
 800a5d2:	3302      	addeq	r3, #2
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	db05      	blt.n	800a5e4 <__hi0bits+0x38>
 800a5d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5dc:	f103 0301 	add.w	r3, r3, #1
 800a5e0:	bf08      	it	eq
 800a5e2:	2320      	moveq	r3, #32
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	4770      	bx	lr
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	e7e4      	b.n	800a5b6 <__hi0bits+0xa>

0800a5ec <__lo0bits>:
 800a5ec:	6803      	ldr	r3, [r0, #0]
 800a5ee:	f013 0207 	ands.w	r2, r3, #7
 800a5f2:	4601      	mov	r1, r0
 800a5f4:	d00b      	beq.n	800a60e <__lo0bits+0x22>
 800a5f6:	07da      	lsls	r2, r3, #31
 800a5f8:	d423      	bmi.n	800a642 <__lo0bits+0x56>
 800a5fa:	0798      	lsls	r0, r3, #30
 800a5fc:	bf49      	itett	mi
 800a5fe:	085b      	lsrmi	r3, r3, #1
 800a600:	089b      	lsrpl	r3, r3, #2
 800a602:	2001      	movmi	r0, #1
 800a604:	600b      	strmi	r3, [r1, #0]
 800a606:	bf5c      	itt	pl
 800a608:	600b      	strpl	r3, [r1, #0]
 800a60a:	2002      	movpl	r0, #2
 800a60c:	4770      	bx	lr
 800a60e:	b298      	uxth	r0, r3
 800a610:	b9a8      	cbnz	r0, 800a63e <__lo0bits+0x52>
 800a612:	0c1b      	lsrs	r3, r3, #16
 800a614:	2010      	movs	r0, #16
 800a616:	b2da      	uxtb	r2, r3
 800a618:	b90a      	cbnz	r2, 800a61e <__lo0bits+0x32>
 800a61a:	3008      	adds	r0, #8
 800a61c:	0a1b      	lsrs	r3, r3, #8
 800a61e:	071a      	lsls	r2, r3, #28
 800a620:	bf04      	itt	eq
 800a622:	091b      	lsreq	r3, r3, #4
 800a624:	3004      	addeq	r0, #4
 800a626:	079a      	lsls	r2, r3, #30
 800a628:	bf04      	itt	eq
 800a62a:	089b      	lsreq	r3, r3, #2
 800a62c:	3002      	addeq	r0, #2
 800a62e:	07da      	lsls	r2, r3, #31
 800a630:	d403      	bmi.n	800a63a <__lo0bits+0x4e>
 800a632:	085b      	lsrs	r3, r3, #1
 800a634:	f100 0001 	add.w	r0, r0, #1
 800a638:	d005      	beq.n	800a646 <__lo0bits+0x5a>
 800a63a:	600b      	str	r3, [r1, #0]
 800a63c:	4770      	bx	lr
 800a63e:	4610      	mov	r0, r2
 800a640:	e7e9      	b.n	800a616 <__lo0bits+0x2a>
 800a642:	2000      	movs	r0, #0
 800a644:	4770      	bx	lr
 800a646:	2020      	movs	r0, #32
 800a648:	4770      	bx	lr
	...

0800a64c <__i2b>:
 800a64c:	b510      	push	{r4, lr}
 800a64e:	460c      	mov	r4, r1
 800a650:	2101      	movs	r1, #1
 800a652:	f7ff ff03 	bl	800a45c <_Balloc>
 800a656:	4602      	mov	r2, r0
 800a658:	b928      	cbnz	r0, 800a666 <__i2b+0x1a>
 800a65a:	4b05      	ldr	r3, [pc, #20]	; (800a670 <__i2b+0x24>)
 800a65c:	4805      	ldr	r0, [pc, #20]	; (800a674 <__i2b+0x28>)
 800a65e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a662:	f7fe feed 	bl	8009440 <__assert_func>
 800a666:	2301      	movs	r3, #1
 800a668:	6144      	str	r4, [r0, #20]
 800a66a:	6103      	str	r3, [r0, #16]
 800a66c:	bd10      	pop	{r4, pc}
 800a66e:	bf00      	nop
 800a670:	0800becc 	.word	0x0800becc
 800a674:	0800bedd 	.word	0x0800bedd

0800a678 <__multiply>:
 800a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	4691      	mov	r9, r2
 800a67e:	690a      	ldr	r2, [r1, #16]
 800a680:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a684:	429a      	cmp	r2, r3
 800a686:	bfb8      	it	lt
 800a688:	460b      	movlt	r3, r1
 800a68a:	460c      	mov	r4, r1
 800a68c:	bfbc      	itt	lt
 800a68e:	464c      	movlt	r4, r9
 800a690:	4699      	movlt	r9, r3
 800a692:	6927      	ldr	r7, [r4, #16]
 800a694:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a698:	68a3      	ldr	r3, [r4, #8]
 800a69a:	6861      	ldr	r1, [r4, #4]
 800a69c:	eb07 060a 	add.w	r6, r7, sl
 800a6a0:	42b3      	cmp	r3, r6
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	bfb8      	it	lt
 800a6a6:	3101      	addlt	r1, #1
 800a6a8:	f7ff fed8 	bl	800a45c <_Balloc>
 800a6ac:	b930      	cbnz	r0, 800a6bc <__multiply+0x44>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	4b44      	ldr	r3, [pc, #272]	; (800a7c4 <__multiply+0x14c>)
 800a6b2:	4845      	ldr	r0, [pc, #276]	; (800a7c8 <__multiply+0x150>)
 800a6b4:	f240 115d 	movw	r1, #349	; 0x15d
 800a6b8:	f7fe fec2 	bl	8009440 <__assert_func>
 800a6bc:	f100 0514 	add.w	r5, r0, #20
 800a6c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6c4:	462b      	mov	r3, r5
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	4543      	cmp	r3, r8
 800a6ca:	d321      	bcc.n	800a710 <__multiply+0x98>
 800a6cc:	f104 0314 	add.w	r3, r4, #20
 800a6d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6d4:	f109 0314 	add.w	r3, r9, #20
 800a6d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a6dc:	9202      	str	r2, [sp, #8]
 800a6de:	1b3a      	subs	r2, r7, r4
 800a6e0:	3a15      	subs	r2, #21
 800a6e2:	f022 0203 	bic.w	r2, r2, #3
 800a6e6:	3204      	adds	r2, #4
 800a6e8:	f104 0115 	add.w	r1, r4, #21
 800a6ec:	428f      	cmp	r7, r1
 800a6ee:	bf38      	it	cc
 800a6f0:	2204      	movcc	r2, #4
 800a6f2:	9201      	str	r2, [sp, #4]
 800a6f4:	9a02      	ldr	r2, [sp, #8]
 800a6f6:	9303      	str	r3, [sp, #12]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d80c      	bhi.n	800a716 <__multiply+0x9e>
 800a6fc:	2e00      	cmp	r6, #0
 800a6fe:	dd03      	ble.n	800a708 <__multiply+0x90>
 800a700:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a704:	2b00      	cmp	r3, #0
 800a706:	d05a      	beq.n	800a7be <__multiply+0x146>
 800a708:	6106      	str	r6, [r0, #16]
 800a70a:	b005      	add	sp, #20
 800a70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a710:	f843 2b04 	str.w	r2, [r3], #4
 800a714:	e7d8      	b.n	800a6c8 <__multiply+0x50>
 800a716:	f8b3 a000 	ldrh.w	sl, [r3]
 800a71a:	f1ba 0f00 	cmp.w	sl, #0
 800a71e:	d024      	beq.n	800a76a <__multiply+0xf2>
 800a720:	f104 0e14 	add.w	lr, r4, #20
 800a724:	46a9      	mov	r9, r5
 800a726:	f04f 0c00 	mov.w	ip, #0
 800a72a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a72e:	f8d9 1000 	ldr.w	r1, [r9]
 800a732:	fa1f fb82 	uxth.w	fp, r2
 800a736:	b289      	uxth	r1, r1
 800a738:	fb0a 110b 	mla	r1, sl, fp, r1
 800a73c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a740:	f8d9 2000 	ldr.w	r2, [r9]
 800a744:	4461      	add	r1, ip
 800a746:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a74a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a74e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a752:	b289      	uxth	r1, r1
 800a754:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a758:	4577      	cmp	r7, lr
 800a75a:	f849 1b04 	str.w	r1, [r9], #4
 800a75e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a762:	d8e2      	bhi.n	800a72a <__multiply+0xb2>
 800a764:	9a01      	ldr	r2, [sp, #4]
 800a766:	f845 c002 	str.w	ip, [r5, r2]
 800a76a:	9a03      	ldr	r2, [sp, #12]
 800a76c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a770:	3304      	adds	r3, #4
 800a772:	f1b9 0f00 	cmp.w	r9, #0
 800a776:	d020      	beq.n	800a7ba <__multiply+0x142>
 800a778:	6829      	ldr	r1, [r5, #0]
 800a77a:	f104 0c14 	add.w	ip, r4, #20
 800a77e:	46ae      	mov	lr, r5
 800a780:	f04f 0a00 	mov.w	sl, #0
 800a784:	f8bc b000 	ldrh.w	fp, [ip]
 800a788:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a78c:	fb09 220b 	mla	r2, r9, fp, r2
 800a790:	4492      	add	sl, r2
 800a792:	b289      	uxth	r1, r1
 800a794:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a798:	f84e 1b04 	str.w	r1, [lr], #4
 800a79c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a7a0:	f8be 1000 	ldrh.w	r1, [lr]
 800a7a4:	0c12      	lsrs	r2, r2, #16
 800a7a6:	fb09 1102 	mla	r1, r9, r2, r1
 800a7aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a7ae:	4567      	cmp	r7, ip
 800a7b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7b4:	d8e6      	bhi.n	800a784 <__multiply+0x10c>
 800a7b6:	9a01      	ldr	r2, [sp, #4]
 800a7b8:	50a9      	str	r1, [r5, r2]
 800a7ba:	3504      	adds	r5, #4
 800a7bc:	e79a      	b.n	800a6f4 <__multiply+0x7c>
 800a7be:	3e01      	subs	r6, #1
 800a7c0:	e79c      	b.n	800a6fc <__multiply+0x84>
 800a7c2:	bf00      	nop
 800a7c4:	0800becc 	.word	0x0800becc
 800a7c8:	0800bedd 	.word	0x0800bedd

0800a7cc <__pow5mult>:
 800a7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d0:	4615      	mov	r5, r2
 800a7d2:	f012 0203 	ands.w	r2, r2, #3
 800a7d6:	4606      	mov	r6, r0
 800a7d8:	460f      	mov	r7, r1
 800a7da:	d007      	beq.n	800a7ec <__pow5mult+0x20>
 800a7dc:	4c25      	ldr	r4, [pc, #148]	; (800a874 <__pow5mult+0xa8>)
 800a7de:	3a01      	subs	r2, #1
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7e6:	f7ff fe9b 	bl	800a520 <__multadd>
 800a7ea:	4607      	mov	r7, r0
 800a7ec:	10ad      	asrs	r5, r5, #2
 800a7ee:	d03d      	beq.n	800a86c <__pow5mult+0xa0>
 800a7f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a7f2:	b97c      	cbnz	r4, 800a814 <__pow5mult+0x48>
 800a7f4:	2010      	movs	r0, #16
 800a7f6:	f7ff fe1d 	bl	800a434 <malloc>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	6270      	str	r0, [r6, #36]	; 0x24
 800a7fe:	b928      	cbnz	r0, 800a80c <__pow5mult+0x40>
 800a800:	4b1d      	ldr	r3, [pc, #116]	; (800a878 <__pow5mult+0xac>)
 800a802:	481e      	ldr	r0, [pc, #120]	; (800a87c <__pow5mult+0xb0>)
 800a804:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a808:	f7fe fe1a 	bl	8009440 <__assert_func>
 800a80c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a810:	6004      	str	r4, [r0, #0]
 800a812:	60c4      	str	r4, [r0, #12]
 800a814:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a818:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a81c:	b94c      	cbnz	r4, 800a832 <__pow5mult+0x66>
 800a81e:	f240 2171 	movw	r1, #625	; 0x271
 800a822:	4630      	mov	r0, r6
 800a824:	f7ff ff12 	bl	800a64c <__i2b>
 800a828:	2300      	movs	r3, #0
 800a82a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a82e:	4604      	mov	r4, r0
 800a830:	6003      	str	r3, [r0, #0]
 800a832:	f04f 0900 	mov.w	r9, #0
 800a836:	07eb      	lsls	r3, r5, #31
 800a838:	d50a      	bpl.n	800a850 <__pow5mult+0x84>
 800a83a:	4639      	mov	r1, r7
 800a83c:	4622      	mov	r2, r4
 800a83e:	4630      	mov	r0, r6
 800a840:	f7ff ff1a 	bl	800a678 <__multiply>
 800a844:	4639      	mov	r1, r7
 800a846:	4680      	mov	r8, r0
 800a848:	4630      	mov	r0, r6
 800a84a:	f7ff fe47 	bl	800a4dc <_Bfree>
 800a84e:	4647      	mov	r7, r8
 800a850:	106d      	asrs	r5, r5, #1
 800a852:	d00b      	beq.n	800a86c <__pow5mult+0xa0>
 800a854:	6820      	ldr	r0, [r4, #0]
 800a856:	b938      	cbnz	r0, 800a868 <__pow5mult+0x9c>
 800a858:	4622      	mov	r2, r4
 800a85a:	4621      	mov	r1, r4
 800a85c:	4630      	mov	r0, r6
 800a85e:	f7ff ff0b 	bl	800a678 <__multiply>
 800a862:	6020      	str	r0, [r4, #0]
 800a864:	f8c0 9000 	str.w	r9, [r0]
 800a868:	4604      	mov	r4, r0
 800a86a:	e7e4      	b.n	800a836 <__pow5mult+0x6a>
 800a86c:	4638      	mov	r0, r7
 800a86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a872:	bf00      	nop
 800a874:	0800c030 	.word	0x0800c030
 800a878:	0800bdb4 	.word	0x0800bdb4
 800a87c:	0800bedd 	.word	0x0800bedd

0800a880 <__lshift>:
 800a880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a884:	460c      	mov	r4, r1
 800a886:	6849      	ldr	r1, [r1, #4]
 800a888:	6923      	ldr	r3, [r4, #16]
 800a88a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a88e:	68a3      	ldr	r3, [r4, #8]
 800a890:	4607      	mov	r7, r0
 800a892:	4691      	mov	r9, r2
 800a894:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a898:	f108 0601 	add.w	r6, r8, #1
 800a89c:	42b3      	cmp	r3, r6
 800a89e:	db0b      	blt.n	800a8b8 <__lshift+0x38>
 800a8a0:	4638      	mov	r0, r7
 800a8a2:	f7ff fddb 	bl	800a45c <_Balloc>
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	b948      	cbnz	r0, 800a8be <__lshift+0x3e>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	4b2a      	ldr	r3, [pc, #168]	; (800a958 <__lshift+0xd8>)
 800a8ae:	482b      	ldr	r0, [pc, #172]	; (800a95c <__lshift+0xdc>)
 800a8b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a8b4:	f7fe fdc4 	bl	8009440 <__assert_func>
 800a8b8:	3101      	adds	r1, #1
 800a8ba:	005b      	lsls	r3, r3, #1
 800a8bc:	e7ee      	b.n	800a89c <__lshift+0x1c>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f100 0114 	add.w	r1, r0, #20
 800a8c4:	f100 0210 	add.w	r2, r0, #16
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	4553      	cmp	r3, sl
 800a8cc:	db37      	blt.n	800a93e <__lshift+0xbe>
 800a8ce:	6920      	ldr	r0, [r4, #16]
 800a8d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8d4:	f104 0314 	add.w	r3, r4, #20
 800a8d8:	f019 091f 	ands.w	r9, r9, #31
 800a8dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8e4:	d02f      	beq.n	800a946 <__lshift+0xc6>
 800a8e6:	f1c9 0e20 	rsb	lr, r9, #32
 800a8ea:	468a      	mov	sl, r1
 800a8ec:	f04f 0c00 	mov.w	ip, #0
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	fa02 f209 	lsl.w	r2, r2, r9
 800a8f6:	ea42 020c 	orr.w	r2, r2, ip
 800a8fa:	f84a 2b04 	str.w	r2, [sl], #4
 800a8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a902:	4298      	cmp	r0, r3
 800a904:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a908:	d8f2      	bhi.n	800a8f0 <__lshift+0x70>
 800a90a:	1b03      	subs	r3, r0, r4
 800a90c:	3b15      	subs	r3, #21
 800a90e:	f023 0303 	bic.w	r3, r3, #3
 800a912:	3304      	adds	r3, #4
 800a914:	f104 0215 	add.w	r2, r4, #21
 800a918:	4290      	cmp	r0, r2
 800a91a:	bf38      	it	cc
 800a91c:	2304      	movcc	r3, #4
 800a91e:	f841 c003 	str.w	ip, [r1, r3]
 800a922:	f1bc 0f00 	cmp.w	ip, #0
 800a926:	d001      	beq.n	800a92c <__lshift+0xac>
 800a928:	f108 0602 	add.w	r6, r8, #2
 800a92c:	3e01      	subs	r6, #1
 800a92e:	4638      	mov	r0, r7
 800a930:	612e      	str	r6, [r5, #16]
 800a932:	4621      	mov	r1, r4
 800a934:	f7ff fdd2 	bl	800a4dc <_Bfree>
 800a938:	4628      	mov	r0, r5
 800a93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a93e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a942:	3301      	adds	r3, #1
 800a944:	e7c1      	b.n	800a8ca <__lshift+0x4a>
 800a946:	3904      	subs	r1, #4
 800a948:	f853 2b04 	ldr.w	r2, [r3], #4
 800a94c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a950:	4298      	cmp	r0, r3
 800a952:	d8f9      	bhi.n	800a948 <__lshift+0xc8>
 800a954:	e7ea      	b.n	800a92c <__lshift+0xac>
 800a956:	bf00      	nop
 800a958:	0800becc 	.word	0x0800becc
 800a95c:	0800bedd 	.word	0x0800bedd

0800a960 <__mcmp>:
 800a960:	b530      	push	{r4, r5, lr}
 800a962:	6902      	ldr	r2, [r0, #16]
 800a964:	690c      	ldr	r4, [r1, #16]
 800a966:	1b12      	subs	r2, r2, r4
 800a968:	d10e      	bne.n	800a988 <__mcmp+0x28>
 800a96a:	f100 0314 	add.w	r3, r0, #20
 800a96e:	3114      	adds	r1, #20
 800a970:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a974:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a978:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a97c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a980:	42a5      	cmp	r5, r4
 800a982:	d003      	beq.n	800a98c <__mcmp+0x2c>
 800a984:	d305      	bcc.n	800a992 <__mcmp+0x32>
 800a986:	2201      	movs	r2, #1
 800a988:	4610      	mov	r0, r2
 800a98a:	bd30      	pop	{r4, r5, pc}
 800a98c:	4283      	cmp	r3, r0
 800a98e:	d3f3      	bcc.n	800a978 <__mcmp+0x18>
 800a990:	e7fa      	b.n	800a988 <__mcmp+0x28>
 800a992:	f04f 32ff 	mov.w	r2, #4294967295
 800a996:	e7f7      	b.n	800a988 <__mcmp+0x28>

0800a998 <__mdiff>:
 800a998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99c:	460c      	mov	r4, r1
 800a99e:	4606      	mov	r6, r0
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	4690      	mov	r8, r2
 800a9a6:	f7ff ffdb 	bl	800a960 <__mcmp>
 800a9aa:	1e05      	subs	r5, r0, #0
 800a9ac:	d110      	bne.n	800a9d0 <__mdiff+0x38>
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f7ff fd53 	bl	800a45c <_Balloc>
 800a9b6:	b930      	cbnz	r0, 800a9c6 <__mdiff+0x2e>
 800a9b8:	4b3a      	ldr	r3, [pc, #232]	; (800aaa4 <__mdiff+0x10c>)
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	f240 2132 	movw	r1, #562	; 0x232
 800a9c0:	4839      	ldr	r0, [pc, #228]	; (800aaa8 <__mdiff+0x110>)
 800a9c2:	f7fe fd3d 	bl	8009440 <__assert_func>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d0:	bfa4      	itt	ge
 800a9d2:	4643      	movge	r3, r8
 800a9d4:	46a0      	movge	r8, r4
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9dc:	bfa6      	itte	ge
 800a9de:	461c      	movge	r4, r3
 800a9e0:	2500      	movge	r5, #0
 800a9e2:	2501      	movlt	r5, #1
 800a9e4:	f7ff fd3a 	bl	800a45c <_Balloc>
 800a9e8:	b920      	cbnz	r0, 800a9f4 <__mdiff+0x5c>
 800a9ea:	4b2e      	ldr	r3, [pc, #184]	; (800aaa4 <__mdiff+0x10c>)
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a9f2:	e7e5      	b.n	800a9c0 <__mdiff+0x28>
 800a9f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9f8:	6926      	ldr	r6, [r4, #16]
 800a9fa:	60c5      	str	r5, [r0, #12]
 800a9fc:	f104 0914 	add.w	r9, r4, #20
 800aa00:	f108 0514 	add.w	r5, r8, #20
 800aa04:	f100 0e14 	add.w	lr, r0, #20
 800aa08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa10:	f108 0210 	add.w	r2, r8, #16
 800aa14:	46f2      	mov	sl, lr
 800aa16:	2100      	movs	r1, #0
 800aa18:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa20:	fa1f f883 	uxth.w	r8, r3
 800aa24:	fa11 f18b 	uxtah	r1, r1, fp
 800aa28:	0c1b      	lsrs	r3, r3, #16
 800aa2a:	eba1 0808 	sub.w	r8, r1, r8
 800aa2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa36:	fa1f f888 	uxth.w	r8, r8
 800aa3a:	1419      	asrs	r1, r3, #16
 800aa3c:	454e      	cmp	r6, r9
 800aa3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa42:	f84a 3b04 	str.w	r3, [sl], #4
 800aa46:	d8e7      	bhi.n	800aa18 <__mdiff+0x80>
 800aa48:	1b33      	subs	r3, r6, r4
 800aa4a:	3b15      	subs	r3, #21
 800aa4c:	f023 0303 	bic.w	r3, r3, #3
 800aa50:	3304      	adds	r3, #4
 800aa52:	3415      	adds	r4, #21
 800aa54:	42a6      	cmp	r6, r4
 800aa56:	bf38      	it	cc
 800aa58:	2304      	movcc	r3, #4
 800aa5a:	441d      	add	r5, r3
 800aa5c:	4473      	add	r3, lr
 800aa5e:	469e      	mov	lr, r3
 800aa60:	462e      	mov	r6, r5
 800aa62:	4566      	cmp	r6, ip
 800aa64:	d30e      	bcc.n	800aa84 <__mdiff+0xec>
 800aa66:	f10c 0203 	add.w	r2, ip, #3
 800aa6a:	1b52      	subs	r2, r2, r5
 800aa6c:	f022 0203 	bic.w	r2, r2, #3
 800aa70:	3d03      	subs	r5, #3
 800aa72:	45ac      	cmp	ip, r5
 800aa74:	bf38      	it	cc
 800aa76:	2200      	movcc	r2, #0
 800aa78:	441a      	add	r2, r3
 800aa7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa7e:	b17b      	cbz	r3, 800aaa0 <__mdiff+0x108>
 800aa80:	6107      	str	r7, [r0, #16]
 800aa82:	e7a3      	b.n	800a9cc <__mdiff+0x34>
 800aa84:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa88:	fa11 f288 	uxtah	r2, r1, r8
 800aa8c:	1414      	asrs	r4, r2, #16
 800aa8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa92:	b292      	uxth	r2, r2
 800aa94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa98:	f84e 2b04 	str.w	r2, [lr], #4
 800aa9c:	1421      	asrs	r1, r4, #16
 800aa9e:	e7e0      	b.n	800aa62 <__mdiff+0xca>
 800aaa0:	3f01      	subs	r7, #1
 800aaa2:	e7ea      	b.n	800aa7a <__mdiff+0xe2>
 800aaa4:	0800becc 	.word	0x0800becc
 800aaa8:	0800bedd 	.word	0x0800bedd

0800aaac <__d2b>:
 800aaac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aab0:	4689      	mov	r9, r1
 800aab2:	2101      	movs	r1, #1
 800aab4:	ec57 6b10 	vmov	r6, r7, d0
 800aab8:	4690      	mov	r8, r2
 800aaba:	f7ff fccf 	bl	800a45c <_Balloc>
 800aabe:	4604      	mov	r4, r0
 800aac0:	b930      	cbnz	r0, 800aad0 <__d2b+0x24>
 800aac2:	4602      	mov	r2, r0
 800aac4:	4b25      	ldr	r3, [pc, #148]	; (800ab5c <__d2b+0xb0>)
 800aac6:	4826      	ldr	r0, [pc, #152]	; (800ab60 <__d2b+0xb4>)
 800aac8:	f240 310a 	movw	r1, #778	; 0x30a
 800aacc:	f7fe fcb8 	bl	8009440 <__assert_func>
 800aad0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aad4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aad8:	bb35      	cbnz	r5, 800ab28 <__d2b+0x7c>
 800aada:	2e00      	cmp	r6, #0
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	d028      	beq.n	800ab32 <__d2b+0x86>
 800aae0:	4668      	mov	r0, sp
 800aae2:	9600      	str	r6, [sp, #0]
 800aae4:	f7ff fd82 	bl	800a5ec <__lo0bits>
 800aae8:	9900      	ldr	r1, [sp, #0]
 800aaea:	b300      	cbz	r0, 800ab2e <__d2b+0x82>
 800aaec:	9a01      	ldr	r2, [sp, #4]
 800aaee:	f1c0 0320 	rsb	r3, r0, #32
 800aaf2:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf6:	430b      	orrs	r3, r1
 800aaf8:	40c2      	lsrs	r2, r0
 800aafa:	6163      	str	r3, [r4, #20]
 800aafc:	9201      	str	r2, [sp, #4]
 800aafe:	9b01      	ldr	r3, [sp, #4]
 800ab00:	61a3      	str	r3, [r4, #24]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bf14      	ite	ne
 800ab06:	2202      	movne	r2, #2
 800ab08:	2201      	moveq	r2, #1
 800ab0a:	6122      	str	r2, [r4, #16]
 800ab0c:	b1d5      	cbz	r5, 800ab44 <__d2b+0x98>
 800ab0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab12:	4405      	add	r5, r0
 800ab14:	f8c9 5000 	str.w	r5, [r9]
 800ab18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab1c:	f8c8 0000 	str.w	r0, [r8]
 800ab20:	4620      	mov	r0, r4
 800ab22:	b003      	add	sp, #12
 800ab24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab2c:	e7d5      	b.n	800aada <__d2b+0x2e>
 800ab2e:	6161      	str	r1, [r4, #20]
 800ab30:	e7e5      	b.n	800aafe <__d2b+0x52>
 800ab32:	a801      	add	r0, sp, #4
 800ab34:	f7ff fd5a 	bl	800a5ec <__lo0bits>
 800ab38:	9b01      	ldr	r3, [sp, #4]
 800ab3a:	6163      	str	r3, [r4, #20]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	6122      	str	r2, [r4, #16]
 800ab40:	3020      	adds	r0, #32
 800ab42:	e7e3      	b.n	800ab0c <__d2b+0x60>
 800ab44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab4c:	f8c9 0000 	str.w	r0, [r9]
 800ab50:	6918      	ldr	r0, [r3, #16]
 800ab52:	f7ff fd2b 	bl	800a5ac <__hi0bits>
 800ab56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab5a:	e7df      	b.n	800ab1c <__d2b+0x70>
 800ab5c:	0800becc 	.word	0x0800becc
 800ab60:	0800bedd 	.word	0x0800bedd

0800ab64 <_calloc_r>:
 800ab64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab66:	fba1 2402 	umull	r2, r4, r1, r2
 800ab6a:	b94c      	cbnz	r4, 800ab80 <_calloc_r+0x1c>
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	9201      	str	r2, [sp, #4]
 800ab70:	f7fd fce8 	bl	8008544 <_malloc_r>
 800ab74:	9a01      	ldr	r2, [sp, #4]
 800ab76:	4605      	mov	r5, r0
 800ab78:	b930      	cbnz	r0, 800ab88 <_calloc_r+0x24>
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	b003      	add	sp, #12
 800ab7e:	bd30      	pop	{r4, r5, pc}
 800ab80:	220c      	movs	r2, #12
 800ab82:	6002      	str	r2, [r0, #0]
 800ab84:	2500      	movs	r5, #0
 800ab86:	e7f8      	b.n	800ab7a <_calloc_r+0x16>
 800ab88:	4621      	mov	r1, r4
 800ab8a:	f7fd fcb2 	bl	80084f2 <memset>
 800ab8e:	e7f4      	b.n	800ab7a <_calloc_r+0x16>

0800ab90 <_free_r>:
 800ab90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab92:	2900      	cmp	r1, #0
 800ab94:	d044      	beq.n	800ac20 <_free_r+0x90>
 800ab96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab9a:	9001      	str	r0, [sp, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f1a1 0404 	sub.w	r4, r1, #4
 800aba2:	bfb8      	it	lt
 800aba4:	18e4      	addlt	r4, r4, r3
 800aba6:	f7ff fc4d 	bl	800a444 <__malloc_lock>
 800abaa:	4a1e      	ldr	r2, [pc, #120]	; (800ac24 <_free_r+0x94>)
 800abac:	9801      	ldr	r0, [sp, #4]
 800abae:	6813      	ldr	r3, [r2, #0]
 800abb0:	b933      	cbnz	r3, 800abc0 <_free_r+0x30>
 800abb2:	6063      	str	r3, [r4, #4]
 800abb4:	6014      	str	r4, [r2, #0]
 800abb6:	b003      	add	sp, #12
 800abb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abbc:	f7ff bc48 	b.w	800a450 <__malloc_unlock>
 800abc0:	42a3      	cmp	r3, r4
 800abc2:	d908      	bls.n	800abd6 <_free_r+0x46>
 800abc4:	6825      	ldr	r5, [r4, #0]
 800abc6:	1961      	adds	r1, r4, r5
 800abc8:	428b      	cmp	r3, r1
 800abca:	bf01      	itttt	eq
 800abcc:	6819      	ldreq	r1, [r3, #0]
 800abce:	685b      	ldreq	r3, [r3, #4]
 800abd0:	1949      	addeq	r1, r1, r5
 800abd2:	6021      	streq	r1, [r4, #0]
 800abd4:	e7ed      	b.n	800abb2 <_free_r+0x22>
 800abd6:	461a      	mov	r2, r3
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	b10b      	cbz	r3, 800abe0 <_free_r+0x50>
 800abdc:	42a3      	cmp	r3, r4
 800abde:	d9fa      	bls.n	800abd6 <_free_r+0x46>
 800abe0:	6811      	ldr	r1, [r2, #0]
 800abe2:	1855      	adds	r5, r2, r1
 800abe4:	42a5      	cmp	r5, r4
 800abe6:	d10b      	bne.n	800ac00 <_free_r+0x70>
 800abe8:	6824      	ldr	r4, [r4, #0]
 800abea:	4421      	add	r1, r4
 800abec:	1854      	adds	r4, r2, r1
 800abee:	42a3      	cmp	r3, r4
 800abf0:	6011      	str	r1, [r2, #0]
 800abf2:	d1e0      	bne.n	800abb6 <_free_r+0x26>
 800abf4:	681c      	ldr	r4, [r3, #0]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	6053      	str	r3, [r2, #4]
 800abfa:	4421      	add	r1, r4
 800abfc:	6011      	str	r1, [r2, #0]
 800abfe:	e7da      	b.n	800abb6 <_free_r+0x26>
 800ac00:	d902      	bls.n	800ac08 <_free_r+0x78>
 800ac02:	230c      	movs	r3, #12
 800ac04:	6003      	str	r3, [r0, #0]
 800ac06:	e7d6      	b.n	800abb6 <_free_r+0x26>
 800ac08:	6825      	ldr	r5, [r4, #0]
 800ac0a:	1961      	adds	r1, r4, r5
 800ac0c:	428b      	cmp	r3, r1
 800ac0e:	bf04      	itt	eq
 800ac10:	6819      	ldreq	r1, [r3, #0]
 800ac12:	685b      	ldreq	r3, [r3, #4]
 800ac14:	6063      	str	r3, [r4, #4]
 800ac16:	bf04      	itt	eq
 800ac18:	1949      	addeq	r1, r1, r5
 800ac1a:	6021      	streq	r1, [r4, #0]
 800ac1c:	6054      	str	r4, [r2, #4]
 800ac1e:	e7ca      	b.n	800abb6 <_free_r+0x26>
 800ac20:	b003      	add	sp, #12
 800ac22:	bd30      	pop	{r4, r5, pc}
 800ac24:	20000c78 	.word	0x20000c78

0800ac28 <__ssputs_r>:
 800ac28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac2c:	688e      	ldr	r6, [r1, #8]
 800ac2e:	429e      	cmp	r6, r3
 800ac30:	4682      	mov	sl, r0
 800ac32:	460c      	mov	r4, r1
 800ac34:	4690      	mov	r8, r2
 800ac36:	461f      	mov	r7, r3
 800ac38:	d838      	bhi.n	800acac <__ssputs_r+0x84>
 800ac3a:	898a      	ldrh	r2, [r1, #12]
 800ac3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac40:	d032      	beq.n	800aca8 <__ssputs_r+0x80>
 800ac42:	6825      	ldr	r5, [r4, #0]
 800ac44:	6909      	ldr	r1, [r1, #16]
 800ac46:	eba5 0901 	sub.w	r9, r5, r1
 800ac4a:	6965      	ldr	r5, [r4, #20]
 800ac4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac54:	3301      	adds	r3, #1
 800ac56:	444b      	add	r3, r9
 800ac58:	106d      	asrs	r5, r5, #1
 800ac5a:	429d      	cmp	r5, r3
 800ac5c:	bf38      	it	cc
 800ac5e:	461d      	movcc	r5, r3
 800ac60:	0553      	lsls	r3, r2, #21
 800ac62:	d531      	bpl.n	800acc8 <__ssputs_r+0xa0>
 800ac64:	4629      	mov	r1, r5
 800ac66:	f7fd fc6d 	bl	8008544 <_malloc_r>
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	b950      	cbnz	r0, 800ac84 <__ssputs_r+0x5c>
 800ac6e:	230c      	movs	r3, #12
 800ac70:	f8ca 3000 	str.w	r3, [sl]
 800ac74:	89a3      	ldrh	r3, [r4, #12]
 800ac76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac7a:	81a3      	strh	r3, [r4, #12]
 800ac7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac84:	6921      	ldr	r1, [r4, #16]
 800ac86:	464a      	mov	r2, r9
 800ac88:	f7fd fc25 	bl	80084d6 <memcpy>
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac96:	81a3      	strh	r3, [r4, #12]
 800ac98:	6126      	str	r6, [r4, #16]
 800ac9a:	6165      	str	r5, [r4, #20]
 800ac9c:	444e      	add	r6, r9
 800ac9e:	eba5 0509 	sub.w	r5, r5, r9
 800aca2:	6026      	str	r6, [r4, #0]
 800aca4:	60a5      	str	r5, [r4, #8]
 800aca6:	463e      	mov	r6, r7
 800aca8:	42be      	cmp	r6, r7
 800acaa:	d900      	bls.n	800acae <__ssputs_r+0x86>
 800acac:	463e      	mov	r6, r7
 800acae:	6820      	ldr	r0, [r4, #0]
 800acb0:	4632      	mov	r2, r6
 800acb2:	4641      	mov	r1, r8
 800acb4:	f000 fabc 	bl	800b230 <memmove>
 800acb8:	68a3      	ldr	r3, [r4, #8]
 800acba:	1b9b      	subs	r3, r3, r6
 800acbc:	60a3      	str	r3, [r4, #8]
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	4433      	add	r3, r6
 800acc2:	6023      	str	r3, [r4, #0]
 800acc4:	2000      	movs	r0, #0
 800acc6:	e7db      	b.n	800ac80 <__ssputs_r+0x58>
 800acc8:	462a      	mov	r2, r5
 800acca:	f000 facb 	bl	800b264 <_realloc_r>
 800acce:	4606      	mov	r6, r0
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d1e1      	bne.n	800ac98 <__ssputs_r+0x70>
 800acd4:	6921      	ldr	r1, [r4, #16]
 800acd6:	4650      	mov	r0, sl
 800acd8:	f7ff ff5a 	bl	800ab90 <_free_r>
 800acdc:	e7c7      	b.n	800ac6e <__ssputs_r+0x46>
	...

0800ace0 <_svfiprintf_r>:
 800ace0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace4:	4698      	mov	r8, r3
 800ace6:	898b      	ldrh	r3, [r1, #12]
 800ace8:	061b      	lsls	r3, r3, #24
 800acea:	b09d      	sub	sp, #116	; 0x74
 800acec:	4607      	mov	r7, r0
 800acee:	460d      	mov	r5, r1
 800acf0:	4614      	mov	r4, r2
 800acf2:	d50e      	bpl.n	800ad12 <_svfiprintf_r+0x32>
 800acf4:	690b      	ldr	r3, [r1, #16]
 800acf6:	b963      	cbnz	r3, 800ad12 <_svfiprintf_r+0x32>
 800acf8:	2140      	movs	r1, #64	; 0x40
 800acfa:	f7fd fc23 	bl	8008544 <_malloc_r>
 800acfe:	6028      	str	r0, [r5, #0]
 800ad00:	6128      	str	r0, [r5, #16]
 800ad02:	b920      	cbnz	r0, 800ad0e <_svfiprintf_r+0x2e>
 800ad04:	230c      	movs	r3, #12
 800ad06:	603b      	str	r3, [r7, #0]
 800ad08:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0c:	e0d1      	b.n	800aeb2 <_svfiprintf_r+0x1d2>
 800ad0e:	2340      	movs	r3, #64	; 0x40
 800ad10:	616b      	str	r3, [r5, #20]
 800ad12:	2300      	movs	r3, #0
 800ad14:	9309      	str	r3, [sp, #36]	; 0x24
 800ad16:	2320      	movs	r3, #32
 800ad18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad20:	2330      	movs	r3, #48	; 0x30
 800ad22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aecc <_svfiprintf_r+0x1ec>
 800ad26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad2a:	f04f 0901 	mov.w	r9, #1
 800ad2e:	4623      	mov	r3, r4
 800ad30:	469a      	mov	sl, r3
 800ad32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad36:	b10a      	cbz	r2, 800ad3c <_svfiprintf_r+0x5c>
 800ad38:	2a25      	cmp	r2, #37	; 0x25
 800ad3a:	d1f9      	bne.n	800ad30 <_svfiprintf_r+0x50>
 800ad3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ad40:	d00b      	beq.n	800ad5a <_svfiprintf_r+0x7a>
 800ad42:	465b      	mov	r3, fp
 800ad44:	4622      	mov	r2, r4
 800ad46:	4629      	mov	r1, r5
 800ad48:	4638      	mov	r0, r7
 800ad4a:	f7ff ff6d 	bl	800ac28 <__ssputs_r>
 800ad4e:	3001      	adds	r0, #1
 800ad50:	f000 80aa 	beq.w	800aea8 <_svfiprintf_r+0x1c8>
 800ad54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad56:	445a      	add	r2, fp
 800ad58:	9209      	str	r2, [sp, #36]	; 0x24
 800ad5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 80a2 	beq.w	800aea8 <_svfiprintf_r+0x1c8>
 800ad64:	2300      	movs	r3, #0
 800ad66:	f04f 32ff 	mov.w	r2, #4294967295
 800ad6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad6e:	f10a 0a01 	add.w	sl, sl, #1
 800ad72:	9304      	str	r3, [sp, #16]
 800ad74:	9307      	str	r3, [sp, #28]
 800ad76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad7a:	931a      	str	r3, [sp, #104]	; 0x68
 800ad7c:	4654      	mov	r4, sl
 800ad7e:	2205      	movs	r2, #5
 800ad80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad84:	4851      	ldr	r0, [pc, #324]	; (800aecc <_svfiprintf_r+0x1ec>)
 800ad86:	f7f5 fa2b 	bl	80001e0 <memchr>
 800ad8a:	9a04      	ldr	r2, [sp, #16]
 800ad8c:	b9d8      	cbnz	r0, 800adc6 <_svfiprintf_r+0xe6>
 800ad8e:	06d0      	lsls	r0, r2, #27
 800ad90:	bf44      	itt	mi
 800ad92:	2320      	movmi	r3, #32
 800ad94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad98:	0711      	lsls	r1, r2, #28
 800ad9a:	bf44      	itt	mi
 800ad9c:	232b      	movmi	r3, #43	; 0x2b
 800ad9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ada2:	f89a 3000 	ldrb.w	r3, [sl]
 800ada6:	2b2a      	cmp	r3, #42	; 0x2a
 800ada8:	d015      	beq.n	800add6 <_svfiprintf_r+0xf6>
 800adaa:	9a07      	ldr	r2, [sp, #28]
 800adac:	4654      	mov	r4, sl
 800adae:	2000      	movs	r0, #0
 800adb0:	f04f 0c0a 	mov.w	ip, #10
 800adb4:	4621      	mov	r1, r4
 800adb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adba:	3b30      	subs	r3, #48	; 0x30
 800adbc:	2b09      	cmp	r3, #9
 800adbe:	d94e      	bls.n	800ae5e <_svfiprintf_r+0x17e>
 800adc0:	b1b0      	cbz	r0, 800adf0 <_svfiprintf_r+0x110>
 800adc2:	9207      	str	r2, [sp, #28]
 800adc4:	e014      	b.n	800adf0 <_svfiprintf_r+0x110>
 800adc6:	eba0 0308 	sub.w	r3, r0, r8
 800adca:	fa09 f303 	lsl.w	r3, r9, r3
 800adce:	4313      	orrs	r3, r2
 800add0:	9304      	str	r3, [sp, #16]
 800add2:	46a2      	mov	sl, r4
 800add4:	e7d2      	b.n	800ad7c <_svfiprintf_r+0x9c>
 800add6:	9b03      	ldr	r3, [sp, #12]
 800add8:	1d19      	adds	r1, r3, #4
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	9103      	str	r1, [sp, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	bfbb      	ittet	lt
 800ade2:	425b      	neglt	r3, r3
 800ade4:	f042 0202 	orrlt.w	r2, r2, #2
 800ade8:	9307      	strge	r3, [sp, #28]
 800adea:	9307      	strlt	r3, [sp, #28]
 800adec:	bfb8      	it	lt
 800adee:	9204      	strlt	r2, [sp, #16]
 800adf0:	7823      	ldrb	r3, [r4, #0]
 800adf2:	2b2e      	cmp	r3, #46	; 0x2e
 800adf4:	d10c      	bne.n	800ae10 <_svfiprintf_r+0x130>
 800adf6:	7863      	ldrb	r3, [r4, #1]
 800adf8:	2b2a      	cmp	r3, #42	; 0x2a
 800adfa:	d135      	bne.n	800ae68 <_svfiprintf_r+0x188>
 800adfc:	9b03      	ldr	r3, [sp, #12]
 800adfe:	1d1a      	adds	r2, r3, #4
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	9203      	str	r2, [sp, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	bfb8      	it	lt
 800ae08:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae0c:	3402      	adds	r4, #2
 800ae0e:	9305      	str	r3, [sp, #20]
 800ae10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aedc <_svfiprintf_r+0x1fc>
 800ae14:	7821      	ldrb	r1, [r4, #0]
 800ae16:	2203      	movs	r2, #3
 800ae18:	4650      	mov	r0, sl
 800ae1a:	f7f5 f9e1 	bl	80001e0 <memchr>
 800ae1e:	b140      	cbz	r0, 800ae32 <_svfiprintf_r+0x152>
 800ae20:	2340      	movs	r3, #64	; 0x40
 800ae22:	eba0 000a 	sub.w	r0, r0, sl
 800ae26:	fa03 f000 	lsl.w	r0, r3, r0
 800ae2a:	9b04      	ldr	r3, [sp, #16]
 800ae2c:	4303      	orrs	r3, r0
 800ae2e:	3401      	adds	r4, #1
 800ae30:	9304      	str	r3, [sp, #16]
 800ae32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae36:	4826      	ldr	r0, [pc, #152]	; (800aed0 <_svfiprintf_r+0x1f0>)
 800ae38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae3c:	2206      	movs	r2, #6
 800ae3e:	f7f5 f9cf 	bl	80001e0 <memchr>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d038      	beq.n	800aeb8 <_svfiprintf_r+0x1d8>
 800ae46:	4b23      	ldr	r3, [pc, #140]	; (800aed4 <_svfiprintf_r+0x1f4>)
 800ae48:	bb1b      	cbnz	r3, 800ae92 <_svfiprintf_r+0x1b2>
 800ae4a:	9b03      	ldr	r3, [sp, #12]
 800ae4c:	3307      	adds	r3, #7
 800ae4e:	f023 0307 	bic.w	r3, r3, #7
 800ae52:	3308      	adds	r3, #8
 800ae54:	9303      	str	r3, [sp, #12]
 800ae56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae58:	4433      	add	r3, r6
 800ae5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae5c:	e767      	b.n	800ad2e <_svfiprintf_r+0x4e>
 800ae5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae62:	460c      	mov	r4, r1
 800ae64:	2001      	movs	r0, #1
 800ae66:	e7a5      	b.n	800adb4 <_svfiprintf_r+0xd4>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	3401      	adds	r4, #1
 800ae6c:	9305      	str	r3, [sp, #20]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	f04f 0c0a 	mov.w	ip, #10
 800ae74:	4620      	mov	r0, r4
 800ae76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae7a:	3a30      	subs	r2, #48	; 0x30
 800ae7c:	2a09      	cmp	r2, #9
 800ae7e:	d903      	bls.n	800ae88 <_svfiprintf_r+0x1a8>
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d0c5      	beq.n	800ae10 <_svfiprintf_r+0x130>
 800ae84:	9105      	str	r1, [sp, #20]
 800ae86:	e7c3      	b.n	800ae10 <_svfiprintf_r+0x130>
 800ae88:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e7f0      	b.n	800ae74 <_svfiprintf_r+0x194>
 800ae92:	ab03      	add	r3, sp, #12
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	462a      	mov	r2, r5
 800ae98:	4b0f      	ldr	r3, [pc, #60]	; (800aed8 <_svfiprintf_r+0x1f8>)
 800ae9a:	a904      	add	r1, sp, #16
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	f7fd fc65 	bl	800876c <_printf_float>
 800aea2:	1c42      	adds	r2, r0, #1
 800aea4:	4606      	mov	r6, r0
 800aea6:	d1d6      	bne.n	800ae56 <_svfiprintf_r+0x176>
 800aea8:	89ab      	ldrh	r3, [r5, #12]
 800aeaa:	065b      	lsls	r3, r3, #25
 800aeac:	f53f af2c 	bmi.w	800ad08 <_svfiprintf_r+0x28>
 800aeb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeb2:	b01d      	add	sp, #116	; 0x74
 800aeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb8:	ab03      	add	r3, sp, #12
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	462a      	mov	r2, r5
 800aebe:	4b06      	ldr	r3, [pc, #24]	; (800aed8 <_svfiprintf_r+0x1f8>)
 800aec0:	a904      	add	r1, sp, #16
 800aec2:	4638      	mov	r0, r7
 800aec4:	f7fd fef6 	bl	8008cb4 <_printf_i>
 800aec8:	e7eb      	b.n	800aea2 <_svfiprintf_r+0x1c2>
 800aeca:	bf00      	nop
 800aecc:	0800c03c 	.word	0x0800c03c
 800aed0:	0800c046 	.word	0x0800c046
 800aed4:	0800876d 	.word	0x0800876d
 800aed8:	0800ac29 	.word	0x0800ac29
 800aedc:	0800c042 	.word	0x0800c042

0800aee0 <__sfputc_r>:
 800aee0:	6893      	ldr	r3, [r2, #8]
 800aee2:	3b01      	subs	r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	b410      	push	{r4}
 800aee8:	6093      	str	r3, [r2, #8]
 800aeea:	da08      	bge.n	800aefe <__sfputc_r+0x1e>
 800aeec:	6994      	ldr	r4, [r2, #24]
 800aeee:	42a3      	cmp	r3, r4
 800aef0:	db01      	blt.n	800aef6 <__sfputc_r+0x16>
 800aef2:	290a      	cmp	r1, #10
 800aef4:	d103      	bne.n	800aefe <__sfputc_r+0x1e>
 800aef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aefa:	f7fe b9cf 	b.w	800929c <__swbuf_r>
 800aefe:	6813      	ldr	r3, [r2, #0]
 800af00:	1c58      	adds	r0, r3, #1
 800af02:	6010      	str	r0, [r2, #0]
 800af04:	7019      	strb	r1, [r3, #0]
 800af06:	4608      	mov	r0, r1
 800af08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af0c:	4770      	bx	lr

0800af0e <__sfputs_r>:
 800af0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af10:	4606      	mov	r6, r0
 800af12:	460f      	mov	r7, r1
 800af14:	4614      	mov	r4, r2
 800af16:	18d5      	adds	r5, r2, r3
 800af18:	42ac      	cmp	r4, r5
 800af1a:	d101      	bne.n	800af20 <__sfputs_r+0x12>
 800af1c:	2000      	movs	r0, #0
 800af1e:	e007      	b.n	800af30 <__sfputs_r+0x22>
 800af20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af24:	463a      	mov	r2, r7
 800af26:	4630      	mov	r0, r6
 800af28:	f7ff ffda 	bl	800aee0 <__sfputc_r>
 800af2c:	1c43      	adds	r3, r0, #1
 800af2e:	d1f3      	bne.n	800af18 <__sfputs_r+0xa>
 800af30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af34 <_vfiprintf_r>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	460d      	mov	r5, r1
 800af3a:	b09d      	sub	sp, #116	; 0x74
 800af3c:	4614      	mov	r4, r2
 800af3e:	4698      	mov	r8, r3
 800af40:	4606      	mov	r6, r0
 800af42:	b118      	cbz	r0, 800af4c <_vfiprintf_r+0x18>
 800af44:	6983      	ldr	r3, [r0, #24]
 800af46:	b90b      	cbnz	r3, 800af4c <_vfiprintf_r+0x18>
 800af48:	f7fd fa00 	bl	800834c <__sinit>
 800af4c:	4b89      	ldr	r3, [pc, #548]	; (800b174 <_vfiprintf_r+0x240>)
 800af4e:	429d      	cmp	r5, r3
 800af50:	d11b      	bne.n	800af8a <_vfiprintf_r+0x56>
 800af52:	6875      	ldr	r5, [r6, #4]
 800af54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af56:	07d9      	lsls	r1, r3, #31
 800af58:	d405      	bmi.n	800af66 <_vfiprintf_r+0x32>
 800af5a:	89ab      	ldrh	r3, [r5, #12]
 800af5c:	059a      	lsls	r2, r3, #22
 800af5e:	d402      	bmi.n	800af66 <_vfiprintf_r+0x32>
 800af60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af62:	f7fd fab6 	bl	80084d2 <__retarget_lock_acquire_recursive>
 800af66:	89ab      	ldrh	r3, [r5, #12]
 800af68:	071b      	lsls	r3, r3, #28
 800af6a:	d501      	bpl.n	800af70 <_vfiprintf_r+0x3c>
 800af6c:	692b      	ldr	r3, [r5, #16]
 800af6e:	b9eb      	cbnz	r3, 800afac <_vfiprintf_r+0x78>
 800af70:	4629      	mov	r1, r5
 800af72:	4630      	mov	r0, r6
 800af74:	f7fe f9f6 	bl	8009364 <__swsetup_r>
 800af78:	b1c0      	cbz	r0, 800afac <_vfiprintf_r+0x78>
 800af7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af7c:	07dc      	lsls	r4, r3, #31
 800af7e:	d50e      	bpl.n	800af9e <_vfiprintf_r+0x6a>
 800af80:	f04f 30ff 	mov.w	r0, #4294967295
 800af84:	b01d      	add	sp, #116	; 0x74
 800af86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af8a:	4b7b      	ldr	r3, [pc, #492]	; (800b178 <_vfiprintf_r+0x244>)
 800af8c:	429d      	cmp	r5, r3
 800af8e:	d101      	bne.n	800af94 <_vfiprintf_r+0x60>
 800af90:	68b5      	ldr	r5, [r6, #8]
 800af92:	e7df      	b.n	800af54 <_vfiprintf_r+0x20>
 800af94:	4b79      	ldr	r3, [pc, #484]	; (800b17c <_vfiprintf_r+0x248>)
 800af96:	429d      	cmp	r5, r3
 800af98:	bf08      	it	eq
 800af9a:	68f5      	ldreq	r5, [r6, #12]
 800af9c:	e7da      	b.n	800af54 <_vfiprintf_r+0x20>
 800af9e:	89ab      	ldrh	r3, [r5, #12]
 800afa0:	0598      	lsls	r0, r3, #22
 800afa2:	d4ed      	bmi.n	800af80 <_vfiprintf_r+0x4c>
 800afa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afa6:	f7fd fa95 	bl	80084d4 <__retarget_lock_release_recursive>
 800afaa:	e7e9      	b.n	800af80 <_vfiprintf_r+0x4c>
 800afac:	2300      	movs	r3, #0
 800afae:	9309      	str	r3, [sp, #36]	; 0x24
 800afb0:	2320      	movs	r3, #32
 800afb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800afba:	2330      	movs	r3, #48	; 0x30
 800afbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b180 <_vfiprintf_r+0x24c>
 800afc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afc4:	f04f 0901 	mov.w	r9, #1
 800afc8:	4623      	mov	r3, r4
 800afca:	469a      	mov	sl, r3
 800afcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afd0:	b10a      	cbz	r2, 800afd6 <_vfiprintf_r+0xa2>
 800afd2:	2a25      	cmp	r2, #37	; 0x25
 800afd4:	d1f9      	bne.n	800afca <_vfiprintf_r+0x96>
 800afd6:	ebba 0b04 	subs.w	fp, sl, r4
 800afda:	d00b      	beq.n	800aff4 <_vfiprintf_r+0xc0>
 800afdc:	465b      	mov	r3, fp
 800afde:	4622      	mov	r2, r4
 800afe0:	4629      	mov	r1, r5
 800afe2:	4630      	mov	r0, r6
 800afe4:	f7ff ff93 	bl	800af0e <__sfputs_r>
 800afe8:	3001      	adds	r0, #1
 800afea:	f000 80aa 	beq.w	800b142 <_vfiprintf_r+0x20e>
 800afee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aff0:	445a      	add	r2, fp
 800aff2:	9209      	str	r2, [sp, #36]	; 0x24
 800aff4:	f89a 3000 	ldrb.w	r3, [sl]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 80a2 	beq.w	800b142 <_vfiprintf_r+0x20e>
 800affe:	2300      	movs	r3, #0
 800b000:	f04f 32ff 	mov.w	r2, #4294967295
 800b004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b008:	f10a 0a01 	add.w	sl, sl, #1
 800b00c:	9304      	str	r3, [sp, #16]
 800b00e:	9307      	str	r3, [sp, #28]
 800b010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b014:	931a      	str	r3, [sp, #104]	; 0x68
 800b016:	4654      	mov	r4, sl
 800b018:	2205      	movs	r2, #5
 800b01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b01e:	4858      	ldr	r0, [pc, #352]	; (800b180 <_vfiprintf_r+0x24c>)
 800b020:	f7f5 f8de 	bl	80001e0 <memchr>
 800b024:	9a04      	ldr	r2, [sp, #16]
 800b026:	b9d8      	cbnz	r0, 800b060 <_vfiprintf_r+0x12c>
 800b028:	06d1      	lsls	r1, r2, #27
 800b02a:	bf44      	itt	mi
 800b02c:	2320      	movmi	r3, #32
 800b02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b032:	0713      	lsls	r3, r2, #28
 800b034:	bf44      	itt	mi
 800b036:	232b      	movmi	r3, #43	; 0x2b
 800b038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b03c:	f89a 3000 	ldrb.w	r3, [sl]
 800b040:	2b2a      	cmp	r3, #42	; 0x2a
 800b042:	d015      	beq.n	800b070 <_vfiprintf_r+0x13c>
 800b044:	9a07      	ldr	r2, [sp, #28]
 800b046:	4654      	mov	r4, sl
 800b048:	2000      	movs	r0, #0
 800b04a:	f04f 0c0a 	mov.w	ip, #10
 800b04e:	4621      	mov	r1, r4
 800b050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b054:	3b30      	subs	r3, #48	; 0x30
 800b056:	2b09      	cmp	r3, #9
 800b058:	d94e      	bls.n	800b0f8 <_vfiprintf_r+0x1c4>
 800b05a:	b1b0      	cbz	r0, 800b08a <_vfiprintf_r+0x156>
 800b05c:	9207      	str	r2, [sp, #28]
 800b05e:	e014      	b.n	800b08a <_vfiprintf_r+0x156>
 800b060:	eba0 0308 	sub.w	r3, r0, r8
 800b064:	fa09 f303 	lsl.w	r3, r9, r3
 800b068:	4313      	orrs	r3, r2
 800b06a:	9304      	str	r3, [sp, #16]
 800b06c:	46a2      	mov	sl, r4
 800b06e:	e7d2      	b.n	800b016 <_vfiprintf_r+0xe2>
 800b070:	9b03      	ldr	r3, [sp, #12]
 800b072:	1d19      	adds	r1, r3, #4
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	9103      	str	r1, [sp, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	bfbb      	ittet	lt
 800b07c:	425b      	neglt	r3, r3
 800b07e:	f042 0202 	orrlt.w	r2, r2, #2
 800b082:	9307      	strge	r3, [sp, #28]
 800b084:	9307      	strlt	r3, [sp, #28]
 800b086:	bfb8      	it	lt
 800b088:	9204      	strlt	r2, [sp, #16]
 800b08a:	7823      	ldrb	r3, [r4, #0]
 800b08c:	2b2e      	cmp	r3, #46	; 0x2e
 800b08e:	d10c      	bne.n	800b0aa <_vfiprintf_r+0x176>
 800b090:	7863      	ldrb	r3, [r4, #1]
 800b092:	2b2a      	cmp	r3, #42	; 0x2a
 800b094:	d135      	bne.n	800b102 <_vfiprintf_r+0x1ce>
 800b096:	9b03      	ldr	r3, [sp, #12]
 800b098:	1d1a      	adds	r2, r3, #4
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	9203      	str	r2, [sp, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	bfb8      	it	lt
 800b0a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0a6:	3402      	adds	r4, #2
 800b0a8:	9305      	str	r3, [sp, #20]
 800b0aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b190 <_vfiprintf_r+0x25c>
 800b0ae:	7821      	ldrb	r1, [r4, #0]
 800b0b0:	2203      	movs	r2, #3
 800b0b2:	4650      	mov	r0, sl
 800b0b4:	f7f5 f894 	bl	80001e0 <memchr>
 800b0b8:	b140      	cbz	r0, 800b0cc <_vfiprintf_r+0x198>
 800b0ba:	2340      	movs	r3, #64	; 0x40
 800b0bc:	eba0 000a 	sub.w	r0, r0, sl
 800b0c0:	fa03 f000 	lsl.w	r0, r3, r0
 800b0c4:	9b04      	ldr	r3, [sp, #16]
 800b0c6:	4303      	orrs	r3, r0
 800b0c8:	3401      	adds	r4, #1
 800b0ca:	9304      	str	r3, [sp, #16]
 800b0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0d0:	482c      	ldr	r0, [pc, #176]	; (800b184 <_vfiprintf_r+0x250>)
 800b0d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0d6:	2206      	movs	r2, #6
 800b0d8:	f7f5 f882 	bl	80001e0 <memchr>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d03f      	beq.n	800b160 <_vfiprintf_r+0x22c>
 800b0e0:	4b29      	ldr	r3, [pc, #164]	; (800b188 <_vfiprintf_r+0x254>)
 800b0e2:	bb1b      	cbnz	r3, 800b12c <_vfiprintf_r+0x1f8>
 800b0e4:	9b03      	ldr	r3, [sp, #12]
 800b0e6:	3307      	adds	r3, #7
 800b0e8:	f023 0307 	bic.w	r3, r3, #7
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	9303      	str	r3, [sp, #12]
 800b0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f2:	443b      	add	r3, r7
 800b0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b0f6:	e767      	b.n	800afc8 <_vfiprintf_r+0x94>
 800b0f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0fc:	460c      	mov	r4, r1
 800b0fe:	2001      	movs	r0, #1
 800b100:	e7a5      	b.n	800b04e <_vfiprintf_r+0x11a>
 800b102:	2300      	movs	r3, #0
 800b104:	3401      	adds	r4, #1
 800b106:	9305      	str	r3, [sp, #20]
 800b108:	4619      	mov	r1, r3
 800b10a:	f04f 0c0a 	mov.w	ip, #10
 800b10e:	4620      	mov	r0, r4
 800b110:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b114:	3a30      	subs	r2, #48	; 0x30
 800b116:	2a09      	cmp	r2, #9
 800b118:	d903      	bls.n	800b122 <_vfiprintf_r+0x1ee>
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d0c5      	beq.n	800b0aa <_vfiprintf_r+0x176>
 800b11e:	9105      	str	r1, [sp, #20]
 800b120:	e7c3      	b.n	800b0aa <_vfiprintf_r+0x176>
 800b122:	fb0c 2101 	mla	r1, ip, r1, r2
 800b126:	4604      	mov	r4, r0
 800b128:	2301      	movs	r3, #1
 800b12a:	e7f0      	b.n	800b10e <_vfiprintf_r+0x1da>
 800b12c:	ab03      	add	r3, sp, #12
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	462a      	mov	r2, r5
 800b132:	4b16      	ldr	r3, [pc, #88]	; (800b18c <_vfiprintf_r+0x258>)
 800b134:	a904      	add	r1, sp, #16
 800b136:	4630      	mov	r0, r6
 800b138:	f7fd fb18 	bl	800876c <_printf_float>
 800b13c:	4607      	mov	r7, r0
 800b13e:	1c78      	adds	r0, r7, #1
 800b140:	d1d6      	bne.n	800b0f0 <_vfiprintf_r+0x1bc>
 800b142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b144:	07d9      	lsls	r1, r3, #31
 800b146:	d405      	bmi.n	800b154 <_vfiprintf_r+0x220>
 800b148:	89ab      	ldrh	r3, [r5, #12]
 800b14a:	059a      	lsls	r2, r3, #22
 800b14c:	d402      	bmi.n	800b154 <_vfiprintf_r+0x220>
 800b14e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b150:	f7fd f9c0 	bl	80084d4 <__retarget_lock_release_recursive>
 800b154:	89ab      	ldrh	r3, [r5, #12]
 800b156:	065b      	lsls	r3, r3, #25
 800b158:	f53f af12 	bmi.w	800af80 <_vfiprintf_r+0x4c>
 800b15c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b15e:	e711      	b.n	800af84 <_vfiprintf_r+0x50>
 800b160:	ab03      	add	r3, sp, #12
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	462a      	mov	r2, r5
 800b166:	4b09      	ldr	r3, [pc, #36]	; (800b18c <_vfiprintf_r+0x258>)
 800b168:	a904      	add	r1, sp, #16
 800b16a:	4630      	mov	r0, r6
 800b16c:	f7fd fda2 	bl	8008cb4 <_printf_i>
 800b170:	e7e4      	b.n	800b13c <_vfiprintf_r+0x208>
 800b172:	bf00      	nop
 800b174:	0800bd3c 	.word	0x0800bd3c
 800b178:	0800bd5c 	.word	0x0800bd5c
 800b17c:	0800bd1c 	.word	0x0800bd1c
 800b180:	0800c03c 	.word	0x0800c03c
 800b184:	0800c046 	.word	0x0800c046
 800b188:	0800876d 	.word	0x0800876d
 800b18c:	0800af0f 	.word	0x0800af0f
 800b190:	0800c042 	.word	0x0800c042

0800b194 <_read_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4d07      	ldr	r5, [pc, #28]	; (800b1b4 <_read_r+0x20>)
 800b198:	4604      	mov	r4, r0
 800b19a:	4608      	mov	r0, r1
 800b19c:	4611      	mov	r1, r2
 800b19e:	2200      	movs	r2, #0
 800b1a0:	602a      	str	r2, [r5, #0]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	f7fc fe0d 	bl	8007dc2 <_read>
 800b1a8:	1c43      	adds	r3, r0, #1
 800b1aa:	d102      	bne.n	800b1b2 <_read_r+0x1e>
 800b1ac:	682b      	ldr	r3, [r5, #0]
 800b1ae:	b103      	cbz	r3, 800b1b2 <_read_r+0x1e>
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	bd38      	pop	{r3, r4, r5, pc}
 800b1b4:	20000c80 	.word	0x20000c80

0800b1b8 <abort>:
 800b1b8:	b508      	push	{r3, lr}
 800b1ba:	2006      	movs	r0, #6
 800b1bc:	f000 f8aa 	bl	800b314 <raise>
 800b1c0:	2001      	movs	r0, #1
 800b1c2:	f000 f9bf 	bl	800b544 <_exit>
	...

0800b1c8 <_fstat_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d07      	ldr	r5, [pc, #28]	; (800b1e8 <_fstat_r+0x20>)
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	4608      	mov	r0, r1
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	602b      	str	r3, [r5, #0]
 800b1d6:	f7fc fed8 	bl	8007f8a <_fstat>
 800b1da:	1c43      	adds	r3, r0, #1
 800b1dc:	d102      	bne.n	800b1e4 <_fstat_r+0x1c>
 800b1de:	682b      	ldr	r3, [r5, #0]
 800b1e0:	b103      	cbz	r3, 800b1e4 <_fstat_r+0x1c>
 800b1e2:	6023      	str	r3, [r4, #0]
 800b1e4:	bd38      	pop	{r3, r4, r5, pc}
 800b1e6:	bf00      	nop
 800b1e8:	20000c80 	.word	0x20000c80

0800b1ec <_isatty_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4d06      	ldr	r5, [pc, #24]	; (800b208 <_isatty_r+0x1c>)
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	602b      	str	r3, [r5, #0]
 800b1f8:	f7fd f82e 	bl	8008258 <_isatty>
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	d102      	bne.n	800b206 <_isatty_r+0x1a>
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	b103      	cbz	r3, 800b206 <_isatty_r+0x1a>
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	bd38      	pop	{r3, r4, r5, pc}
 800b208:	20000c80 	.word	0x20000c80

0800b20c <__ascii_mbtowc>:
 800b20c:	b082      	sub	sp, #8
 800b20e:	b901      	cbnz	r1, 800b212 <__ascii_mbtowc+0x6>
 800b210:	a901      	add	r1, sp, #4
 800b212:	b142      	cbz	r2, 800b226 <__ascii_mbtowc+0x1a>
 800b214:	b14b      	cbz	r3, 800b22a <__ascii_mbtowc+0x1e>
 800b216:	7813      	ldrb	r3, [r2, #0]
 800b218:	600b      	str	r3, [r1, #0]
 800b21a:	7812      	ldrb	r2, [r2, #0]
 800b21c:	1e10      	subs	r0, r2, #0
 800b21e:	bf18      	it	ne
 800b220:	2001      	movne	r0, #1
 800b222:	b002      	add	sp, #8
 800b224:	4770      	bx	lr
 800b226:	4610      	mov	r0, r2
 800b228:	e7fb      	b.n	800b222 <__ascii_mbtowc+0x16>
 800b22a:	f06f 0001 	mvn.w	r0, #1
 800b22e:	e7f8      	b.n	800b222 <__ascii_mbtowc+0x16>

0800b230 <memmove>:
 800b230:	4288      	cmp	r0, r1
 800b232:	b510      	push	{r4, lr}
 800b234:	eb01 0402 	add.w	r4, r1, r2
 800b238:	d902      	bls.n	800b240 <memmove+0x10>
 800b23a:	4284      	cmp	r4, r0
 800b23c:	4623      	mov	r3, r4
 800b23e:	d807      	bhi.n	800b250 <memmove+0x20>
 800b240:	1e43      	subs	r3, r0, #1
 800b242:	42a1      	cmp	r1, r4
 800b244:	d008      	beq.n	800b258 <memmove+0x28>
 800b246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b24a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b24e:	e7f8      	b.n	800b242 <memmove+0x12>
 800b250:	4402      	add	r2, r0
 800b252:	4601      	mov	r1, r0
 800b254:	428a      	cmp	r2, r1
 800b256:	d100      	bne.n	800b25a <memmove+0x2a>
 800b258:	bd10      	pop	{r4, pc}
 800b25a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b25e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b262:	e7f7      	b.n	800b254 <memmove+0x24>

0800b264 <_realloc_r>:
 800b264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b268:	4680      	mov	r8, r0
 800b26a:	4614      	mov	r4, r2
 800b26c:	460e      	mov	r6, r1
 800b26e:	b921      	cbnz	r1, 800b27a <_realloc_r+0x16>
 800b270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b274:	4611      	mov	r1, r2
 800b276:	f7fd b965 	b.w	8008544 <_malloc_r>
 800b27a:	b92a      	cbnz	r2, 800b288 <_realloc_r+0x24>
 800b27c:	f7ff fc88 	bl	800ab90 <_free_r>
 800b280:	4625      	mov	r5, r4
 800b282:	4628      	mov	r0, r5
 800b284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b288:	f000 f86d 	bl	800b366 <_malloc_usable_size_r>
 800b28c:	4284      	cmp	r4, r0
 800b28e:	4607      	mov	r7, r0
 800b290:	d802      	bhi.n	800b298 <_realloc_r+0x34>
 800b292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b296:	d812      	bhi.n	800b2be <_realloc_r+0x5a>
 800b298:	4621      	mov	r1, r4
 800b29a:	4640      	mov	r0, r8
 800b29c:	f7fd f952 	bl	8008544 <_malloc_r>
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d0ed      	beq.n	800b282 <_realloc_r+0x1e>
 800b2a6:	42bc      	cmp	r4, r7
 800b2a8:	4622      	mov	r2, r4
 800b2aa:	4631      	mov	r1, r6
 800b2ac:	bf28      	it	cs
 800b2ae:	463a      	movcs	r2, r7
 800b2b0:	f7fd f911 	bl	80084d6 <memcpy>
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	4640      	mov	r0, r8
 800b2b8:	f7ff fc6a 	bl	800ab90 <_free_r>
 800b2bc:	e7e1      	b.n	800b282 <_realloc_r+0x1e>
 800b2be:	4635      	mov	r5, r6
 800b2c0:	e7df      	b.n	800b282 <_realloc_r+0x1e>

0800b2c2 <_raise_r>:
 800b2c2:	291f      	cmp	r1, #31
 800b2c4:	b538      	push	{r3, r4, r5, lr}
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	d904      	bls.n	800b2d6 <_raise_r+0x14>
 800b2cc:	2316      	movs	r3, #22
 800b2ce:	6003      	str	r3, [r0, #0]
 800b2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d4:	bd38      	pop	{r3, r4, r5, pc}
 800b2d6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b2d8:	b112      	cbz	r2, 800b2e0 <_raise_r+0x1e>
 800b2da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2de:	b94b      	cbnz	r3, 800b2f4 <_raise_r+0x32>
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f000 f831 	bl	800b348 <_getpid_r>
 800b2e6:	462a      	mov	r2, r5
 800b2e8:	4601      	mov	r1, r0
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2f0:	f000 b818 	b.w	800b324 <_kill_r>
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d00a      	beq.n	800b30e <_raise_r+0x4c>
 800b2f8:	1c59      	adds	r1, r3, #1
 800b2fa:	d103      	bne.n	800b304 <_raise_r+0x42>
 800b2fc:	2316      	movs	r3, #22
 800b2fe:	6003      	str	r3, [r0, #0]
 800b300:	2001      	movs	r0, #1
 800b302:	e7e7      	b.n	800b2d4 <_raise_r+0x12>
 800b304:	2400      	movs	r4, #0
 800b306:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b30a:	4628      	mov	r0, r5
 800b30c:	4798      	blx	r3
 800b30e:	2000      	movs	r0, #0
 800b310:	e7e0      	b.n	800b2d4 <_raise_r+0x12>
	...

0800b314 <raise>:
 800b314:	4b02      	ldr	r3, [pc, #8]	; (800b320 <raise+0xc>)
 800b316:	4601      	mov	r1, r0
 800b318:	6818      	ldr	r0, [r3, #0]
 800b31a:	f7ff bfd2 	b.w	800b2c2 <_raise_r>
 800b31e:	bf00      	nop
 800b320:	20000104 	.word	0x20000104

0800b324 <_kill_r>:
 800b324:	b538      	push	{r3, r4, r5, lr}
 800b326:	4d07      	ldr	r5, [pc, #28]	; (800b344 <_kill_r+0x20>)
 800b328:	2300      	movs	r3, #0
 800b32a:	4604      	mov	r4, r0
 800b32c:	4608      	mov	r0, r1
 800b32e:	4611      	mov	r1, r2
 800b330:	602b      	str	r3, [r5, #0]
 800b332:	f000 f8ff 	bl	800b534 <_kill>
 800b336:	1c43      	adds	r3, r0, #1
 800b338:	d102      	bne.n	800b340 <_kill_r+0x1c>
 800b33a:	682b      	ldr	r3, [r5, #0]
 800b33c:	b103      	cbz	r3, 800b340 <_kill_r+0x1c>
 800b33e:	6023      	str	r3, [r4, #0]
 800b340:	bd38      	pop	{r3, r4, r5, pc}
 800b342:	bf00      	nop
 800b344:	20000c80 	.word	0x20000c80

0800b348 <_getpid_r>:
 800b348:	f7fc bdfc 	b.w	8007f44 <_getpid>

0800b34c <__ascii_wctomb>:
 800b34c:	b149      	cbz	r1, 800b362 <__ascii_wctomb+0x16>
 800b34e:	2aff      	cmp	r2, #255	; 0xff
 800b350:	bf85      	ittet	hi
 800b352:	238a      	movhi	r3, #138	; 0x8a
 800b354:	6003      	strhi	r3, [r0, #0]
 800b356:	700a      	strbls	r2, [r1, #0]
 800b358:	f04f 30ff 	movhi.w	r0, #4294967295
 800b35c:	bf98      	it	ls
 800b35e:	2001      	movls	r0, #1
 800b360:	4770      	bx	lr
 800b362:	4608      	mov	r0, r1
 800b364:	4770      	bx	lr

0800b366 <_malloc_usable_size_r>:
 800b366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b36a:	1f18      	subs	r0, r3, #4
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	bfbc      	itt	lt
 800b370:	580b      	ldrlt	r3, [r1, r0]
 800b372:	18c0      	addlt	r0, r0, r3
 800b374:	4770      	bx	lr

0800b376 <sqrt>:
 800b376:	b538      	push	{r3, r4, r5, lr}
 800b378:	ed2d 8b02 	vpush	{d8}
 800b37c:	ec55 4b10 	vmov	r4, r5, d0
 800b380:	f000 f826 	bl	800b3d0 <__ieee754_sqrt>
 800b384:	4622      	mov	r2, r4
 800b386:	462b      	mov	r3, r5
 800b388:	4620      	mov	r0, r4
 800b38a:	4629      	mov	r1, r5
 800b38c:	eeb0 8a40 	vmov.f32	s16, s0
 800b390:	eef0 8a60 	vmov.f32	s17, s1
 800b394:	f7f5 fbca 	bl	8000b2c <__aeabi_dcmpun>
 800b398:	b990      	cbnz	r0, 800b3c0 <sqrt+0x4a>
 800b39a:	2200      	movs	r2, #0
 800b39c:	2300      	movs	r3, #0
 800b39e:	4620      	mov	r0, r4
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	f7f5 fb9b 	bl	8000adc <__aeabi_dcmplt>
 800b3a6:	b158      	cbz	r0, 800b3c0 <sqrt+0x4a>
 800b3a8:	f7fc ff72 	bl	8008290 <__errno>
 800b3ac:	2321      	movs	r3, #33	; 0x21
 800b3ae:	6003      	str	r3, [r0, #0]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	f7f5 fa48 	bl	800084c <__aeabi_ddiv>
 800b3bc:	ec41 0b18 	vmov	d8, r0, r1
 800b3c0:	eeb0 0a48 	vmov.f32	s0, s16
 800b3c4:	eef0 0a68 	vmov.f32	s1, s17
 800b3c8:	ecbd 8b02 	vpop	{d8}
 800b3cc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b3d0 <__ieee754_sqrt>:
 800b3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d4:	ec55 4b10 	vmov	r4, r5, d0
 800b3d8:	4e55      	ldr	r6, [pc, #340]	; (800b530 <__ieee754_sqrt+0x160>)
 800b3da:	43ae      	bics	r6, r5
 800b3dc:	ee10 0a10 	vmov	r0, s0
 800b3e0:	ee10 3a10 	vmov	r3, s0
 800b3e4:	462a      	mov	r2, r5
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	d110      	bne.n	800b40c <__ieee754_sqrt+0x3c>
 800b3ea:	ee10 2a10 	vmov	r2, s0
 800b3ee:	462b      	mov	r3, r5
 800b3f0:	f7f5 f902 	bl	80005f8 <__aeabi_dmul>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	4629      	mov	r1, r5
 800b3fc:	f7f4 ff46 	bl	800028c <__adddf3>
 800b400:	4604      	mov	r4, r0
 800b402:	460d      	mov	r5, r1
 800b404:	ec45 4b10 	vmov	d0, r4, r5
 800b408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b40c:	2d00      	cmp	r5, #0
 800b40e:	dc10      	bgt.n	800b432 <__ieee754_sqrt+0x62>
 800b410:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b414:	4330      	orrs	r0, r6
 800b416:	d0f5      	beq.n	800b404 <__ieee754_sqrt+0x34>
 800b418:	b15d      	cbz	r5, 800b432 <__ieee754_sqrt+0x62>
 800b41a:	ee10 2a10 	vmov	r2, s0
 800b41e:	462b      	mov	r3, r5
 800b420:	ee10 0a10 	vmov	r0, s0
 800b424:	f7f4 ff30 	bl	8000288 <__aeabi_dsub>
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	f7f5 fa0e 	bl	800084c <__aeabi_ddiv>
 800b430:	e7e6      	b.n	800b400 <__ieee754_sqrt+0x30>
 800b432:	1512      	asrs	r2, r2, #20
 800b434:	d074      	beq.n	800b520 <__ieee754_sqrt+0x150>
 800b436:	07d4      	lsls	r4, r2, #31
 800b438:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b43c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b440:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b444:	bf5e      	ittt	pl
 800b446:	0fda      	lsrpl	r2, r3, #31
 800b448:	005b      	lslpl	r3, r3, #1
 800b44a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b44e:	2400      	movs	r4, #0
 800b450:	0fda      	lsrs	r2, r3, #31
 800b452:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b456:	107f      	asrs	r7, r7, #1
 800b458:	005b      	lsls	r3, r3, #1
 800b45a:	2516      	movs	r5, #22
 800b45c:	4620      	mov	r0, r4
 800b45e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b462:	1886      	adds	r6, r0, r2
 800b464:	428e      	cmp	r6, r1
 800b466:	bfde      	ittt	le
 800b468:	1b89      	suble	r1, r1, r6
 800b46a:	18b0      	addle	r0, r6, r2
 800b46c:	18a4      	addle	r4, r4, r2
 800b46e:	0049      	lsls	r1, r1, #1
 800b470:	3d01      	subs	r5, #1
 800b472:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b476:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b47a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b47e:	d1f0      	bne.n	800b462 <__ieee754_sqrt+0x92>
 800b480:	462a      	mov	r2, r5
 800b482:	f04f 0e20 	mov.w	lr, #32
 800b486:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b48a:	4281      	cmp	r1, r0
 800b48c:	eb06 0c05 	add.w	ip, r6, r5
 800b490:	dc02      	bgt.n	800b498 <__ieee754_sqrt+0xc8>
 800b492:	d113      	bne.n	800b4bc <__ieee754_sqrt+0xec>
 800b494:	459c      	cmp	ip, r3
 800b496:	d811      	bhi.n	800b4bc <__ieee754_sqrt+0xec>
 800b498:	f1bc 0f00 	cmp.w	ip, #0
 800b49c:	eb0c 0506 	add.w	r5, ip, r6
 800b4a0:	da43      	bge.n	800b52a <__ieee754_sqrt+0x15a>
 800b4a2:	2d00      	cmp	r5, #0
 800b4a4:	db41      	blt.n	800b52a <__ieee754_sqrt+0x15a>
 800b4a6:	f100 0801 	add.w	r8, r0, #1
 800b4aa:	1a09      	subs	r1, r1, r0
 800b4ac:	459c      	cmp	ip, r3
 800b4ae:	bf88      	it	hi
 800b4b0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b4b4:	eba3 030c 	sub.w	r3, r3, ip
 800b4b8:	4432      	add	r2, r6
 800b4ba:	4640      	mov	r0, r8
 800b4bc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b4c0:	f1be 0e01 	subs.w	lr, lr, #1
 800b4c4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b4c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b4cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b4d0:	d1db      	bne.n	800b48a <__ieee754_sqrt+0xba>
 800b4d2:	430b      	orrs	r3, r1
 800b4d4:	d006      	beq.n	800b4e4 <__ieee754_sqrt+0x114>
 800b4d6:	1c50      	adds	r0, r2, #1
 800b4d8:	bf13      	iteet	ne
 800b4da:	3201      	addne	r2, #1
 800b4dc:	3401      	addeq	r4, #1
 800b4de:	4672      	moveq	r2, lr
 800b4e0:	f022 0201 	bicne.w	r2, r2, #1
 800b4e4:	1063      	asrs	r3, r4, #1
 800b4e6:	0852      	lsrs	r2, r2, #1
 800b4e8:	07e1      	lsls	r1, r4, #31
 800b4ea:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b4ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b4f2:	bf48      	it	mi
 800b4f4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b4f8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b4fc:	4614      	mov	r4, r2
 800b4fe:	e781      	b.n	800b404 <__ieee754_sqrt+0x34>
 800b500:	0ad9      	lsrs	r1, r3, #11
 800b502:	3815      	subs	r0, #21
 800b504:	055b      	lsls	r3, r3, #21
 800b506:	2900      	cmp	r1, #0
 800b508:	d0fa      	beq.n	800b500 <__ieee754_sqrt+0x130>
 800b50a:	02cd      	lsls	r5, r1, #11
 800b50c:	d50a      	bpl.n	800b524 <__ieee754_sqrt+0x154>
 800b50e:	f1c2 0420 	rsb	r4, r2, #32
 800b512:	fa23 f404 	lsr.w	r4, r3, r4
 800b516:	1e55      	subs	r5, r2, #1
 800b518:	4093      	lsls	r3, r2
 800b51a:	4321      	orrs	r1, r4
 800b51c:	1b42      	subs	r2, r0, r5
 800b51e:	e78a      	b.n	800b436 <__ieee754_sqrt+0x66>
 800b520:	4610      	mov	r0, r2
 800b522:	e7f0      	b.n	800b506 <__ieee754_sqrt+0x136>
 800b524:	0049      	lsls	r1, r1, #1
 800b526:	3201      	adds	r2, #1
 800b528:	e7ef      	b.n	800b50a <__ieee754_sqrt+0x13a>
 800b52a:	4680      	mov	r8, r0
 800b52c:	e7bd      	b.n	800b4aa <__ieee754_sqrt+0xda>
 800b52e:	bf00      	nop
 800b530:	7ff00000 	.word	0x7ff00000

0800b534 <_kill>:
 800b534:	4b02      	ldr	r3, [pc, #8]	; (800b540 <_kill+0xc>)
 800b536:	2258      	movs	r2, #88	; 0x58
 800b538:	601a      	str	r2, [r3, #0]
 800b53a:	f04f 30ff 	mov.w	r0, #4294967295
 800b53e:	4770      	bx	lr
 800b540:	20000c80 	.word	0x20000c80

0800b544 <_exit>:
 800b544:	e7fe      	b.n	800b544 <_exit>
	...

0800b548 <_init>:
 800b548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54a:	bf00      	nop
 800b54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b54e:	bc08      	pop	{r3}
 800b550:	469e      	mov	lr, r3
 800b552:	4770      	bx	lr

0800b554 <_fini>:
 800b554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b556:	bf00      	nop
 800b558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b55a:	bc08      	pop	{r3}
 800b55c:	469e      	mov	lr, r3
 800b55e:	4770      	bx	lr
